[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Argo User’s manual",
    "section": "",
    "text": "This document is the Argo data user’s manual. It contains the description of the formats and files produced by the Argo Data Assembly Centres (DACs). These files are distributed by Argo Global Data Assembly Centre (GDAC).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Argo User's manual</span>"
    ]
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1 Notice on file format change transition\nThis document is the Argo data user’s manual. It contains the description of the formats and files produced by the Argo DACs.\nThis version of the “User’s manual” is adjusting the file formats to the growing variety of floats and user needs. It introduces a complete revision of metadata and technical files. To cope with this radical change, during a transition period the version 2.2 and 3.1 of the technical and metadata file will be valid in the Argo data system.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#user-obligations",
    "href": "chapter1.html#user-obligations",
    "title": "2  Introduction",
    "section": "2.2 User Obligations",
    "text": "2.2 User Obligations\nA user of Argo data is expected to read and understand this manual and the documentation about the data contained in the “attributes” of the NetCDF data files, as these contain essential information about data quality and accuracy. A user should acknowledge use of Argo data in all publications and products where such data are used, preferably with the following standard sentence and DOI: “These data were collected and made freely available by the international Argo project and the national programs that contribute to it. http://doi.org/10.17882/42182”. The Argo dataset can also be added to the references section using the following citation: Argo (2019). Argo float data and metadata from Global Data Assembly Centre (Argo GDAC). SEANOE. http://doi.org/10.17882/42182 More information about the available DOIs for both Argo documents and the dataset versions can be found here: http://www.argodatamgt.org/Access-to-data/Argo-DOI-Digital-Object-Identifier",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#disclaimer",
    "href": "chapter1.html#disclaimer",
    "title": "2  Introduction",
    "section": "2.3 Disclaimer",
    "text": "2.3 Disclaimer\nArgo data are published without any warranty, express or implied. The user assumes all risk arising from his/her use of Argo data. Argo data are intended to be research-quality and include estimates of data quality and accuracy, but it is possible that these estimates or the data themselves may contain errors. It is the sole responsibility of the user to assess if the data are appropriate for his/her use, and to interpret the data, data quality, and data accuracy accordingly. Argo welcomes users to ask questions and report problems to the contact addresses listed on the Argo internet page. Argo data are continuously managed; the user should be aware that after he downloaded data, those data may have been updated on the Argo data server.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#further-information-sources-and-contact-information",
    "href": "chapter1.html#further-information-sources-and-contact-information",
    "title": "2  Introduction",
    "section": "2.4 Further information sources and contact information",
    "text": "2.4 Further information sources and contact information\nArgo website: https://argo.ucsd.edu If you detect any problem in the Argo dataset, please give us your feedback via support@argo.net",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#argo-program-data-management-context",
    "href": "chapter1.html#argo-program-data-management-context",
    "title": "2  Introduction",
    "section": "2.5 Argo program, data management context",
    "text": "2.5 Argo program, data management context\nThe objective of the Argo program is to operate and manage a set of more than 3000 floats distributed in all oceans, with the vision that the network will be a permanent and operational system. The Argo data management group is creating a unique data format for internet distribution to users and for data exchange between national data centres (DACs) and global data centres (GDACs). Profile data, metadata, trajectories and technical data are included in this standardization effort. The Argo data formats are based on NetCDF because: It is a widely accepted data format by the user community, It is a self-describing format for which tools are widely available, It is a reliable and efficient format for data exchange.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#argo-float-cycles",
    "href": "chapter1.html#argo-float-cycles",
    "title": "2  Introduction",
    "section": "2.6 Argo float cycles",
    "text": "2.6 Argo float cycles\nA typical Argo float drifts for four years or more in the ocean. It continuously performs measurement cycles. A cycle is defined as a series of actions made by a float and includes either a descending profile or an ascending profile (or, rarely, both); it may also include immersion drift or surface drift. An Argo cycle starts with a descent toward deep water, usually from the surface. It ends after the next programmed ascent to the surface, and if begun, after the full surface interval has been completed. During the surface interval, data transmission typically occurs but it is not a requirement for a cycle to have occurred Each cycle of a float has a unique number, increased by one after each ascent to shallow water. For most floats, this will be the cycle number transmitted by the float. In some cases, this number will need to be calculated by the operator.\nProfile measurements (e.g. pressure, temperature, salinity) are performed during ascent, occasionally during descent. Subsurface measurements during parking are sometimes performed (e.g. every 12 hours).\nA typical Argo float cycle during 3 years or more in the ocean. A more detailed cycle description is available in reference table 15 (https://vocab.nerc.ac.uk/collection/R15/), chapter §3.15. Cycle naming convention Float cycle numbers usually start at 1. The next cycles are increasing numbers (e.g. 2, 3,…N). If the float reports cycle number, this is what should be used in all Argo files. Very conveniently some floats transmit their configuration during the transmissions before they descend for profile 1.\nCycle 0 contains the first surface drift with technical data transmission or configuration information. This data is reported in the technical data files. Cycle 0 may contain subsurface measurements if a descending/ascending profile is performed before any data transmission. The time length of this cycle is usually shorter than the next nominal cycles. The cycle time is therefore regular only for later profiles and may be variable if the float is reprogrammed after its deployment.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#real-time-real-time-adjusted-data-and-delayed-mode-data",
    "href": "chapter1.html#real-time-real-time-adjusted-data-and-delayed-mode-data",
    "title": "2  Introduction",
    "section": "2.7 Real-time, real-time adjusted data and delayed mode data",
    "text": "2.7 Real-time, real-time adjusted data and delayed mode data\nData from Argo floats are transmitted from the float, passed through processing and automatic quality control procedures as quickly as possible after the float begins reporting at the surface. The target is to issue the data to the GTS and Global Data Assembly Centres (GDACs) within 12 hours of surfacing, or as quickly thereafter as possible. These are called real-time data or raw data. They are denoted by DATA_MODE = ‘R’. The data are also sent to the Principal Investigators, the scientists who apply additional procedures to check data quality and apply adjustments where necessary. These constitute delayed-mode data and are denoted by DATA_MODE = ‘D’. For the core CTD data, the target is for the delayed-mode data to be available at the GDACs about 12 months after the raw data are transmitted. For biogeochemical (BGC) data, their delayed-mode data can be available as early as 5 to 6 cycles after data transmission. The difference in timing of availability between delayed-mode CTD and BGC data are due to the difference in maturity of the sensors. CTD sensors are relatively mature sensors and their raw data are usually of good quality. Their delayed-mode assessment involves evaluation of the long-term sensor stability, which typically requires a float data record of about 12 months. On the other hand, BGC sensors are relatively new and their raw data are typically unfit for scientific usage. Therefore early adjustments (after the first 5 to 6 cycles) can increase the accuracy of the raw BGC data significantly. Re-assessment of delayed-mode BGC data is carried out when longer float data records become available. Some adjustments can be applied to the raw data automatically in real-time (such as adjustments based on previous delayed-mode corrections). These real-time adjusted data are denoted by DATA_MODE = ‘A’. The real-time adjustment can improve the data quality for users who need to access data in real-time, but they are only an interim adjustment and are revised in delayed-mode.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter2.html",
    "href": "chapter2.html",
    "title": "3  Formats description",
    "section": "",
    "text": "3.1 Overview of the formats\nArgo data format is an implementation of NetCDF format developed by UCAR/Unidata (https://doi.org/10.5065/D6H70CW6). NetCDF (Network Common Data Form) is an interface for array-oriented data access and a library that provides an implementation of the interface. The NetCDF library also defines a machine-independent format for representing scientific data. Together, the interface, library, and format support the creation, access, and sharing of scientific data. The NetCDF software was developed at the Unidata Program Centre in Boulder, Colorado.\nArgo formats are divided in 4 sections:\nArgo data comply with NetCDF Climate and Forecast (CF) Metadata Conventions:\nArgo data uses the UDUNITS convention when applicable to populate the variable attribute “unit” in the Data section. The UDUNITS standard, database and supporting information is available from - https://doi.org/10.5065/D6KD1WN0\nArgo date and time: all date and time have to be given either in Universal Time (UTC) or in float’s time.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#overview-of-the-formats",
    "href": "chapter2.html#overview-of-the-formats",
    "title": "3  Formats description",
    "section": "",
    "text": "Dimensions and definitions\nGeneral information\nData section\nHistory section\n\n\n\nhttps://cfconventions.org/",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#core-argo-profile-format-version-3.1",
    "href": "chapter2.html#core-argo-profile-format-version-3.1",
    "title": "3  Formats description",
    "section": "3.2 Core-Argo profile format version 3.1",
    "text": "3.2 Core-Argo profile format version 3.1\nAn Argo single-cycle profile file contains a set of profiles from a single cycle. The minimum number is one profile per cycle. There is no defined maximum number of profiles per cycle. Core-Argo profile contains the CTD sensor parameters (pressure, temperature, salinity, conductivity) that are measured with the same vertical sampling scheme and at the same location and time. Additional parameters from other sensors are stored in a B-Argo profile file. The B-profile file is very similar to core-Argo profile file; its additional features are listed in §2.6 Some specialty floats collect additional profiles per cycle. These specialty profiles contain parameters measured at pressure levels that are different from the CTD levels, and can be at locations and time that are different from the primary profile. When multiple profiles exist in a single cycle, users are urged to check the information associated with each profile in order to determine their spatial and temporal relations. Some examples of speciality profiles with different vertical sampling schemes are: Bouncing profiles: a series of shallow profiles performed during one cycle. High resolution near-surface observations: higher resolution vertical sampling near the surface from unpumped CTD. For single-cycle profile file naming conventions, see §4.1.\n\n3.2.1 Global attributes\nThe global attributes section is used for data discovery. The following global attributes should appear in the global section:\n// global attributes: :title = “Argo float vertical profile”; :institution = “CSIRO”; :source = “Argo float”; :history = “2011-04-22T06:00:00Z creation”; :references = “http://www.argodatamgt.org/Documentation”; :id = “https://doi.org/10.17882/42182”; :comment = “free text”; :user_manual_version = “3.4”; :Conventions = “Argo-3.1 CF-1.6”; :featureType = “trajectoryProfile”;\n\n\n\n\n\n\n\nGlobal attribute name\nDefinition\n\n\n\n\ntitle\nA succinct description of what is in the dataset.\n\n\ninstitution\nSpecifies where the original data was produced.\n\n\nsource\nThe method of production of the original data. If it was model-generated, source should name the model and its version, as specifically as could be useful. If it is observational, source should characterize it (e.g., “surface observation” or “radiosonde”).\n\n\nhistory\nProvides an audit trail for modifications to the original data. Well-behaved generic NetCDF filters will automatically append their name and the parameters with which they were invoked to the global history attribute of an input NetCDF file. We recommend that each line begin with a timestamp indicating the date and time of day that the program was executed.\n\n\nreferences\nPublished or web-based references that describe the data or methods used to produce it.\n\n\nid\nThe Argo GDAC data DOI: https://doi.org/10.17882/42182 This attribute is optional and recommended\n\n\ncomment\nMiscellaneous information about the data or methods used to produce it.\n\n\nuser_manual_version\nThe version number of the user manual\n\n\nConventions\nThe conventions supported by this file, blank separated\n\n\nfeatureType\nThe NetCDF CF feature type.\n\n\ncomment_on_resolution\nOptional comment on parameter resolution\n\n\n\n\n\n3.2.2 Dimensions\n\n\n\n\n\n\n\n\nName\nValue\nDefinition\n\n\n\n\nDATE_TIME\nDATE_TIME = 14;\nThis dimension is the length of an ASCII date and time value.Date_time convention is : YYYYMMDDHHMISSYYYY : yearMM : monthDD : dayHH : hour of the day (as 0 to 23)MI : minutes (as 0 to 59)SS : seconds (as 0 to 59)Date and time values are always in universal time coordinates (UTC).Examples : 20010105172834 : January 5th 2001 17:28:3419971217000000 : December 17th 1997 00:00:00\n\n\nSTRING256STRING64STRING32STRING16STRING8STRING4STRING2\nSTRING256 = 256;STRING64   =  64;STRING32   =  32;STRING16   =  16;STRING8     =   8;STRING4     =   4;STRING2     =   2;\nString dimensions from 2 to 256.\n\n\nN_PROF\nN_PROF = &lt;int value&gt;;\nNumber of profiles contained in the file.This dimension depends on the data set.A file contains at least one profile.There is no defined limit on the maximum number of profiles in a file.Example : N_PROF = 100\n\n\nN_PARAM\nN_PARAM = &lt;int value&gt;;\nMaximum number of parameters measured or calculated for a pressure sample.This dimension depends on the data set.Examples :(pressure, temperature) : N_PARAM = 2(pressure, temperature, salinity) : N_PARAM = 3(pressure, temperature, conductivity, salinity) : N_PARAM = 4 \n\n\nN_LEVELS\nN_LEVELS = &lt;int value&gt;;\nMaximum number of pressure levels contained in a profile.This dimension depends on the data set.Example : N_LEVELS = 100\n\n\nN_CALIB\nN_CALIB = &lt;int value&gt;;\nMaximum number of calibrations performed on a profile.This dimension depends on the data set.Example : N_CALIB = 10\n\n\nN_HISTORY\nN_HISTORY = UNLIMITED;\nNumber of history records.\n\n\n\n\n\n3.2.3 General information on the profile file\nThis section contains information about the whole file.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nDATA_TYPE\nchar DATA_TYPE(STRING16);DATA_TYPE:long_name = “Data type”;DATA_TYPE:conventions = “Argo reference table 1”;DATA_TYPE:_FillValue = ” “;\nThis field contains the type of data contained in the file.The list of acceptable data types is in the reference table 1 (https://vocab.nerc.ac.uk/collection/R01/).Example : Argo profile\n\n\nFORMAT_VERSION\nchar FORMAT_VERSION(STRING4);FORMAT_VERSION:long_name = “File format version”;FORMAT_VERSION:_FillValue = ” “;\nFile format versionExample : “3.1”\n\n\nHANDBOOK_VERSION\nchar HANDBOOK_VERSION(STRING4);HANDBOOK_VERSION:long_name = “Data handbook version”;br&gt;HANDBOOK_VERSION:_FillValue = ” “;\nVersion number of the data handbook.This field indicates that the data contained in this file are managed according to the policy described in the Argo data management handbook.Example : “1.0”\n\n\nREFERENCE_DATE_TIME\nchar REFERENCE_DATE_TIME(DATE_TIME);REFERENCE_DATE_TIME:long_name = “Date of reference for Julian days”;REFERENCE_DATE_TIME:conventions = “YYYYMMDDHHMISS”;REFERENCE_DATE_TIME:_FillValue = ” “;\nDate of reference for Julian days.The recommended reference date time is “19500101000000” : January 1st 1950 00:00:00\n\n\nDATE_CREATION\nchar DATE_CREATION(DATE_TIME);DATE_CREATION:long_name = “Date of file creation”;DATE_CREATION:conventions = “YYYYMMDDHHMISS”;DATE_CREATION:_FillValue = ” “;\nDate and time (UTC) of creation of this file.Format : YYYYMMDDHHMISSExample:20011229161700 : December 29th 2001 16 :17 :00\n\n\nDATE_UPDATE\nchar DATE_UPDATE(DATE_TIME);DATE_UPDATE:long_name = “Date of update of this file”;DATE_UPDATE:conventions = “YYYYMMDDHHMISS”;DATE_UPDATE:_FillValue = ” “;\nDate and time (UTC) of update of this file.Format : YYYYMMDDHHMISSExample :20011230090500 : December 30th 2001 09 :05 :00\n\n\n\n\n\n3.2.4 General information for each profile\nThis section contains general information on each profile. Each item of this section has a N_PROF (number of profiles) dimension.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nPLATFORM_NUMBER\nchar PLATFORM_NUMBER(N_PROF, STRING8);PLATFORM_NUMBER:long_name = “Float unique identifier”;PLATFORM_NUMBER:conventions = “WMO float identifier : A9IIIII”;PLATFORM_NUMBER:_FillValue = ” “;\nWMO float identifier.WMO is the World Meteorological Organization.This platform number is unique.Example : 6900045\n\n\nPROJECT_NAME\nchar PROJECT_NAME(N_PROF, STRING64);PROJECT_NAME:long_name = “Name of the project”;PROJECT_NAME:_FillValue = ” “;\nName of the project that operates the float.Multiple projects can be separated by commas.Example: “GYROSCOPE, GMMC”\n\n\nPI_NAME\nchar PI_NAME (N_PROF, STRING64);PI_NAME:long_name = “Name of the principal investigator”;PI_NAME:_FillValue = ” “;\nName of the principal investigator responsible for the profiling float. Example: “Julia UITZ”.Valid PI names are listed in reference table R40 https://vocab.nerc.ac.uk/collection/R40/.Multiple names can be concatenated, separated by commas.\n\n\nSTATION_PARAMETERS\nchar STATION_PARAMETERS(N_PROF, N_PARAM, STRING16);STATION_PARAMETERS:long_name = “List of available parameters for the station”;STATION_PARAMETERS:conventions = “Argo reference table 3”;STATION_PARAMETERS:_FillValue = ” “;\nList of parameters contained in this profile.The parameter names are listed in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).Examples : TEMP, PSAL, CNDCTEMP : temperaturePSAL : practical salinityCNDC : conductivity\n\n\nCYCLE_NUMBER\nint CYCLE_NUMBER(N_PROF);CYCLE_NUMBER:long_name = “Float cycle number”;CYCLE_NUMBER:conventions = “0…N, 0 : launch cycle (if exists), 1 : first complete cycle”;CYCLE_NUMBER:_FillValue = 99999;\nFloat cycle number.See §1.6: float cycle definition.\n\n\nDIRECTION\nchar DIRECTION(N_PROF);DIRECTION:long_name = “Direction of the station profiles”;DIRECTION:conventions = “A: ascending profiles, D: descending profiles”;DIRECTION:_FillValue = ” “;\nType of profile on which measurement occurs.A : ascending profileD : descending profile\n\n\nDATA_CENTRE\nchar DATA_CENTRE(N_PROF, STRING2);DATA_CENTRE:long_name = “Data centre in charge of float data processing”;DATA_CENTRE:conventions = “Argo reference table 4”;DATA_CENTRE:_FillValue = ” “;\nCode for the data centre in charge of the float data management.The data centre codes are described in the reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example : “ME” for MEDS\n\n\nDC_REFERENCE\nchar DC_REFERENCE(N_PROF, STRING32);DC_REFERENCE:long_name = “Station unique identifier in data centre”;DC_REFERENCE:conventions = “Data centre convention”;DC_REFERENCE:_FillValue = ” “;\nUnique identifier of the profile in the data centre.Data centres may have different identifier schemes.DC_REFERENCE is therefore not unique across data centres.\n\n\nDATA_STATE_INDICATOR\nchar DATA_STATE_INDICATOR(N_PROF, STRING4);DATA_STATE_INDICATOR:long_name = “Degree of processing the data have passed through”;DATA_STATE_INDICATOR:conventions = “Argo reference table 6”;DATA_STATE_INDICATOR:_FillValue = ” “;\nDegree of processing the data has passed through.The data state indicator is described in the reference table 6 (https://vocab.nerc.ac.uk/collection/R06/).\n\n\nDATA_MODE\nchar DATA_MODE(N_PROF);DATA_MODE:long_name = “Delayed mode or real time data”;DATA_MODE:conventions = “R : real time; D : delayed mode; A : real time with adjustment”;DATA_MODE:_FillValue = ” “;\nIndicates if the profile contains real time, delayed mode or adjusted data.R : real time dataD : delayed mode dataA : real time data with adjusted values\n\n\nPLATFORM_TYPE\nchar PLATFORM_TYPE(N_PROF, STRING32);PLATFORM_TYPE:long_name = “Type of float”;PLATFORM_TYPE:conventions = “Argo reference table 23”;PLATFORM_TYPE:_FillValue = ” “; \nType of float listed in reference table 23 (https://vocab.nerc.ac.uk/collection/R23/).Example: SOLO, APEX, PROVOR, ARVOR, NINJA\n\n\nFLOAT_SERIAL_NO\nchar FLOAT_SERIAL_NO(N_PROF, STRING32);FLOAT_SERIAL_NO:long_name = “Serial number of the float”;FLOAT_SERIAL_NO:_FillValue = ” “;\nSerial number of the float.Example 1679\n\n\nFIRMWARE_VERSION\nchar FIRMWARE_VERSION(N_PROF, STRING64);FIRMWARE_VERSION:long_name = “Instrument firmware version”;FIRMWARE_VERSION:_FillValue = ” “;\nFirmware version of the float.Example : “013108”The dimension STRING32 instead of STRING64 remains accepted.\n\n\nWMO_INST_TYPE\nchar WMO_INST_TYPE(N_PROF, STRING4);WMO_INST_TYPE:long_name = “Coded instrument type”;WMO_INST_TYPE:conventions = “Argo reference table 8”;WMO_INST_TYPE:_FillValue = ” “;\nInstrument type from WMO code table 1770.A subset of WMO table 1770 is documented in the reference table 8 (https://vocab.nerc.ac.uk/collection/R08/).Example : 846 : Webb Research float, Seabird sensor\n\n\nJULD\ndouble JULD(N_PROF);JULD:long_name = “Julian day (UTC) of the station relative to REFERENCE_DATE_TIME”;JULD:standard_name = “time”;JULD:units = “days since 1950-01-01 00:00:00 UTC”;JULD:conventions = “Relative julian days with decimal part (as parts of day)”;JULD:resolution = X;JULD:_FillValue = 999999.;JULD:axis = “T”;\nJulian day of the profile.The integer part represents the day, the decimal part represents the time of the profile.Date and time are in Universal Time.The Julian day is relative to REFERENCE_DATE_TIME.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_QC\nchar JULD_QC(N_PROF);JULD_QC:long_name = “Quality on date and time”;JULD_QC:conventions = “Argo reference table 2”;JULD_QC:_FillValue = ” “;\nQuality flag on JULD date and time.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).Example :1: the date and time seems correct.\n\n\nJULD_LOCATION\ndouble JULD_LOCATION(N_PROF);JULD_LOCATION:long_name = “Julian day (UTC) of the location relative to REFERENCE_DATE_TIME”;JULD_LOCATION:units = “days since 1950-01-01 00:00:00 UTC”;JULD_LOCATION:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_LOCATION:resolution = X;JULD_LOCATION:_FillValue = 999999.;\nJulian day of the location of the profile.The integer part represents the day, the decimal part represents the time of the profile.Date and time are in Universal Time.The Julian day is relative to REFERENCE_DATE_TIME.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nLATITUDE\ndouble LATITUDE(N_PROF);LATITUDE:long_name = “Latitude of the station, best estimate”;LATITUDE:standard_name = “latitude”;LATITUDE:units = “degree_north”;LATITUDE:_FillValue = 99999.;LATITUDE:valid_min = -90.;LATITUDE:valid_max = 90.;LATITUDE:axis = “Y”;\nLatitude of the profile.Unit : degree northThis field contains the best estimated latitude.The latitude value may be improved in delayed mode.The measured locations of the float are located in the trajectory file.Example : 44.4991 : 44° 29’ 56.76’’ N\n\n\nLONGITUDE\ndouble LONGITUDE(N_PROF);LONGITUDE:long_name = “Longitude of the station, best estimate”;LONGITUDE:standard_name = “longitude”;LONGITUDE:units = “degree_east”;LONGITUDE:_FillValue = 99999.;LONGITUDE:valid_min = -180.;LONGITUDE:valid_max = 180.;LONGITUDE:axis = “X”;\nLongitude of the profile.Unit : degree eastThis field contains the best estimated longitude.The longitude value may be improved in delayed mode.The measured locations of the float are located in the trajectory file.Example : 16.7222 : 16° 43’ 19.92’’ E\n\n\nPOSITION_QC\nchar POSITION_QC(N_PROF);POSITION_QC:long_name = “Quality on position (latitude and longitude)”;POSITION_QC:conventions = “Argo reference table 2”;POSITION_QC:_FillValue = ” “;\nQuality flag on position.The flag on position is set according to (LATITUDE, LONGITUDE) quality.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).Example: 1: position seems correct.\n\n\nPOSITIONING_SYSTEM\nchar POSITIONING_SYSTEM(N_PROF, STRING8);POSITIONING_SYSTEM:long_name = “Positioning system”;POSITIONING_SYSTEM:_FillValue = ” “;\nName of the system in charge of positioning the float locations from reference table 9 (https://vocab.nerc.ac.uk/collection/R09/).Examples : ARGOS\n\n\nPOSITION_ERROR_REPORTED\nfloat POSITION_ERROR_REPORTED(N_PROF);POSITION_ERROR_REPORTED:long_name = “Position error reported by the positioning system”;POSITION_ERROR_REPORTED:units = “meters”;POSITION_ERROR_REPORTED:_FillValue = 99999.;\nThis is an optional variable.Position error reported by the positioning system.\n\n\nPOSITION_ERROR_ESTIMATED\nfloat POSITION_ERROR_ESTIMATED(N_PROF);POSITION_ERROR_ESTIMATED:long_name = “Position error estimated by the real-time or delayed-mode process”;POSITION_ERROR_ESTIMATED:units = “meters”;POSITION_ERROR_ESTIMATED:_FillValue = 99999.;\nThis is an optional variable. Position error estimated  by the real-time or delayed-mode process. \n\n\nPOSITION_ERROR_ESTIMATED_COMMENT\nchar POSITION_ERROR_ESTIMATED_COMMENT(N_PROF, STRING1024);POSITION_ERROR_ESTIMATED_COMMENT:long_name = “Comment on the method used to determine POSITION_ERROR_ESTIMATED”;POSITION_ERROR_ESTIMATED_COMMENT:_FillValue = ” “;\nThis is an optional variable.Comment on the method used to determine POSITION_ERROR_ESTIMATED.\n\n\nPROFILE_&lt;PARAM&gt;_QC\nchar PROFILE_&lt;PARAM&gt;_QC(N_PROF);PROFILE_&lt;PARAM&gt;_QC:long_name = “Global quality flag of &lt;PARAM&gt; profile”;PROFILE_&lt;PARAM&gt;_QC:conventions = “Argo reference table 2a”;PROFILE_&lt;PARAM&gt;_QC:_FillValue = ” “;\nGlobal quality flag on the PARAM profile.PARAM is among the STATION_PARAMETERS.The overall flag is set to indicate the percentage of good data in the profile as described in reference table 2a (https://vocab.nerc.ac.uk/collection/RP2/).Example :PROFILE_TEMP_QC = A : the temperature profile contains only good valuesPROFILE_PSAL_QC = C : the salinity profile contains 50% to 75% good values\n\n\nVERTICAL_SAMPLING_SCHEME\nchar VERTICAL_SAMPLING_SCHEME(N_PROF, STRING256);VERTICAL_SAMPLING_SCHEME:long_name = “Vertical sampling scheme”;VERTICAL_SAMPLING_SCHEME:conventions = “Argo reference table 16”;VERTICAL_SAMPLING_SCHEME:_FillValue = ” “;\nUse the vertical sampling scheme to differentiate and identify profiles from a single-cycle with different vertical sampling schemes.See reference table 16 (https://vocab.nerc.ac.uk/collection/R16/).\n\n\nCONFIG_MISSION_NUMBER\nint CONFIG_MISSION_NUMBER(N_PROF);CONFIG_MISSION_NUMBER:long_name = ” Unique number denoting the missions performed by the float”;CONFIG_MISSION_NUMBER:conventions = “1…N, 1 : first complete mission”;CONFIG_MISSION_NUMBER:_FillValue = 99999;\nUnique number of the mission to which this profile belongs.See note on floats with multiple configurations §2.4.6.1.The number 0 (zero) can be used to denote the float’s mission prelude, if it exists.\n\n\n\n\n3.2.4.1 Note: how to sort STATION_PARAMETERS variable\nThe parameters listed in STATION_PARAMETERS should be sorted in the same order within a given float’s data file.\nExamples with POSITION_QC is 8 (estimated value) - Case 1: only one system has been used for the interpolation. That system is shown in POSITIONING_SYSTEM. - Case 2: When no position was transmitted and an estimate of the position in delayed mode relies on information not from a positioning system (a numerical method, model data. etc.) the POSITIONG_SYSTEM should be “NONE”\n\n\n\n3.2.5 Measurements for each profile\nThis section contains information on each level of each profile. Each variable in this section has a N_PROF (number of profiles), N_LEVELS (number of pressure levels) dimension.  contains the raw values transmitted by the float. The values in  should never be altered. _QC contains QC flags that pertain to the values in . Values in _QC are set initially in ‘R’ and ‘A’ modes by the automatic real-time tests. They are later modified in ‘D’ mode at levels where the QC flags are set incorrectly by the real-time procedures, and where erroneous data are not detected by the real-time procedures. Each parameter can be adjusted (in delayed-mode, but also in real-time if appropriate). In that case, _ADJUSTED contains the adjusted values, _ADJUSTED_QC contains the QC flags set by the adjustment process, and _ADJUSTED_ERROR contains the adjustment uncertainties. When a profile has DATA_MODE = ’R’, no adjusted data are available. Hence the adjusted section (_ADJUSTED, _ADJUSTED_QC and _ADJUSTED_ERROR) should be filled with FillValue.\nWhen N_PROF &gt; 1, DATA_MODE for each profile can be assigned differently. This is because when there are multiple profiles, delayed-mode or near real-time adjustments can become available at different times.\nThe adjusted section for each N_PROF should then be filled independently according to its DATA_MODE.\nFor example, in a profile file with 2 profiles, it is possible that - DATA_MODE = ’D’ in N_PROF = 1, and - DATA_MODE = ’R’ in N_PROF = 2.\nIn this case: - the adjusted section in N_PROF=1 with DATA_MODE=’D’ should be filled with their adjusted values; - the adjusted section in N_PROF=2 with DATA_MODE=’R’ should be filled with FillValue. The delayed mode QC for core Argo profiles is described in “Argo quality control manual” by Annie Wong et al. (see http://www.argodatamgt.org/Documentation).\n\n\n\nName\nDefinition\nComment\n\n\n\n\n&lt;PARAM&gt;\nfloat &lt;PARAM&gt;(N_PROF, N_LEVELS);&lt;PARAM&gt;:long_name = “&lt;X&gt;”;&lt;PARAM&gt;:standard_name = “&lt;X&gt;”;&lt;PARAM&gt;:_FillValue = &lt;X&gt;;&lt;PARAM&gt;:units = “&lt;X&gt;”;&lt;PARAM&gt;:valid_min = &lt;X&gt;;&lt;PARAM&gt;:valid_max = &lt;X&gt;;&lt;PARAM&gt;:C_format = “&lt;X&gt;”;&lt;PARAM&gt;:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;:resolution = &lt;X&gt;;\n&lt;PARAM&gt; contains the original values of a parameter listed in  reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).&lt;X&gt; : this field is specified in the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).\n\n\n&lt;PARAM&gt;_QC\nchar &lt;PARAM&gt;_QC(N_PROF, N_LEVELS);&lt;PARAM&gt;_QC:long_name = “quality flag”;&lt;PARAM&gt;_QC:conventions = “Argo reference table 2”;&lt;PARAM&gt;_QC:_FillValue = ” “;\nQuality flag applied on each &lt;PARAM&gt; value.The flag scale is specified in reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).\n\n\n&lt;PARAM&gt;_ADJUSTED\nfloat &lt;PARAM&gt;_ADJUSTED(N_PROF, N_LEVELS);&lt;PARAM&gt;_ADJUSTED:long_name = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:standard_name = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:units = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:valid_min = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:valid_max = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:resolution= &lt;X&gt;;\n&lt;PARAM&gt;_ADJUSTED contains the adjusted values derived from the original values of the parameter.&lt;X&gt; : this field is specified in the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).&lt;PARAM&gt;_ADJUSTED is mandatory. When no adjustment is performed, the FillValue is inserted.\n\n\n&lt;PARAM&gt;_ADJUSTED_QC\nchar &lt;PARAM&gt;_ADJUSTED_QC(N_PROF, N_LEVELS);&lt;PARAM&gt;_ADJUSTED_QC:long_name = “quality flag”;&lt;PARAM&gt;_ADJUSTED_QC:conventions = “Argo reference table 2”;&lt;PARAM&gt;_ADJUSTED_QC:_FillValue = ” “;\nQuality flag applied on each &lt;PARAM&gt;_ADJUSTED value.The flag scale is specified in reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).&lt;PARAM&gt;_ADJUSTED_QC is mandatory.When no adjustment is performed, the FillValue is inserted.\n\n\n&lt;PARAM&gt;_ADJUSTED_ERROR\nfloat &lt;PARAM&gt;_ADJUSTED_ERROR(N_PROF, N_LEVELS);&lt;PARAM&gt;_ADJUSTED_ERROR:long_name = “Contains the error on the adjusted values as determined by the delayed mode QC process”;&lt;PARAM&gt;_ADJUSTED_ERROR:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED_ERROR:units = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:resolution= &lt;X&gt;;\n&lt;PARAM&gt;_ADJUSTED_ERROR Contains the error on the adjusted values as determined by the delayed mode QC process.&lt;X&gt; : this field is specified in the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).&lt;PARAM&gt;_ADJUSTED_ERROR is mandatory.When no adjustment is performed, the FillValue is inserted.\n\n\n\n\n3.2.5.1 Note on vertical axis associated to PRES\nThe variable PRES (pressure) is the vertical axis. The PRES declaration contains the variable attribute PRES:axis = “Z”;\n\n\n\n\n\n\nParameter definition: TEMP, TEMP_ADJUSTED\n\n\n\n\nfloat TEMP(N_PROF, N_LEVELS);TEMP:long_name = “sea temperature in-situ ITS-90 scale”;TEMP:standard_name = “sea_water_temperature”;TEMP:_FillValue = 99999.f;TEMP:units = “degree_Celsius”;TEMP:valid_min = -2.f;TEMP:valid_max = 40.f;TEMP:C_format = “%9.3f”;TEMP:FORTRAN_format = “F9.3”;TEMP:resolution = 0.001f;char TEMP_QC(N_PROF, N_LEVELS);TEMP_QC:long_name = “quality flag”;TEMP_QC:conventions = “Argo reference table 2”;TEMP_QC:_FillValue = ” “;float TEMP_ADJUSTED(N_PROF, N_LEVELS);TEMP_ADJUSTED:long_name =”adjusted sea temperature in-situ ITS-90 scale”;TEMP:standard_name = “sea_water_temperature”;TEMP_ADJUSTED:_FillValue = 99999.f;TEMP_ADJUSTED:units = “degree_Celsius”;TEMP_ADJUSTED:valid_min = -2.f;TEMP_ADJUSTED:valid_max = 40.f;TEMP_ADJUSTED:C_format = “%9.3f”;TEMP_ADJUSTED:FORTRAN_format= “F9.3”;TEMP_ADJUSTED:resolution= 0.001f;char TEMP_ADJUSTED_QC(N_PROF, N_LEVELS);TEMP_ADJUSTED QC:long_name = “quality flag”;TEMP_ADJUSTED QC:conventions = “Argo reference table 2”;TEMP_ADJUSTED_QC:_FillValue = ” “;float TEMP_ADJUSTED_ERROR(N_PROF, N_LEVELS);TEMP_ADJUSTED_ERROR:long_name =”error on sea temperature in-situ ITS-90 scale “;TEMP_ADJUSTED_ERROR:_FillValue = 99999.f;TEMP_ADJUSTED_ERROR:units =”degree_Celsius”;TEMP_ADJUSTED_ERROR :C_format = “%9.3f”;TEMP_ADJUSTED_ERROR :FORTRAN_format= “F9.3”;TEMP_ADJUSTED_ERROR:resolution= 0.001f;\n\n\n\n\n\n3.2.5.2 How to report unusual parameter resolutions in a profile\nThe resolution of a parameter is reported in “resolution” attribute. For specific floats, the resolution of a parameter may depend on the profile level. How to keep the information in the file? add a “comment_on_resolution” attribute on the variable to inform the user\n\n\n\n3.2.6 Calibration information for each profile\nCalibrations are applied to parameters to create adjusted parameters. Different calibration methods will be used by groups processing Argo data. When a method is applied, its description is stored in the following fields. This section contains calibration information for each parameter of each profile. Each item of this section has a N_PROF (number of profiles), N_CALIB (number of calibrations), N_PARAM (number of parameters) dimension. If no calibration is available, N_CALIB is set to 1, PARAMETER is filled with the list of parameter names, and all values of the calibration section are set to fill values.\nName | Definition | Comment |\nPARAMETER | char PARAMETER(N_PROF, N_CALIB, N_PARAM, STRING16);PARAMETER:long_name = “List of parameters with calibration information”;PARAMETER:conventions = “Argo reference table 3”;PARAMETER:_FillValue = ” “; | Name of the calibrated parameter. The list of parameters is  in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).Example : PSAL |\nSCIENTIFIC_CALIB_EQUATION | char SCIENTIFIC_CALIB_EQUATION(N_PROF, N_CALIB, N_PARAM, STRING256);SCIENTIFIC_CALIB_EQUATION:long_name = “Calibration equation for this parameter”;SCIENTIFIC_CALIB_EQUATION:_FillValue = ” “; | Calibration equation applied to the parameter. Example :Tc = a1 * T + a0 |\nSCIENTIFIC_CALIB_COEFFICIENT | char SCIENTIFIC_CALIB_COEFFICIENT(N_PROF, N_CALIB, N_PARAM, STRING256);SCIENTIFIC_CALIB_COEFFICIENT:long_name = “Calibration coefficients for this equation”;SCIENTIFIC_CALIB_COEFFICIENT:_FillValue = ” “; | Calibration coefficients for this equation.Example :a1=0.99997 , a0=0.0021 |\nSCIENTIFIC_CALIB_COMMENT | char SCIENTIFIC_CALIB_COMMENT(N_PROF, N_CALIB, N_PARAM, STRING256);SCIENTIFIC_CALIB_COMMENT:long_name = “Comment applying to this parameter calibration”;SCIENTIFIC_CALIB_COMMENT:_FillValue = ” “; | Comment about this calibrationExample :The sensor is not stable |\nSCIENTIFIC_CALIB_DATE | char SCIENTIFIC_CALIB_DATE (N_PROF N_CALIB, N_PARAM, DATE_TIME)SCIENTIFIC_CALIB_DATE:long_name = “Date of calibration”;SCIENTIFIC_CALIB_DATE:conventions = “YYYYMMDDHHMISS”;SCIENTIFIC_CALIB_DATE:_FillValue = ” “; | Date of the calibration.Example : 20011217161700 |\n\n\n3.2.7 History information for each profile\nThis section contains history information for each action performed on each profile by a data centre. \nEach item of this section has a N_HISTORY (number of history records), N_PROF (number of profiles) dimension.\nA history record is created whenever an action is performed on a profile.\nThe recorded actions are coded and described in the history code table from the reference table 7 (https://vocab.nerc.ac.uk/collection/R07/).\nOn the GDAC,the history section of the multi-cycle files is empty to reduce the size of the file. The history section is available in the single-cycle files\n\n\n\nName\nDefinition\nComment\n\n\n\n\nHISTORY_INSTITUTION\nchar HISTORY_INSTITUTION(N_HISTORY, N_PROF, STRING4);HISTORY_INSTITUTION:long_name = “Institution which performed action”;HISTORY_INSTITUTION:conventions = “Argo reference table 4”;HISTORY_INSTITUTION:_FillValue = ” “;\nInstitution that performed the action.Institution codes are described in reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example : ME for MEDS\n\n\nHISTORY_STEP\nchar HISTORY_STEP(N_HISTORY, N_PROF, STRING4);HISTORY_STEP:long_name = “Step in data processing”;HISTORY_STEP:conventions = “Argo reference table 12”;HISTORY_STEP:_FillValue = ” “;\nCode of the step in data processing for this history record. The step codes are described in reference table 12 (https://vocab.nerc.ac.uk/collection/R12/).Example : ARGQ : Automatic QC of data reported in real-time has been performed\n\n\nHISTORY_SOFTWARE\nchar HISTORY_SOFTWARE (N_HISTORY, N_PROF, STRING4);HISTORY_SOFTWARE:long_name = “Name of software which performed action”;HISTORY_SOFTWARE:conventions = “Institution dependent”;HISTORY_SOFTWARE:_FillValue = ” “;\nName of the software that performed the action.This code is institution dependent.Example : WJO\n\n\nHISTORY_SOFTWARE_RELEASE\nchar HISTORY_SOFTWARE_RELEASE(N_HISTORY, N_PROF, STRING4);HISTORY_SOFTWARE_RELEASE:long_name = “Version/release of software which performed action”;HISTORY_SOFTWARE_RELEASE:conventions = “Institution dependent”;HISTORY_SOFTWARE_RELEASE:_FillValue = ” “;\nVersion of the software.This name is institution dependent.Example : «1.0»\n\n\nHISTORY_REFERENCE\nchar HISTORY_REFERENCE (N_HISTORY, N_PROF, STRING64);HISTORY_REFERENCE:long_name = “Reference of database”;HISTORY_REFERENCE:conventions = “Institution dependent”;HISTORY_REFERENCE:_FillValue = ” “;\nCode of the reference database used for quality control in conjunction with the software.This code is institution dependent.Example : WOD2001\n\n\nHISTORY_DATE\nchar HISTORY_DATE(N_HISTORY, N_PROF, DATE_TIME);HISTORY_DATE:long_name = “Date the history record was created”;HISTORY_DATE:conventions = “YYYYMMDDHHMISS”;HISTORY_DATE:_FillValue = ” “;\nDate of the action.Example : 20011217160057\n\n\nHISTORY_ACTION\nchar HISTORY_ACTION(N_HISTORY, N_PROF, STRING4);HISTORY_ACTION:long_name = “Action performed on data”;HISTORY_ACTION:conventions = “Argo reference table 7”;HISTORY_ACTION:_FillValue = ” “;\nName of the action.The action codes are described in reference table 7 (https://vocab.nerc.ac.uk/collection/R07/).Example : QCF$ for QC failed\n\n\nHISTORY_PARAMETER\nchar HISTORY_PARAMETER(N_HISTORY, N_PROF, STRING16);HISTORY_PARAMETER:long_name = “Station parameter action is performed on”;HISTORY_PARAMETER:conventions = “Argo reference table 3”;HISTORY_PARAMETER:_FillValue = ” “;\nName of the parameter on which the action is performed.The parameters are described in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).Example : PSAL\n\n\nHISTORY_START_PRES\nfloat HISTORY_START_PRES(N_HISTORY, N_PROF);HISTORY_START_PRES:long_name = “Start pressure action applied on”;HISTORY_START_PRES:_FillValue = 99999.f;HISTORY_START_PRES:units = “decibar”;\nStart pressure the action is applied to.Example : 1500.0\n\n\nHISTORY_STOP_PRES\nfloat HISTORY_STOP_PRES(N_HISTORY, N_PROF);HISTORY_STOP_PRES:long_name = “Stop pressure action applied on”;HISTORY_STOP_PRES:_FillValue = 99999.f;HISTORY_STOP_PRES:units = “decibar”;\nStop pressure the action is applied to.This should be greater than or equal to  START_PRES.Example : 1757.0\n\n\nHISTORY_PREVIOUS_VALUE\nfloat HISTORY_PREVIOUS_VALUE(N_HISTORY, N_PROF);HISTORY_PREVIOUS_VALUE:long_name = “Parameter/Flag previous value before action”;HISTORY_PREVIOUS_VALUE:_FillValue = 99999.f;\nParameter or flag of the previous value before action.Example : 2 (probably good) for a flag that was changed to 1 (good)\n\n\nHISTORY_QCTEST\nchar HISTORY_QCTEST(N_HISTORY, N_PROF, STRING16);HISTORY_QCTEST:long_name = “Documentation of tests performed, tests failed (in hex form)”;HISTORY_QCTEST:conventions = “Write tests performed when ACTION=QCP\\(;&lt;br&gt; tests failed when ACTION=QCF\\)”;HISTORY_QCTEST:_FillValue = ” “;\nThis field records the tests performed when ACTION is set to QCP$ (QC performed), the test failed when ACTION is set to QCF$ (QC failed).The QCTEST codes are described in reference table 11 (https://vocab.nerc.ac.uk/collection/R11/).Example : 0A (in hexadecimal form)\n\n\n\nThe usage of the History section is described in §5 “Using the History section of the Argo netCDF Structure”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#argo-trajectory-format-version-3.2",
    "href": "chapter2.html#argo-trajectory-format-version-3.2",
    "title": "3  Formats description",
    "section": "3.3 Argo trajectory format version 3.2",
    "text": "3.3 Argo trajectory format version 3.2\nArgo trajectory files contain all received Argos and GPS locations of Argo floats. The trajectory file also contains cycle timing information important for making velocity calculations. These times may come directly from the float in real time, from calculations based on float information in real time, from the satellite system in real time, or from estimations done in delayed mode.\nIn addition to locations and cycle timing information, a trajectory file often contains measurements such as pressure, temperature, salinity or conductivity performed at various intermediate times during the cycle. The full pressure, temperature and salinity profile collected upon ascent is not included in the trajectory file. This is stored in the profile file.\nAn Argo trajectory file contains the CTD and BGC sensor parameters that are measured outside the vertical profiles.\nThere may be two Argo trajectory files at one time for a float - a real time trajectory file (“R”) and a delayed mode trajectory file (“D”). For naming conventions, see §4.1.3. The real time trajectory file will contain all the data obtained in real time for all the cycles the float has performed. The “R” file will exist until the float dies and DMQC is finalized. A delayed mode trajectory file exists for the entire float lifetime. \nThe delayed mode trajectory file will contain both real time and delayed mode data. The delayed mode data will be the highest quality data available for each cycle that has been delayed mode quality controlled. However, delayed mode quality control may not be performed on all the float’s cycles. In this case, the “D” file will contain both the real time and delayed mode data only for the cycles for which delayed mode quality control has been performed. Therefore, if both an “R” and “D” trajectory file exist, to obtain the best quality data for the entire float record, it might be necessary to look at the “D” file for the cycles that have been delayed mode quality controlled and then in the “R” file for the rest of the cycles which have not yet been delayed mode quality controlled. Once a float dies and the entire float record has been quality controlled, the “D” file will be the only file available on the GDAC and will contain both adjusted and not adjusted data. \nThe trajectory file contains two groups of data variables. In this document the groups are differentiated by their dimension. \nThe variable group described in §2.3.5 which includes the locations, cycle timing information, and measurements from the float is N_MEASUREMENT long. It includes all the data from the float. If filled, the best timing information is kept in the JULD_ADJUSTED variable. If this is filled in real time, that means either clock drift has been determined and adjustment has been applied (inclusive of adjustment of zero) or another timing estimate has been done based on typical float behavior. Simultaneously, the DATA_MODE should be marked as “A” indicating an adjusted float, and the CLOCK_OFFSET variable should be appropriately filled. \nThe variable group described in §2.3.6 which includes the cycle timing information and other cycle descriptive variables is N_CYCLE long. The cycle timing information is a subset of the information found in the N_MEASUREMENT array. This array includes the best timing information which matches the JULD_ADJUSTED times if filled, else JULD times from the N_MEASUREMENT array., The times can be corrected for float clock drift or estimated. The JULD_*_STATUS variables provide information on the state of the timing information. The N_CYCLE array also includes several variables that pertain only to the entire cycle such as GROUNDED, CONFIG_MISSION_NUMBER, etc.\nIn the N_MEASUREMENT group, the MEASUREMENT_CODE variable must be correctly understood. This variable is designed to indicate where in the cycle the location, times and important float timing events. The Measurement Code Table (Reference Table 15 - https://vocab.nerc.ac.uk/collection/R15/) contains all the flags and their meanings for the MEASUREMENT_CODE variable. This table is comprised of two parts - a) Absolute codes: measurement code (MC) values can be primary (mandatory) or secondary (highly desirable), and b) Relative codes: measurement code values are relative to an absolute code and are further divided into two parts: generic codes that can be used by a wide variety of floats and specific codes that are directly important to a specific float/measurement. \nAll Primary and Secondary MC events that are experienced by the float are required to be present in the N_MEASUREMENT array and redundantly in the N_CYCLE variables. Secondary codes are codes that not as crucial as the primary codes, but it is still recommended they be filled. All other codes are voluntary.  Please note the term ‘experienced by the float’. It is not necessary, nor best practice, to include measurement codes including primary or secondary codes, if the float is not programmed to activate an action described by the measurement code.  For example a float alternates cycle missions.  In even cycles n, the float does not enter a drift phase, but instead rises directly back to the surface after falling to depth.  In odd cycles n+1, the float enters a drift phase.  In the N_MEASUREMENT array the even cycles n would not include measurement codes indicative of drift, such as MC250 or MC300.  But these codes would be included in odd cycles n+1.\nIf the float experiences an event but the time is not able to be determined, then most JULD variables are set to fill value and a *_STATUS = ‘9’ is used in both the N_MEASUREMENT and N_CYCLE arrays. This indicates that it might be possible to estimate the timing of the event in the future and acts as a placeholder.\n If a float does not experience an event, then the fill values are used for all N_CYCLE variables. These non-events do not get a placeholder in the N_MEASUREMENT arrays as described above. \nFor file naming conventions, see §4.1.3.\n\n3.3.1 Global attributes\nThe global attributes section is used for data discovery. It complies with NetCDF Climate and Forecast (CF) Metadata Conventions (version 1.6).\n\nhttps://cfconventions.org/ \n\nThe following global attributes should appear in the global section:  \n// global attributes: :title = “Argo float trajectory file”; :institution = “CORIOLIS”;  :source = “Argo float”;  :history = “2011-04-22T06:00:00Z creation”; :references = “http://www.argodatamgt.org/Documentation”; :comment = “free text”; :user_manual_version = “3.4”; :Conventions = “Argo-3.2 CF-1.6”; :featureType = “trajectory”; :comment_on_resolution = “PRES variable resolution depends on measurement code”;_\n\n\n\n\n\n\n\nGlobal attribute name\nDefinition\n\n\n\n\ntitle\nA succinct description of what is in the dataset.\n\n\ninstitution\nSpecifies where the original data was produced.\n\n\nsource\nThe method of production of the original data. If it was model-generated, source should name the model and its version, as specifically as could be useful. If it is observational, source should characterize it (e.g., “surface observation” or “radiosonde”).\n\n\nhistory\nProvides an audit trail for modifications to the original data. Well-behaved generic NetCDF filters will automatically append their name and the parameters with which they were invoked to the global history attribute of an input NetCDF file. We recommend that each line begin with a timestamp indicating the date and time of day that the program was executed.\n\n\nreferences\nPublished or web-based references that describe the data or methods used to produce it.\n\n\ncomment\nMiscellaneous information about the data or methods used to produce it.\n\n\nuser_manual_version\nThe version number of the user manual\n\n\nConventions\nThe conventions supported by this file, blank separated\n\n\nfeatureType\nThe NetCDF CF feature type.\n\n\ncomment_on_resolution\nOptional comment on parameter resolution\n\n\n\n\n\n3.3.2 Dimensions and definitions\n\n\n\n\n\n\n\n\nName\nDefinition\nComment\n\n\n\n\nDATE_TIME\nDATE_TIME = 14;\nThis dimension is the length of an ASCII date and time value.Date_time convention is : YYYYMMDDHHMISSYYYY : yearMM : monthDD : dayHH : hour of the dayMI : minutesSS : secondsDate and time values are either in Universal Time (UTC) or float’s time.Examples : 20010105172834 : January 5th 2001 17:28:3419971217000000 : December 17th 1997 00:00:00\n\n\nSTRING256STRING64STRING32STRING16STRING8STRING4STRING2\nSTRING256 = 256;STRING64 = 64;STRING32 = 32;STRING16 = 16;STRING8 =   8;STRING4 =   4;STRING2 =   2;\nString dimensions from 2 to 256.\n\n\nN_PARAM\nN_PARAM = &lt;int value&gt;;\nMaximum number of parameters measured or calculated for a pressure sample.Examples :(pressure, temperature) : N_PARAM = 2(pressure, temperature, salinity) : N_PARAM = 3(pressure, temperature, conductivity, salinity) : N_PARAM = 4\n\n\nN_MEASUREMENT\nN_MEASUREMENT = unlimited;\nThis dimension is the number of recorded locations, cycle timings and measurements of the file.\n\n\nN_CYCLE\nN_CYCLE = &lt;int value&gt;;\nNumber of collected float cycles.  If all the cycles have been collected (i.e. if there are no missing cycles), it is the number of cycles performed by the float.  In this particular case, as some floats begin cycle numbering at 0, others at 1, in the former, N_CYCLE = max(CYCLE_NUMBER) +1.  In the latter, N_CYCLE = max(CYCLE_NUMBER)Example : N_CYCLE = 100\n\n\nN_HISTORY\nN_HISTORY = &lt;int value&gt;;\nMaximum number of history records for a location. This dimension depends on the data setExample : N_HISTORY = 10\n\n\nN_VALUESxx\nN_VALUESxx = &lt;int value&gt;;\nMaximum number of parameter measurements sampled at a given pressure level. This dimension depends on the data set. Example: N_VALUES41 = 41.\n\n\nN_CALIB_PARAM\nN_CALIB_PARAM = &lt;int value&gt;;\nMaximum number of calibrations performed on a float to fill the parameter adjusted fields. This dimension depends on the data set. Example: N_CALIB_PARAM = 3.\n\n\nN_CALIB_JULD\nN_CALIB_JULD = &lt;int value&gt;;\nMaximum number of calibrations performed on a float to fill the JULD adjusted fields. This dimension depends on the data set. Example: N_CALIB_JULD = 3.\n\n\n\n\n\n3.3.3 General information on the trajectory file\nThis section contains information about the whole file.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nDATA_TYPE\nchar DATA_TYPE(STRING16); DATA_TYPE:long_name = “Data type”;DATA_TYPE:conventions = “Argo reference table 1”;DATA_TYPE:_FillValue = ” “;\nThis field contains the type of data contained in the file.The list of acceptable data types is in the reference table 1 (https://vocab.nerc.ac.uk/collection/R01/).Example : Argo trajectory \n\n\nFORMAT_VERSION\nchar FORMAT_VERSION(STRING4);FORMAT_VERSION:long_name = “File format version”;FORMAT_VERSION:_FillValue = ” “;\nFile format versionExample : “3.2”\n\n\nHANDBOOK_VERSION\nchar HANDBOOK_VERSION(STRING4);HANDBOOK_VERSION:long_name = “Data handbook version”;HANDBOOK_VERSION:_FillValue = ” “;\nVersion number of the data handbook.This field indicates that the data contained in this file are managed according to the policy described in the Argo data management handbook.Example : “1.2”\n\n\nREFERENCE_DATE_TIME\nchar REFERENCE_DATE_TIME(DATE_TIME);REFERENCE_DATE_TIME:long_name = “Date of reference for Julian days”;REFERENCE_DATE_TIME:conventions = “YYYYMMDDHHMISS”;REFERENCE_DATE_TIME:_FillValue = ” “;\nDate of reference for Julian days.The recommended reference date time is”19500101000000” : January 1st 1950 00:00:00\n\n\nDATE_CREATION\nchar DATE_CREATION(DATE_TIME);DATE_CREATION:long_name = “Date of file creation”;DATE_CREATION:conventions = “YYYYMMDDHHMISS”;DATE_CREATION:_FillValue = ” “;\nDate and time (UTC) of creation of this file.Format : YYYYMMDDHHMISSExample :20011229161700 : December 29th 2001 16 :17 :00 \n\n\nDATE_UPDATE\nchar DATE_UPDATE(DATE_TIME);DATE_UPDATE:long_name = “Date of update of this file”;DATE_UPDATE:conventions = “YYYYMMDDHHMISS”;DATE_UPDATE:_FillValue = ” “;\nDate and time (UTC) of update of this file.Format : YYYYMMDDHHMISSExample :20011230090500 : December 30th 2001 09 :05 :00\n\n\n\n\n\n3.3.4 General information on the float\nThis section contains general information on the float.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nPLATFORM_NUMBER\nchar PLATFORM_NUMBER(STRING8);PLATFORM_NUMBER:long_name = “Float unique identifier”;PLATFORM_NUMBER:conventions = “WMO float identifier : A9IIIII”;PLATFORM_NUMBER:_FillValue = ” “;\nWMO float identifier.WMO is the World Meteorological Organization.This platform number is unique.Example : “6900045”\n\n\nPROJECT_NAME\nchar PROJECT_NAME(STRING64);PROJECT_NAME:long_name = “Name of the project”;PROJECT_NAME:_FillValue = ” “;\nName of the project that operates the float.Multiple projects can be separated by commas.Example: “GYROSCOPE, GMMC”\n\n\nPI_NAME\nchar PI_NAME (STRING64);PI_NAME:long_name = “Name of the principal investigator”;PI_NAME:_FillValue = ” “;\nName of the principal investigator responsible for the profiling float. Example: “Julia UITZ”.Valid PI names are listed in reference table R40: https://vocab.nerc.ac.uk/collection/R40/ Multiple names can be concatenated, separated by commas.\n\n\nTRAJECTORY_PARAMETERS\nchar TRAJECTORY_PARAMETERS(N_PARAM, STRING64);TRAJECTORY_PARAMETERS:long_name = “List of available parameters”;TRAJECTORY_PARAMETERS:conventions = “Argo reference table 3”;TRAJECTORY_PARAMETERS:_FillValue = ” “;\nList of parameters contained in this trajectory file.The parameter names are listed in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).Examples : “PRES”,” TEMP”, “PSAL”, “CNDC”, “DOXY”, etc”PRES”:  pressure”TEMP” : temperature”PSAL” : practical salinity”CNDC” :electrical conductivity”DOXY” : dissolved oxygen\n\n\nDATA_CENTRE\nchar DATA_CENTRE(STRING2);DATA_CENTRE:long_name = “Data centre in charge of float data processing”;DATA_CENTRE:conventions = “Argo reference table 4”;DATA_CENTRE:_FillValue = ” “;\nCode for the data centre in charge of the float data management.The data centre codes are described in the reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example : “ME” for MEDS\n\n\nDATA_STATE_INDICATOR\nchar DATA_STATE_INDICATOR(STRING4);DATA_STATE_INDICATOR:long_name = “Degree of processing the data have passed through”;DATA_STATE_INDICATOR:conventions = “Argo reference table 6”;DATA_STATE_INDICATOR:_FillValue = ” “;\nDegree of processing the data has passed through.The data state indicator is described in the reference table 6 (https://vocab.nerc.ac.uk/collection/R06/).\n\n\nPLATFORM_TYPE\nchar PLATFORM_TYPE(STRING32);PLATFORM_TYPE:long_name = “Type of float”;PLATFORM_TYPE:conventions = “Argo reference table 23”;PLATFORM_TYPE:_FillValue = ” “;\nType of float listed in reference table 23 (https://vocab.nerc.ac.uk/collection/R23/). Example: SOLO, APEX, PROVOR, ARVOR, NINJA.\n\n\nFLOAT_SERIAL_NO\nchar FLOAT_SERIAL_NO(STRING32);FLOAT_SERIAL_NO:long_name = “Serial number of the float”;FLOAT_SERIAL_NO:_FillValue = ” “;\nThis field should contain only the serial number of the float.Example : 1679\n\n\nFIRMWARE_VERSION\nchar FIRMWARE_VERSION(STRING64);FIRMWARE_VERSION:long_name = “Instrument firmware version”;FIRMWARE_VERSION:_FillValue = ” “;\nFirmware version of the float.Example :“013108”The dimension STRING32 instead of STRING64 remains accepted.\n\n\nWMO_INST_TYPE\nchar WMO_INST_TYPE(STRING4);WMO_INST_TYPE:long_name = “Coded instrument type”;WMO_INST_TYPE:conventions = “Argo reference table 8”;WMO_INST_TYPE:_FillValue = ” “;\nInstrument type from WMO code table 1770.A subset of WMO table 1770 is documented in the reference table 8 (https://vocab.nerc.ac.uk/collection/R08/).Example : 831\n\n\nPOSITIONING_SYSTEM\nchar POSITIONING_SYSTEM(STRING8);POSITIONING_SYSTEM:long_name = “Positioning system”;POSITIONING_SYSTEM:_FillValue = ” “;\nName of the system used to derive the float locations, see reference table 9 (https://vocab.nerc.ac.uk/collection/R09/).Example : ARGOS\n\n\n\n\n\n3.3.5 N_MEASUREMENT dimension variable group\nThis section describes the variables found in the N_MEASUREMENT dimension variable group. In this variable group you find the unadjusted data as reported by the float, adjusted timing, the reported locations, as well as measurements performed along the surface and subsurface trajectory. \nN_MEASUREMENT is the number of locations, cycle timings, and measurements received or estimated from information sent by the float. If a cycle is missed, nothing is entered into the N_MEASUREMENT array - e.g. no fill values are allowed to indicate a missing cycle.\nThe N_MEASURMENT array should be arranged first by CYCLE_NUMBER and then by the order the events for that cycle occurred.  Some data within the netCDF may not have a time attached to it, but it should still be placed as close as possible to its origination time.  Because the order of the N_MEASUREMENT array is based on time,  MEASUREMENT_CODE will not be ascending for every cycle, but JULD is usually ascending (unless a clock offset has been applied and then the JULD variable may have an inversion) and JULD_ADJUSTED is always ascending. To construct the trajectory netCDF a full understanding of when the float data was gathered within the cycle is necessary.\nJULD contains the raw timing values either from the satellite system or from the float. The values in JULD cannot be estimated, nor altered such as for clock drift.\nJULD_ADJUSTED contains the best estimate of float timing available for this float. If necessary, it contains adjusted timing variables due to clock drift. The times can be adjusted either in real time or in delayed mode due to clock drift or estimation of times based on float behavior by a float expert. The JULD_ADJUSTED_STATUS variable indicates how the JULD_ADJUSTED value  is filled and indicates whether the time is estimated or measured. The JULD_ADJUSTED_QC contains the QC flags for the adjusted times. This may lead to times where JULD_ADJUSTED is filled, but JULD contains ‘FillValue’. That is because the time is estimated rather than measured.\nIn R-mode, no times are adjusted, but times may be estimated and placed within JULD_ADJUSTED with the JULD_ADJUSTED_STATUS flag set to ‘1’ indicating an estimated value.  Non-adjusted times do not need to be carried down to the JULD_ADJUSTED array, so this array may be sparse or even empty. No estimated times are allowed in the JULD variable.\nIn A-mode, adjustments are made, typically to PSAL and PRES, but others may be adjusted as well such as JULD if real-time correction of clock drift is applied.  If an adjustment is made, all values must be carried down to the ADJUSTED variables with the appropriate adjustment applied.  Real time estimates will also be present in ‘A’ files.  Non-zero adjustments will need to be applied to any present estimates.\nIn D-mode, all adjustments and estimations are complete.  Similar to the ‘A’ file, there must be correspondence between the ADJUSTED and non-ADJUSTED fields.  This means that all values must be carried down to the ADJUSTED field. ADJUSTED variables may have a value while the corresponding non-ADJUSTED variable is ‘FillValue’ due to the presence of an estimated value.  The opposite is not allowed.  There cannot be a non-ADJUSTED value and ‘FillValue’ in the corresponding ADJUSTED variable.\nCYCLE_NUMBER contains the cycle number of the cycle that is assigned in real time. This cycle number must match the profile cycle number, which is the number recorded in the CYCLE_NUMBER(N_PROF) variable in profile files.\nCYCLE_NUMBER_INDEX indicates which cycle number information is contained in that index of the N_CYCLE array. For example, CYCLE_NUMBER_INDEX(4)=3 means the 4th element of all 34 N_CYCLE variables is associated with the WMO_003.nc profile file. This might happen if the float’s first cycle has a cycle number of zero rather than one. Additionally, all the elements of the N_MEASUREMENT variables for which CYCLE_NUMBER = 3 are likewise associated with the 4th N_CYCLE elements and with the WMO_003.nc profile file. This clearly links the index in the N_CYCLE array to the cycle number in the N_MEASUREMENT array. \nAdditionally, CYCLE_NUMBER = -1 indicates the float’s launch and the JULD and LATITUDE and LONGITUDE variables should contain the float’s launch time and location. \nCYCLE_NUMBER_ADJUSTED contains a cycle numbering which has been assessed and adjusted to be correct, especially for the purposes of trajectory calculations. If a cycle is recovered during delayed mode and no profile file is created, the cycle must be added into the CYCLE_NUMBER_ADJUSTED and CYCLE_NUMBER_ADJUSTED_INDEX variables. Two examples of recovered cycles are below. \nThe first example is where cycle number 5 is recovered in delayed mode. The cycle number variables must be rewritten as follows:\nCYCLE_NUMBER 1, 2, 3, 4, _, 6, 7, 8, 9, 10, 11,…,\nCYCLE_NUMBER_INDEX 1, 2, 3, 4, _, 6, 7, 8, 9, 10, 11,…,\nCYCLE_NUMBER_ADJUSTED 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, _\n CYCLE_NUMBER_ADJUSTED_INDEX 1, 2, 3, 4, 5, 6, 7, 8 9, 10, _ \nHere, FillValue is added to CYCLE_NUMBER and CYCLE_NUMBER_INDEX to indicate that no profile file exists with cycle number 5.\nA second example of an error that might be discovered in cycle number in delayed mode involves floats that do not send cycle number and for which cycle number must be calculated. Here, cycle number 5 was incorrectly skipped in real time and is introduced in delayed mode: \nCYCLE_NUMBER 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12,…\nCYCLE_NUMBER_INDEX 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12,…\nCYCLE_NUMBER_ADJUSTED 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, _, _\nCYCLE_NUMBER_ADJUSTED_INDEX 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, _, _ \nHere, CYCLE_NUMBER = 6 which was assigned in real time, should actually be assigned cycle number = 5 as reflected by the CYCLE_NUMBER_ADJUSTED variable. \nCYCLE_NUMBER always corresponds to the profile cycle number. To look for the cycle that matches the profile cycle number, users must look in the CYCLE_NUMBER variable for the cycle number they are interested in. If the CYCLE_NUMBER_ADJUSTED variable is ‘FillValue’, then this cycle is in real time mode and no corrected cycle number exists. If the CYCLE_NUMBER_ADJUSTED variable is filled, this is the correct cycle number as determined during delayed mode. For the previous example, profile cycle number 6 corresponds to CYCLE_NUMBER = 6 and CYCLE_NUMBER_ADJUSTED = 5.\n&lt;PARAM&gt; contains the uncorrected real-time data transmitted by the floats. \nThe values in &lt;PARAM&gt; should never be altered.  &lt;PARAM&gt;_QC contains QC flags that pertain to the values in &lt;PARAM&gt;. Values in &lt;PARAM&gt;_QC are set initially in real time by the automatic real-time tests. \nThey are later modified in ‘D’ mode at levels where the QC flags are set incorrectly by the real-time procedures, and where erroneous data are not detected by the real-time procedures. \nEach parameter can be adjusted. In that case, &lt;PARAM&gt;_ADJUSTED contains the adjusted values, &lt;PARAM&gt;_ADJUSTED_QC contains the QC flags set by the delayed-mode process, and &lt;PARAM&gt;_ADJUSTED_ERROR contains the adjustment uncertainties. \nA file A-mode processing contains adjusted sections with fill values (&lt;PARAM&gt;_ADJUSTED, &lt;PARAM&gt;_ADJUSTED_QC and &lt;PARAM&gt;_ADJUSTED_ERROR). This is the same for all other ADJUSTED variables (e.g. JULD_ADJUSTED).\nWhen no parameter is measured along the trajectory, N_PARAM (number of parameters) and any fields relative to parameter are not in the file : &lt;PARAM&gt;, &lt;PARAM&gt;_QC, &lt;PARAM&gt;_ADJUSTED, &lt;PARAM&gt;_ADJUSTED_QC, &lt;PARAM&gt;_ADJUSTED_ERROR and TRAJECTORY_PARAMETERS.\nIridium and estimated positions:\nIridium-based or estimated positions are included if no GPS fix could be obtained that is considered good in real-time. POSITIONING_SYSTEM is used to indicate that multiple positioning systems are present in the trajectory file (see reference table 9 - https://vocab.nerc.ac.uk/collection/R09/). Used are “I” (for Iridium) or “U” (for estimated) in POSITION_ACCURACY (Table 5 - https://vocab.nerc.ac.uk/collection/R05/). If both AXES_ERROR_ELLIPSE_MAJOR and AXES_ERROR_ELLIPSE_MINOR values are the same AXES_ERROR_ELLIPSE_ANGLE is not needed (set to FillValue). \nRAFOS positions:\nA similar approach is used storing the error and indicating that the position comes from RAFOS estimates. POSITIONING_SYSTEM remains filled with the primary system, i.e. GPS or Argos rather than RAFOS.  POSITION_ACCURACY becomes ‘R’ and the MEASUREMENT_CODE for positions and associated times during drift is 275.\nDetails on how the RAFOS positions were derived can not be stored in the traj.nc file. These will be in a traj_aux file.\nName | definition | comment |\nJULD | double JULD(N_MEASUREMENT);JULD:long_name = “Julian day (UTC) of each measurement relative to REFERENCE_DATE_TIME”;JULD:standard_name = “time”;JULD:units = “days since 1950-01-01 00:00:00 UTC”;JULD:conventions = “Relative julian days with decimal part (as parts of day)”;JULD:resolution = X;JULD:_FillValue = 999999.;JULD:axis = “T”; | Julian day of the location (or measurement).The integer part represents the day, the decimal part represents the time of the measurement.Date and time are in universal time coordinates.The Julian day is relative to REFERENCE_DATE_TIME.Example :18833.8013889885 : July 25 2001 19:14:00 |\nJULD_STATUS | char JULD_STATUS(N_MEASUREMENT);JULD_STATUS:long_name=”Status of the date and time”JULD_STATUS:conventions = “Argo reference table 19”;JULD_STATUS:_FillValue = ” “; | Status flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:2 : Value is transmitted by the float  |\nJULD_QC | char JULD_QC(N_MEASUREMENT);JULD_QC:long_name = “Quality on date and time”;JULD_QC:conventions = “Argo reference table 2”;JULD_QC:_FillValue = ” “; | Quality flag on JULD date and time.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real-time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed-mode).Example :1: The date and time seem correct. |\nJULD_ADJUSTED | double JULD_ADJUSTED(N_MEASUREMENT);JULD_ADJUSTED:long_name = “Adjusted julian day (UTC) of each measurement relative to REFERENCE_DATE_TIME”;JULD_ADJUSTED:standard_name = “time”;JULD_ADJUSTED:units = “days since 1950-01-01 00:00:00 UTC”;JULD_ADJUSTED:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_ADJUSTED:resolution = X;JULD_ADJUSTED:_FillValue = 999999.;JULD:axis = “T”; | Adjusted Julian day of the location (or measurement).The integer part represents the day, the decimal part represents the time of the measurement.Date and time are in universal time coordinates.The Julian day is relative to REFERENCE_DATE_TIME.The date may be adjusted due to float clock drift or expert review.Example :18833.8013889885 : July 25 2001 19:14:00 |\nJULD_ADJUSTED_STATUS | char JULD_ADJUSTED_STATUS(N_MEASUREMENT);JULD_ADJUSTED_STATUS:long_name=”Status of the JULD_ADJUSTED date”JULD_ADJUSTED_STATUS:conventions = “Argo reference table 19”;JULD_ADJUSTED_STATUS:_FillValue = ” “; | Status flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:2 : Value is transmitted by the float |\nJULD_ADJUSTED_QC | char JULD_ADJUSTED_QC(N_MEASUREMENT);JULD_ADJUSTED_QC:long_name = “Quality on adjusted date and time”;JULD_ADJUSTED_QC:conventions = “Argo reference table 2”;JULD_ADJUSTED_QC:_FillValue = ” “; | Quality flag on JULD_ADJUSTED date and time.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real-time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed-mode).Example :1 : The date and time seem correct. |\nLATITUDE | double LATITUDE(N_MEASUREMENT);LATITUDE:long_name = “Latitude of each location”;LATITUDE:standard_name = “latitude”;LATITUDE:units = “degree_north”;LATITUDE:_FillValue = 99999.;LATITUDE:valid_min = -90.;LATITUDE:valid_max = 90.;LATITUDE:axis = “Y”; | Latitude of the location (or measurement).Unit : degree northExample : 44.4991 for 44° 29’ 56.76’’ N |\nLONGITUDE | double LONGITUDE(N_MEASUREMENT);LONGITUDE:long_name = “Longitude of each location”;LONGITUDE:standard_name = “longitude”;LONGITUDE:units = “degree_east”;LONGITUDE:_FillValue = 99999.;LONGITUDE:valid_min = -180.;LONGITUDE:valid_max = 180.;LONGITUDE:axis = “X”; | Longitude of the location (or measurement).Unit : degree eastExample : 16.7222 for 16° 43’ 19.92’’ E |\nPOSITION_ACCURACY | char POSITION_ACCURACY(N_MEASUREMENT);POSITION_ACCURACY:long_name = “Estimated accuracy in latitude and longitude”;POSITION_ACCURACY:conventions = “Argo reference table 5”;POSITION_ACCURACY:_FillValue = ” “; | Position accuracy received from the positioning system. The location classes from ARGOS are described in the reference table 5 (https://vocab.nerc.ac.uk/collection/R05/).A”G” indicates the GPS positioning system.Examples :  3 for a latitude and longitude accuracy &lt; 250 m.G for GPS accuracy |\nPOSITION_QC | char POSITION_QC(N_MEASUREMENT);POSITION_QC:long_name = “Quality on position”;POSITION_QC:conventions = “Argo reference table 2”;POSITION_QC:_FillValue = ” “; | Quality flag on position.The flag on position is set according to (LATITUDE, LONGITUDE, JULD) quality.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real-time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed-mode).Example : 1 : position seems correct. |\nCYCLE_NUMBER | int CYCLE_NUMBER(N_MEASUREMENT);CYCLE_NUMBER:long_name = “Float cycle number of the measurement”;CYCLE_NUMBER:conventions = “0…N, 0 : launch cycle, 1 : first complete cycle”;CYCLE_NUMBER:_FillValue = 99999; | Cycle number of the float for this series of measurements, locations and timings. Some floats begin with a cycle 0 and some begin at cycle number 1.  Cycle number is -1 for the float’s launch and includes the time and location.For one cycle number, there are usually several locations/measurements received.  This cycle number must match the profile cycle number.Example : 17 for measurements performed during the 17th cycle of the float. |\nCYCLE_NUMBER_ADJUSTED | int CYCLE_NUMBER_ADJUSTED (N_MEASUREMENT);CYCLE_NUMBER_ADJUSTED:long_name = “Adjusted float cycle number of the measurement”;CYCLE_NUMBER_ADJUSTED:conventions = “0…N, 0 : launch cycle, 1 : first complete cycle”;CYCLE_NUMBER_ADJUSTED:_FillValue = 99999; | Adjusted cycle number of the float for this series of measurements, locations and timings. Some floats begin with a cycle 0 and some begin at cycle number 1.  For one cycle number, there are usually several locations/measurements received.  Sometimes cycle numbers are assigned erroneously and need to be corrected.  This variable contains the corrected cycle numbers.Example : 17 for measurements performed during the 17th cycle of the float. |\nMEASUREMENT_CODE | int MEASUREMENT_CODE (N_MEASUREMENT);MEASUREMENT_CODE:long_name = “Flag referring to a measurement event in the cycle”;MEASUREMENT_CODE:conventions = “Argo reference table 15”;MEASUREMENT_CODE:_FillValue = 99999; | Flag for each event in the cycle which corresponds to Argo reference table 15 (https://vocab.nerc.ac.uk/collection/R15/).  Example:  100 : All measurements made at start of descent to drift pressure .  Could be time, location, surface pressure, etc.  |\n&lt;PARAM&gt; | float &lt;PARAM&gt;(N_MEASUREMENT);&lt;PARAM&gt;:long_name = “&lt;X&gt;”;&lt;PARAM&gt;:standard_name = “&lt;X&gt;”;&lt;PARAM&gt;:_FillValue = &lt;X&gt;;&lt;PARAM&gt;:units = “&lt;X&gt;”; &lt;PARAM&gt;:valid_min = &lt;X&gt;;&lt;PARAM&gt;:valid_max = &lt;X&gt;;&lt;PARAM&gt;:C_format = “&lt;X&gt;”;&lt;PARAM&gt;:FORTRAN_format = “&lt;X&gt;”; | &lt;PARAM&gt; contains the original values of a parameter listed in the “code” column of reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).&lt;X&gt; : these fields are specified in the columns of the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/). |\n&lt;PARAM&gt;_QC | char &lt;PARAM&gt;_QC(N_MEASUREMENT);&lt;PARAM&gt;_QC:long_name = “quality flag”;&lt;PARAM&gt;_QC:conventions = “Argo reference table 2”;&lt;PARAM&gt;_QC:_FillValue = ” “; | Quality flag applied on each &lt;PARAM&gt; value.The flag scale is specified in tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real-time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed-mode). |\n&lt;PARAM&gt;_ADJUSTED | float &lt;PARAM&gt;_ADJUSTED(N_MEASUREMENT);&lt;PARAM&gt;_ADJUSTED:long_name = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:standard_name = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:units = “&lt;X&gt;”; &lt;PARAM&gt;_ADJUSTED:valid_min = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:valid_max = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED:comment = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED:resolution= &lt;X&gt;; | &lt;PARAM&gt;_ADJUSTED contains the adjusted values derived from the original values of the parameter.&lt;X&gt; : these fields are specified in the columns of the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).When no adjustment is performed, the FillValue is inserted.&lt;PARAM&gt;_ADJUSTED is mandatory for core and bgc parameters, but not for intermediate parameters. |\n&lt;PARAM&gt;_ADJUSTED_QC | char &lt;PARAM&gt;_ADJUSTED_QC(N_MEASUREMENT);&lt;PARAM&gt;_ADJUSTED_QC:long_name = “quality flag”;&lt;PARAM&gt;_ADJUSTED_QC:conventions = “Argo reference table 2”;&lt;PARAM&gt;_ADJUSTED_QC:_FillValue = ” “; | Quality flag applied on each &lt;PARAM&gt;_ADJUSTED values.The flag scale is specified in reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real-time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed-mode).When no adjustment is performed, the FillValue is inserted.&lt;PARAM&gt;_ADJUSTED_QC is mandatory for core and bgc parameters, but not for intermediate parameters. |\n&lt;PARAM&gt;_ADJUSTED_ERROR | float &lt;PARAM&gt;_ADJUSTED_ERROR(N_MEASUREMENT);&lt;PARAM&gt;_ADJUSTED_ERROR:long_name = “Contains the error on the adjusted values as determined by the delayed mode QC process.”;&lt;PARAM&gt;_ADJUSTED_ERROR:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_ADJUSTED_ERROR:units = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_ADJUSTED_ERROR:resolution= &lt;X&gt;; | &lt;PARAM&gt;_ADJUSTED_ERROR contains the error on the adjusted values of the parameter.&lt;X&gt; : these fields are specified in the columns of the reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).When no adjustment is performed, the FillValue is inserted.&lt;PARAM&gt;_ADJUSTED_ERROR is mandatory for core and bgc parameters, but not for intermediate parameters. |\nAXES_ERROR_ELLIPSE_MAJOR | float AXES_ERROR_ELLIPSE_MAJOR(N_MEASUREMENT);AXES_ERROR_ELLIPSE_MAJOR.long_name = “Semi-major axis of error ellipse from positioning system”;AXES_ERROR_ELLIPSE_MAJOR:units = “meters”;AXES_ERROR_ELLIPSE_MAJOR:_FillValue = 99999.; | Semi-major axis of error ellipse reported by the positioning system. |\nAXES_ERROR_ELLIPSE_MINOR | float AXES_ERROR_ELLIPSE_MINOR(N_MEASUREMENT);AXES_ERROR_ELLIPSE_MINOR.long_name = “Semi-minor axis of error ellipse from positioning system”;AXES_ERROR_ELLIPSE_MINOR:units = “meters”;AXES_ERROR_ELLIPSE_MINOR:_FillValue = 99999.; | Semi-minor axis of error ellipse reported by the positioning system. |\nAXES_ERROR_ELLIPSE_ANGLE | float AXES_ERROR_ELLIPSE_ANGLE(N_MEASUREENT);AXES_ERROR_ELLIPSE_ANGLE.long_name = “Angle of error ellipse from positioning system”;AXES_ERROR_ELLIPSE_ANGLE:units = “Degrees (from North when heading East)”;AXES_ERROR_ELLIPSE_ANGLE:_FillValue = 99999.; | Angle of error ellipse reported by the positioning system. |\nSATELLITE_NAME | char SATELLITE_NAME(N_MEASUREMENT);SATELLITE_NAME.long_name = “Satellite name from positioning system”;SATELLITE_NAME.FillValue = ”  “; | Satellite name from positioning system.SATELLITE_NAME is only used for Argos position |\nTRAJECTORY_PARAMETER_DATA_MODE | char TRAJECTORY_PARAMETER_DATA_MODE(N_MEASUREMENT, N_PARAM);TRAJECTORY_PARAMETER_DATA_MODE:long_name = “Delayed mode or real time data”;TRAJECTORY_PARAMETER_DATA_MODE:conventions = “R : real time; D : delayed mode; A : real time with adjustment”;TRAJECTORY_PARAMETER_DATA_MODE:_FillValue = ” “; | Indicates the availability of adjustment of each TRAJECTORY_PARAMETERS. ‘R’ = no adjusted value is available. ‘A’ = real-time adjusted value is available. ‘D’ = delayed-mode adjusted value is available. |\nJULD_DATA_MODE | char JULD_DATA_MODE(N_MEASUREMENT);JULD_DATA_MODE:long_name = “Delayed mode or real time data”;JULD_DATA_MODE:conventions “R : real time; D : delayed mode; A : real time with adjustment”;JULD_DATA_MODE:-FillValue = ” “; | Indicates the availability of adjustment/estimation of the Julian day of the measurement, which is stored in JULD_ADJUSTED. The raw parameter JULD stores the original telemetered value, or FillValue (if not available). If JULD_DATA_MODE = ‘R’, JULD_ADJUSTED = FillValue. If JULD_DATA_MODE = ‘A’, JULD_ADJUSTED = real-time adjusted/estimated value. If JULD_DATA_MODE = ‘D’, JULD_ADJUSTED = delayed-mode adjusted/estimated value. |\n&lt;PARAM&gt;_MED | float &lt;PARAM&gt;_MED(N_MEASUREMENT);&lt;PARAM&gt;_MED:long_name = “Median value of the set of measurements used to compute &lt;PARAM&gt;(N_MEASUREMENT) averaged value”;&lt;PARAM&gt;_MED:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_MED:units = &lt;X&gt;;&lt;PARAM&gt;_MED:valid_min = &lt;X&gt;;&lt;PARAM&gt;_MED:valid_max = &lt;X&gt;;&lt;PARAM&gt;_MED:comment = “&lt;X&gt;”;&lt;PARAM&gt;_MED:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_MED:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_MED:resolution = &lt;X&gt;; | Optional variable used to store statistical information (median value) of the set of measurements used to compute the averaged values in &lt;PARAM&gt;. This statistical information is provided by some floats, e.g. PROVOR CTS4 and CTS5.&lt;PARAM&gt; and &lt;X&gt; are specified in Reference Table 3.N_MEASUREMENT is not replaced by its integer value. |\n&lt;PARAM&gt;_STD | float &lt;PARAM&gt;_STD(N_MEASUREMENT);&lt;PARAM&gt;_STD:long_name = “Standard deviation of the set of measurements used to compute &lt;PARAM&gt;(N_MEASUREMENT) averaged value”;&lt;PARAM&gt;_STD:_FillValue = &lt;X&gt;;&lt;PARAM&gt;_STD:units = &lt;X&gt;;&lt;PARAM&gt;_STD:comment = “&lt;X&gt;”;&lt;PARAM&gt;_STD:C_format = “&lt;X&gt;”;&lt;PARAM&gt;_STD:FORTRAN_format = “&lt;X&gt;”;&lt;PARAM&gt;_STD:resolution = &lt;X&gt;; | Optional variable used to store statistical information (standard deviation) of the set of measurements used to compute the averaged values in &lt;PARAM&gt;. This statistical information is provided by some floats, e.g. PROVOR CTS4 and CTS5.&lt;PARAM&gt; and &lt;X&gt; are specified in Reference Table 3.N_MEASUREMENT is not replaced by its integer value. |\n\n3.3.5.1 How to report unusual Pressure resolutions in the N_MEASUREMENT variable group of the TRAJ file\nIn the N_MEASUREMENT array of the TRAJ file, the pressure resolution may differ according to the MEASUREMENT_CODE.\nHow to keep the information in the file?\n\nadd a “comment_on_resolution” attribute to the variable to inform the user,\nadd a “comment_on_resolution” global attribute to the file\n\nFor example, for APEX and PROVOR floats some pressures are provided in bars whereas most of them are in dbar. Thus, in this case:\n\nPRES:resolution = 0.1f;\nPRES:comment_on_resolution = “PRES resolution is 0.1 dbar, except for measurement codes [150 189 198 289 297 298 389 398 489 497 498 589 901] for which PRES resolution is 1 bar”;\n\nYou may add a comment_on_resolution global attribute\n\n:comment_on_resolution = “PRES variable resolution may be lower than nominal depending on measurement codes”\n\n\n\n\n3.3.6 2.3.6 N_CYCLE dimension variable group\nThis section contains information on the variables with dimension N_CYCLE. They include variables that contain the best estimate of float timing. \nEach field in this section has a N_CYCLE dimension. \nN_CYCLE is the number of collected cycles performed by the float.  It is a dimension, thus it may not equal the maximum cycle number within the file.\nThe N_CYCLE array should be ordered by CYCLE_NUMBER_INDEX.\nThe cycle definition is available at §1.6. Cycle is defined as a series of actions, including collection of data, made by a float that ends with transmission of data. If the float fails to collect nor transmit data, a cycle has not occurred and CYCLE_NUMBER_INDEX should not be incremented. \nFloats begin with different cycle numbers depending on float type. To understand how the N_CYCLE dimension variable group relates to the N_MEASUREMENT variable group, the user must consult the CYCLE_NUMBER_INDEX variable. This variable indicates the cycle number of the float information that is contained in that particular N_CYCLE index. For example, to find the N_CYCLE information that corresponds to CYCLE_NUMBER = 1, look for CYCLE_NUMBER_INDEX = 1. \nAdditionally, CYCLE_NUMBER_INDEX is the number of the profile cycle associated with the trajectory cycle in that index of the N_CYCLE array. \nIf any errors are discovered in how the cycle numbers were assigned in real-time, or if additional cycles are recovered in delayed mode, the CYCLE_NUMBER_INDEX_ADJUSTED variable is adjusted accordingly. \nCYCLE_NUMBER_INDEX always corresponds to the profile cycle number. To look for the cycle that matches the profile cycle number, users must look in the CYCLE_NUMBER_INDEX variable for the cycle number they are interested in. If the CYCLE_NUMBER_INDEX_ADJUSTED variable contains ‘FillValue’, then this cycle is in real time mode and no corrected cycle number exists. If the CYCLE_NUMBER_INDEX_ADJUSTED variable is filled, this is the correct cycle number as determined during delayed mode. \nWhen a cycle is missing (e.g. no data received), no fill values are used to indicate a missing cycle.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nJULD_DESCENT_START\ndouble JULD_DESCENT_START(N_CYCLE);JULD_DESCENT_START:long_name = “Descent start date of the cycle”;JULD_DESCENT_START:standard_name = “time”;JULD_DESCENT_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_DESCENT_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_DESCENT_START:resolution = X;JULD_DESCENT_START:_FillValue = 999999.;\nJulian day (UTC) when float leaves the surface and begins descent Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_DESCENT_START_STATUS\nchar JULD_DESCENT_START_STATUS(N_CYCLE);JULD_DESCENT_START_STATUS:long_name = “Status of descent start date of the cycle”;JULD_DESCENT_START_STATUS:conventions = “Argo reference table 19”;JULD_DESCENT_START_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_FIRST_STABILIZATION\ndouble JULD_FIRST_STABILIZATION(N_CYCLE);JULD_FIRST_STABILIZATION:long_name = “Time when a float first becomes water-neutral”;JULD_FIRST_STABILIZATION:standard_name = “time”;JULD_FIRST_STABILIZATION:units = days since 1950-01-01 00:00:00 UTC”;JULD_FIRST_STABILIZATION: conventions = “Relative julian days with decimal part (as parts of day)”;JULD_FIRST_STABILIZATION:resolution = X;JULD_FIRST_STABILIZATION:_FillValue = 999999.\nJulian day (UTC) of time when a float first becomes water-neutral.  Example :18833.8013889885 : July 25 2001 19:14:00 \n\n\nJULD_FIRST_STABILIZATION_STATUS\nchar JULD_FIRST_STABILIZATION_STATUS(N_CYCLE);JULD_FIRST_STABILIZATION_STATUS:long_name = “Status of time when a float first becomes water-neutral”;JULD_FIRST_STABILIZATION_STATUS:conventions = “Argo reference table 19”;JULD_STABILIZATION_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_DESCENT_END\ndouble JULD_DESCENT_END(N_CYCLE);JULD_DESCENT_END:long_name = “Descent end date of the cycle”;JULD_DESCENT_END:standard_name = “time”;JULD_DESCENT_END:units = “days since 1950-01-01 00:00:00 UTC”;JULD_DESCENT_END:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_DESCENT_END:resolution = X;JULD_DESCENT_END:_FillValue = 999999.;\nJulian day (UTC) when float first approaches within 3% of the eventual drift pressure. Float may be transitioning from the surface or from a deep profile.  Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_DESCENT_END_STATUS\nchar JULD_DESCENT_END_STATUS(N_CYCLE);JULD_DESCENT_END_STATUS:long_name = “Status of descent end date of the cycle”;JULD_DESCENT_END_STATUS:conventions = “Argo reference table 19”;JULD_DESCENT_END_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_PARK_START\ndouble JULD_PARK_START(N_CYCLE);JULD_PARK_START:long_name = “Drift start date of the cycle”;JULD_PARK_START:standard_name = “time”;JULD_PARK_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_PARK_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_PARK_START:resolution = X;JULD_PARK_START:_FillValue = 999999.;\nJulian day (UTC) when the float transitions to its Park or Drift mission.  This variable is based on float logic based on a descent timer (i.e. SOLO), or be based on measurements of pressure (i.e. Provor).Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_PARK_START_STATUS\nchar JULD_PARK_START_STATUS(N_CYCLE);JULD_PARK_START_STATUS:long_name = “Status of drift start date of the cycle”;JULD_PARK_START_STATUS:conventions = “Argo reference table 19”;JULD_PARK_START_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_PARK_END\ndouble JULD_PARK_END(N_CYCLE);JULD_PARK_END:long_name = “Drift end date of the cycle”;JULD_PARK_END:standard_name = “time”;JULD_PARK_END:units = “days since 1950-01-01 00:00:00 UTC”;JULD_PARK_END:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_PARK_END:resolution = X;JULD_PARK_END:_FillValue = 999999.;\nJulian day (UTC) when float exits from its Park or Drift mission. It may next rise to the surface (AST) or sink to profile depth (DDET)Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_PARK_END_STATUS\nchar JULD_PARK_END_STATUS(N_CYCLE);JULD_PARK_END_STATUS:long_name = “Status of drift end date of the cycle”;JULD_PARK_END_STATUS:conventions = “Argo reference table 19”;JULD_PARK_END_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_DEEP_DESCENT_END\ndouble JULD_DEEP_DESCENT_END(N_CYCLE);JULD_DEEP_DESCENT_END:long_name = “Deep descent end date of the cycle”;JULD_DEEP_DESCENT_END:standard_name = “time”;JULD_DEEP_DESCENT_END:units = “days since 1950-01-01 00:00:00 UTC”;JULD_DEEP_DESCENT_END:conventions = “Relative julian days with decimal part (as parts of day)»;JULD_DEEP_DESCENT_END:resolution = X;JULD_DEEP_DESCENT_END:_FillValue = 999999.;\nJulian day (UTC) when float first approaches within 3% of the eventual deep drift/profile pressure. Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_DEEP_DESCENT_END_STATUS\nchar JULD_DEEP_DESCENT_END_STATUS(N_CYCLE);JULD_DEEP_DESCENT_END_STATUS:long_name = “Status of deep descent end date of the cycle”;JULD_DEEP_DESCENT_END_STATUS:conventions = “Argo reference table 19”;JULD_DEEP_DESCENT_END_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_DEEP_PARK_START\ndouble JULD_DEEP_PARK_START(N_CYCLE);JULD_DEEP_PARK_START:long_name = “Deep park start date of the cycle”;JULD_DEEP_PARK_START:standard_name = “time”;JULD_DEEP_PARK_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_DEEP_PARK_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_DEEP_PARK_START:resolution = X;JULD_DEEP_PARK_START:_FillValue = 999999.;\nJulian day (UTC) when the float transitions to its Deep Park or Deep Drift mission.  This variable is based on float logic based on a descent timer (i.e. SOLO), or be based on measurements of pressure (i.e. Provor).Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_DEEP_PARK_START _STATUS\nchar JULD_DEEP_PARK_START _STATUS(N_CYCLE);JULD_DEEP_PARK_START_STATUS:long_name = “Status of deep park start date of the cycle”;JULD_DEEP_PARK_START _STATUS:conventions = “Argo reference table 19”;JULD_DEEP_PARK_START _STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_ASCENT_START\ndouble JULD_ASCENT_START(N_CYCLE);JULD_ASCENT_START:long_name = “Start date of the ascent to the surface”;JULD_ASCENT_START:standard_name = “time”;JULD_ASCENT_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_ASCENT_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_ASCENT_START:resolution = X;JULD_ASCENT_START:_FillValue = 999999.;\nJulian day (UTC) of the beginning of the float’s ascent to the surfaceExample :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_ASCENT_START_STATUS\nchar JULD_ASCENT_START_STATUS(N_CYCLE);JULD_ASCENT_START_STATUS:long_name = “Status of start date of the ascent to the surface”;JULD_ASCENT_START_STATUS:conventions = “Argo reference table 19”;JULD_ASCENT_START_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (.https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_DEEP_ASCENT_START\ndouble JULD_DEEP_ASCENT_START(N_CYCLE);JULD_DEEP_ASCENT_START:long_name = “Deep ascent start date of the cycle”;JULD_DEEP_ASCENT_START:standard_name = “time”;JULD_DEEP_ASCENT_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_DEEP_ASCENT_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_DEEP_ASCENT_START:resolution = X;JULD_DEEP_ASCENT_START:_FillValue = 999999.;\nJulian day (UTC) when the float begins its rise to drift pressure. Typical for profile-on-descent floats..Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_DEEP_ASCENT_START_STATUS\nchar JULD_DEEP_ASCENT_START_STATUS(N_CYCLE);JULD_DEEP_ASCENT_START_STATUS:long_name = “Status of deep ascent start date of the cycle”;JULD_DEEP_ASCENT_START_STATUS:conventions = “Argo reference table 19”;JULD_DEEP_ASCENT_START_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/).Example:‘2’ : Value is transmitted by the float\n\n\nJULD_ASCENT_END\ndouble JULD_ASCENT_END(N_CYCLE);JULD_ASCENT_END:long_name = “End date of ascent to the surface”;JULD_ASCENT_END:standard_name = “time”;JULD_ASCENT_END:units = “days since 1950-01-01 00:00:00 UTC”;JULD_ASCENT_END:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_ASCENT_END:resolution = X;JULD_ASCENT_END:_FillValue = 999999.;\nJulian day (UTC) of the end of the ascent to the surface .Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_ASCENT_END_STATUS\nchar JULD_ASCENT_END_STATUS(N_CYCLE);JULD_ASCENT_END_STATUS:long_name = “Status of end date of ascent to the surface”;JULD_ASCENT_END_STATUS:conventions = “Argo reference table 19”;JULD_ASCENT_END_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_TRANSMISSION_START\ndouble JULD_TRANSMISSION_START(N_CYCLE);JULD_TRANSMISSION_START:long_name = “Start date of transmission”;JULD_TRANSMISSION_START:standard_name = “time”;JULD_TRANSMISSION_START:units = “days since 1950-01-01 00:00:00 UTC”;JULD_TRANSMISSION_START:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_TRANSMISSION_START:resolution = X;JULD_TRANSMISSION_START:_FillValue = 999999.;\nJulian day (UTC) of the beginning of data transmission.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_TRANSMISSION_START_STATUS\nchar JULD_TRANSMISSION_START_STATUS(N_CYCLE);JULD_TRANSMISSION_START_STATUS:long_name = “Status of start date of transmission”;JULD_TRANSMISSION_START_STATUS:conventions = “Argo reference table 19”;JULD_TRANSMISSION_START_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_FIRST_MESSAGE\ndouble JULD_FIRST_MESSAGE(N_CYCLE);JULD_FIRST_MESSAGE:long_name = “Date of earliest float message received”;JULD_FIRST_MESSAGE:standard_name = “time”;JULD_FIRST_MESSAGE:units = “days since 1950-01-01 00:00:00 UTC”;JULD_FIRST_MESSAGE:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_FIRST_MESSAGE:resolution = X;JULD_FIRST_MESSAGE:_FillValue = 999999.;\nJulian day (UTC) of the earliest float message received.  May or may not have a position associated with it.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_FIRST_MESSAGE_STATUS\nchar JULD_FIRST_MESSAGE_STATUS(N_CYCLE);JULD_FIRST_MESSAGE_STATUS:long_name = “Status of date of earliest float message received”;JULD_FIRST)MESSAGE_STATUS:conventions = “Argo reference table 19”;JULD_FIRST_MESSAGE_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_FIRST_LOCATION\ndouble JULD_FIRST_LOCATION(N_CYCLE);JULD_FIRST_LOCATION:long_name = “Date of earliest location”;JULD_FIRST_LOCATION:standard_name = “time”;JULD_FIRST_LOCATION:units = “days since 1950-01-01 00:00:00 UTC”;JULD_FIRST_LOCATION:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_FIRST_LOCATION:resolution = X;JULD_FIRST_LOCATION:_FillValue = 999999.;\nJulian day (UTC) of the earliest positionExample :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_FIRST_LOCATION_STATUS\nchar JULD_FIRST_LOCATION_STATUS(N_CYCLE);JULD_FIRST_LOCATION_STATUS:long_name = “Status of date of earliest location”;JULD_FIRST_LOCATION_STATUS:conventions = “Argo reference table 19”;JULD_FIRST_LOCATION_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_LAST_LOCATION\ndouble JULD_LAST_LOCATION(N_CYCLE);JULD_LAST_LOCATION:long_name = “Date of latest location”;JULD_LAST_LOCATION:standard_name = “time”;JULD_LAST_LOCATION:units = “days since 1950-01-01 00:00:00 UTC”;JULD_LAST_LOCATION:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_LAST_LOCATION:resolution = X;JULD_LAST_LOCATION:_FillValue = 999999.;\nJulian day (UTC) of the latest positionExample :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_LAST_LOCATION_STATUS\nchar JULD_LAST_LOCATION_STATUS(N_CYCLE);JULD_LAST_LOCATION_STATUS:long_name = “Status of date of latest location”;JULD_LAST_LOCATION_STATUS:conventions = “Argo reference table 19”;JULD_LAST_LOCATION_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_LAST_MESSAGE\ndouble JULD_LAST_MESSAGE(N_CYCLE);JULD_LAST_MESSAGE:long_name = “Date of latest float message received”;JULD_LAST_MESSAGE:standard_name = “time”;JULD_LAST_MESSAGE:units = “days since 1950-01-01 00:00:00 UTC”;JULD_LAST_MESSAGE:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_LAST_MESSAGE:resolution = X;JULD_LAST_MESSAGE:_FillValue = 999999.;\nJulian day (UTC) of the latest float message received.  May or may not have a position associated with it.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_LAST_MESSAGE_STATUS\nchar JULD_LAST_MESSAGE_STATUS(N_CYCLE);JULD_LAST_MESSAGE_STATUS:long_name = “Status of date of latest float message received”;JULD_LAST_MESSAGE_STATUS:conventions = “Argo reference table 19”;JULD_LAST_MESSAGE_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nJULD_TRANSMISSION_END\ndouble JULD_TRANSMISSION_END(N_CYCLE);JULD_TRANSMISSION_END:long_name = “Transmission end date”;JULD_TRANSMISSION_END:standard_name = “time”;JULD_TRANSMISSION_END:units = “days since 1950-01-01 00:00:00 UTC”;JULD_TRANSMISSION_END:conventions = “Relative julian days with decimal part (as parts of day)”;JULD_TRANSMISSION_END:resolution = X;JULD_TRANSMISSION_END:_FillValue = 999999.;\nJulian day (UTC) of the end of transmission.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nJULD_TRANSMISSION_END_STATUS\nchar JULD_TRANSMISSION_END_STATUS(N_CYCLE);JULD_TRANSMISSION_END_STATUS:long_name = “Status of transmission end date”;JULD_TRANSMISSION_END_STATUS:conventions = “Argo reference table 19”;JULD_TRANSMISSION_END_STATUS:_FillValue = ” “;\nStatus flag on JULD date and time.  The flag scale is described in reference table 19 (https://vocab.nerc.ac.uk/collection/R19/)Example:‘2’ : Value is transmitted by the float\n\n\nCLOCK_OFFSET\ndouble CLOCK_OFFSET(N_CYCLE);CLOCK_OFFSET:long_name = “Time of float clock drift”;CLOCK_OFFSET:units = “days”;CLOCK_OFFSET:conventions = “Days with decimal part (as parts of day)”;CLOCK_OFFSET:_FillValue = 999999.;\nDecimal part of day that float clock has drifted. Float clock drift is defined as Float time (provided by the inboard Real Time Clock (RTC) of the float) – UT time.  This makes the clock drift less than 0 if float RTC is before UT time.Float clock drift can be corrected in real time or in delayed mode.  Real time corrections correspond to a data mode of “A”.  For “A” mode files, JULD_ADJUSTED = JULD - CLOCK_OFFSET”D” mode files may have corrections for clock drift only or additional time corrections based on expert review.  Example :-1.08546: the clock drift is estimated to be equal to  – 1 day 2 hours 3 minutes and 4 seconds at the time of the corresponding cycle surfacing\n\n\nGROUNDED\nchar GROUNDED(N_CYCLE);GROUNDED:long_name = “Did the profiler touch the ground for that cycle?”;GROUNDED:conventions = “Argo reference table 20”;GROUNDED:_FillValue = ” “;\nGROUNDED indicates the best estimate of whether the float touched the ground for that cycle.The conventions are described in Argo reference table 20 (https://vocab.nerc.ac.uk/collection/R20/Example: Y : yes, the float touched the ground \n\n\nREPRESENTATIVE_PARK_PRESSURE\nfloat REPRESENTATIVE_PARK_PRESSURE (N_CYCLE);REPRESENTATIVE_PARK_PRESSURE:long_name = “Best pressure value during park phase”;REPRESENTATIVE_PARK_PRESSURE:units = “&lt;X&gt;”;REPRESENTATIVE_PARK_PRESSURE:_FillValue = &lt;X&gt;;\nThe Representative Park Pressure (RPP) is the best pressure value assigned to the drift phase.  See reference table 21 to understand how this pressure was evaluated.  It should match the PRES(N_MEASUREMENT) values with MC = 301. &lt;X&gt; : these fields are specified in the columns of the reference table 3  (https://vocab.nerc.ac.uk/collection/R03/).Example:1025\n\n\nREPRESENTATIVE_PARK_PRESSURE_STATUS\nchar REPRESENTATIVE_PARK_PRESSURE_STATUS (N_CYCLE);REPRESENTATIVE_PARK_PRESSURE_STATUS:long_name = “Status of best pressure value during park phase”;REPRESENTATIVE_PARK_PRESSURE_STATUS:conventions = “Argo reference table 21”;REPRESENTATIVE_PARK_PRESSURE_STATUS:_FillValue = ” “;\nStatus flag on the Representative Park Pressure (RPP). The flag scale is described in reference table 21 (https://vocab.nerc.ac.uk/collection/R21/).Example:‘2’ : mean value, directly provided by the float, of pressure measurements regularly sampled during the drift phase\n\n\nCONFIG_MISSION_NUMBER\nint CONFIG_MISSION_NUMBER (N_CYCLE);CONFIG_MISSION_NUMBER:long_name = “Unique number denoting the missions performed by the float”;CONFIG_MISSION_NUMBER:conventions = “1…N, 1 : first complete mission”;CONFIG_MISSION_NUMBER:_FillValue = 99999;\nUnique number of the mission to which this profile belongs.See note on floats with multiple configurations §2.4.6.1.The number 0 (zero) can be used to denote the float’s mission prelude, if it exists.\n\n\nCYCLE_NUMBER_INDEX\nint CYCLE_NUMBER_INDEX(N_CYCLE);CYCLE_NUMBER_INDEX:long_name = “Cycle number that corresponds to the current index”;CYCLE_NUMBER_INDEX:conventions = “0…N, 0 : launch cycle, 1 : first complete cycle”;CYCLE_NUMBER_INDEX:FillValue = 99999;\nCycle number of the float that corresponds to the information contained in the current index.  This cycle number must match the profile cycle number, ensuring that the trajectory and profile with the same cycle number contain data from the same cycle.Example: 17 means information for the 17th cycle of the float is contained in this index.\n\n\nCYCLE_NUMBER_INDEX_ADJUSTED\nint CYCLE_NUMBER_INDEX_ADJUSTED (N_CYCLE);CYCLE_NUMBER_INDEX_ADJUSTED:long_name = “Adjusted cycle number that corresponds to the current index”;CYCLE_NUMBER_INDEX_ADJUSTED:conventions = “0…N, 0 : launch cycle, 1 : first complete cycle”;CYCLE_NUMBER_INDEX_ADJUSTED:FillValue = 99999;\nCorrected cycle number of the float that corresponds to the information contained in the current index.  Errors may be found in CYCLE_NUMBER_INDEX variable which are corrected and contained in this variable. Example: 17 means information for the 17th cycle of the float is contained in this index.\n\n\nDATA_MODE\nchar DATA_MODE(N_ CYCLE);DATA_MODE:long_name = “Delayed mode or real time data”;DATA_MODE:conventions = “R : real time; D : delayed mode; A : real time with adjustment”;DATA_MODE:_FillValue = ” “;\nIndicates if the trajectory cycle contains real time, adjusted or delayed mode data.  A delayed mode cycle means the positions, times, cycle number, pressure, temperature, and salinity (if measured) have been quality controlled.  Additional parameters like oxygen may not be quality controlled.  Floats often have delayed mode data only after they die, but can have both delayed mode and real time data  for different parameters while alive. When this occurs, two trajectory files exist - a real time file (“R”) with only real time data for all the cycles in the float record and a delayed mode file (“D”) with both real time and delayed mode data for all the cycles that have been delayed mode quality controlled. Floats can be adjusted in real time with adjusted time values only in the JULD_ADJUSTED variable and its associated _STATUS and _QC variables.  This occurs when floats are corrected in real time for clock drift.  Examples :‘R’ : real time data’D’ : delayed mode data’A’ : real time data with JULD_ADJUSTED values\n\n\n\n\n\n3.3.7 Scientific calibration section\nThe SCIENTIFIC CALIBRATION section in the V3.2 traj files stores information of parameter calibration during park drift, descend to profile, or surface drift.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nSCIENTIFIC_CALIB_PARAMETER\nchar SCIENTIFIC_CALIB_PARAMETER(N_CALIB_PARAM, N_PARAM, STRING64);SCIENTIFIC_CALIB_PARAMETER:long_name = “List of parameters with calibration information”;SCIENTIFIC_CALIB_PARAMETER:conventions = “Argo reference table 3”;SCIENTIFIC_CALIB_PARAMETER:_FillValue = ” “;\nName of the calibrated parameter. The list of parameters is in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/). Example: DOXY\n\n\nSCIENTIFIC_CALIB_EQUATION\nchar SCIENTIFIC_CALIB_EQUATION(N_CALIB_PARAM, N_PARAM, STRING256);SCIENTIFIC_CALIB_EQUATION:long_name = “Calibration equation for this parameter”;SCIENTIFIC_CALIB_EQUATION:_FillValue = ” “;\nCalibration equation applied to the parameter. Example: Tc = a1*T + a0\n\n\nSCIENTIFIC_CALIB_COEFFICIENT\nchar SCIENTIFIC_CALIB_COEFFICIENT(N_CALIB_PARAM, N_PARAM, STRING256);SCIENTIFIC_CALIB_COEFFICIENT:long_name = “Calibration coefficients for this equation”;SCIENTIFIC_CALIB_COEFFICIENT:_FillValue = ” “;\nCalibration coefficients for this equation. Example: a1=0.99997, a0=0.0021\n\n\nSCIENTIFIC_CALIB_COMMENT\nchar SCIENTIFIC_CALIB_COMMENT(N_CALIB_PARAM, N_PARAM, STRING256);SCIENTIFIC_CALIB_COMMENT:long_name = “Comment applying to this parameter calibration”;SCIENTIFIC_CALIB_COMMENT:_FillValue = ” “;\nComment about this calibration. Example: “MC&lt;500 and MC&gt;600: DOXY adjustment based on comparison of surface in-air data with NCEP atmospheric reanalysis following Bittig et al. (2018).”\n\n\nSCIENTIFIC_CALIB_DATE\nchar SCIENTIFIC_CALIB_DATE(N_CALIB_PARAM, N_PARAM, DATE_TIME);SCIENTIFIC_CALIB_DATE:long_name = “Date of calibration”;SCIENTIFIC_CALIB_DATE:conventions = “YYYYMMDDHHMISS”;SCIENTIFIC_CALIB_DATE:_FillValue = ” “;\nDate of the calibration. Example: 20011217161700\n\n\n\n\n\n3.3.8 JULD calibration section\nThe JULD CALIBRATION section in the V3.2 traj files stores information of JULD calibration.\n\n\n\n\n\n\n\n\nName\nDefinition\nComment\n\n\n\n\nJULD_CALIB_EQUATION\nchar JULD_CALIB_EQUATION(N_CALIB_JULD, STRING256);JULD_CALIB_EQUATION:long_name = “Calibration equation for JULD”;JULD_CALIB_EQUATION:_FillValue = ” “;\nCalibration equation applied to JULD. Example: JULD_ADJUSTED = a1*JULD + a0\n\n\nJULD_CALIB_COEFFICIENT\nchar JULD_CALIB_COEFFICIENT(N_CALIB_JULD, STRING256);JULD_CALIB_COEFFICIENT:long_name = “Calibration coefficients for JULD equation”;JULD_CALIB_COEFFICIENT:_FillValue = ” “;\nCalibration coefficients for this equation. Example: a1=0.99997, a0=0.0021\n\n\nJULD_CALIB_COMMENT\nchar JULD_CALIB_COMMENT(N_CALIB_JULD, STRING256);JULD_CALIB_COMMENT:long_name = “Comment applying to JULD calibration”;JULD_CALIB_COMMENT:_FillValue = ” “;\nComment about this calibration. Example: “Float times have been linearly corrected from float clock offset (reported in CLOCK_OFFSET(N_CYCLE)).”\n\n\nJULD_CALIB_DATE\nchar JULD_CALIB_DATE(N_CALIB_JULD, DATE_TIME);JULD_CALIB_DATE:long_name = “Date of JULD calibration”;JULD_CALIB_DATE:conventions = “YYYYMMDDHHMISS”;JULD_CALIB_DATE:_FillValue = ” “;\nDate of the calibration. Example: 20011217161700\n\n\n\n\n\n3.3.9 History information\nThis section contains history information for each action performed on each measurement. \nEach item of this section has a N_HISTORY (number of history records) dimension.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nHISTORY_INSTITUTION\nchar HISTORY_INSTITUTION (N_HISTORY, STRING4);HISTORY_INSTITUTION:long_name = “Institution which performed action”;HISTORY_INSTITUTION:conventions = “Argo reference table 4”;HISTORY_INSTITUTION:_FillValue = ” “;\nInstitution that performed the action.Institution codes are described in reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example : “ME” for MEDS\n\n\nHISTORY_STEP\nchar HISTORY_STEP (N_HISTORY, STRING4);HISTORY_STEP:long_name = “Step in data processing”;HISTORY_STEP:conventions = “Argo reference table 12”;HISTORY_STEP:_FillValue = ” “;\nCode of the step in data processing for this history record.The step codes are described in reference table 12 (https://vocab.nerc.ac.uk/collection/R12/).Example : “ARGQ” : Automatic QC of data reported in real-time has been performed\n\n\nHISTORY_SOFTWARE\nchar HISTORY_SOFTWARE (N_HISTORY, STRING4);HISTORY_SOFTWARE:long_name = “Name of software which performed action”;HISTORY_SOFTWARE:conventions = “Institution dependent”;HISTORY_SOFTWARE:_FillValue = ” “;\nName of the software that performed the action.This code is institution dependent.Example : “OW”\n\n\nHISTORY_SOFTWARE_RELEASE\nchar HISTORY_SOFTWARE_RELEASE (N_HISTORY, STRING4);HISTORY_SOFTWARE_RELEASE:long_name = “Version/release of software which performed action”;HISTORY_SOFTWARE_RELEASE:conventions = “Institution dependent”;HISTORY_SOFTWARE_RELEASE:_FillValue = ” “;\nVersion of the software.This name is institution dependent.Example : “1.0”\n\n\nHISTORY_REFERENCE\nchar HISTORY_REFERENCE (N_HISTORY, STRING64);HISTORY_REFERENCE:long_name = “Reference of database”;HISTORY_REFERENCE:conventions = “Institution dependent”;HISTORY_REFERENCE:_FillValue = ” “;\nCode of the reference database used for quality control in conjunction with the software.This code is institution dependent.Example : “WOD2001”\n\n\nHISTORY_DATE\nchar HISTORY_DATE(N_HISTORY, DATE_TIME);HISTORY_DATE:long_name = “Date the history record was created”;HISTORY_DATE:conventions = “YYYYMMDDHHMISS”;HISTORY_DATE:_FillValue = ” “;\nDate of the action.Example : “20011217160057”\n\n\nHISTORY_ACTION\nchar HISTORY_ACTION (N_HISTORY, STRING4);HISTORY_ACTION:long_name = “Action performed on data”;HISTORY_ACTION:conventions = “Argo reference table 7”;HISTORY_ACTION:_FillValue = ” “;\nName of the action.The action codes are described in reference table 7 (https://vocab.nerc.ac.uk/collection/R07/).Example : “QCF$” for QC failed\n\n\nHISTORY_PARAMETER\nchar HISTORY_PARAMETER(N_HISTORY, STRING64);HISTORY_PARAMETER:long_name = “Parameter action is performed on”;HISTORY_PARAMETER:conventions = “Argo reference table 3”;HISTORY_PARAMETER:_FillValue = ” “;\nName of the parameter on which the action is performed.Example : “PSAL”\n\n\nHISTORY_PREVIOUS_VALUE\nfloat HISTORY_PREVIOUS_VALUE(N_HISTORY);HISTORY_PREVIOUS_VALUE:long_name = “Parameter/Flag previous value before action”;HISTORY_PREVIOUS_VALUE:_FillValue = 99999.;\nParameter or flag of the previous value before action.Example :’ 2’ (probably good) for a flag that was changed to ‘1’ (good)\n\n\nHISTORY_INDEX_DIMENSION\nchar HISTORY_INDEX_DIMENSION(N_HISTORY);HISTORY_INDEX_DIMENSION:long_name = “Name of dimension to which HISTORY_START_INDEX and HISTORY_STOP_INDEX correspond”;HISTORY_INDEX_DIMENSION:conventions = “C: N_CYCLE, M: N_MEASUREMENT”;HISTORY_INDEX_DIMENSION:_FillValue = ” “;\nName of dimension to which HISTORY_START_INDEX and HISORY_STOP_INDEX correspond.‘C’: N_CYCLE‘M’: N_MEASUREMENT\n\n\nHISTORY_START_INDEX\nint HISTORY_ START_INDEX (N_HISTORY);HISTORY_START_INDEX:long_name = “Start index action applied on”;HISTORY_START_INDEX:_FillValue = 99999;\nStart index the action is applied to.This index corresponds to N_MEASUREMENT or N_CYCLE, depending on the corrected parameterExample : 100\n\n\nHISTORY_STOP_INDEX\nint HISTORY_ STOP_INDEX (N_HISTORY);HISTORY_STOP_INDEX:long_name = “Stop index action applied on”;HISTORY_STOP_INDEX:_FillValue = 99999;\nStop index the action is applied to.This index corresponds to N_MEASUREMENT or N_CYCLE, depending on the corrected parameterExample : 150\n\n\nHISTORY_QCTEST\nchar HISTORY_QCTEST(N_HISTORY,  STRING16);HISTORY_QCTEST:long_name = “Documentation of tests performed, tests failed (in hex form)”;HISTORY_QCTEST:conventions = “Write tests performed when ACTION=QCP$; tests failed when ACTION=QCF$”;HISTORY_QCTEST:_FillValue = ” “;\nThis field records the tests performed when ACTION is set to QCP$ (QC performed), the test failed when ACTION is set to QCF$ (QC failed).The QCTEST codes are described in reference table 11 (https://vocab.nerc.ac.uk/collection/R11/).Example : “0A” (in hexadecimal form)\n\n\n\nThe usage of history section is described in §5 “Using the History section of the Argo netCDF Structure”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#metadata-format-version-3.1",
    "href": "chapter2.html#metadata-format-version-3.1",
    "title": "3  Formats description",
    "section": "3.4 Metadata format version 3.1",
    "text": "3.4 Metadata format version 3.1\nThe format version 3.1 of Argo metadata will replace versions 2.2 and 2.4 gradually.During the transition period, all formats will be valid.However, when a Data Assembly Center (DAC) produces metadata files with the new 3.1 format, all its metadata files must be provided in version 3.1. An Argo metadata file contains descriptive information about an Argo float.  For file naming conventions, see §4.1. \n\n3.4.1 Global attributes\nThe global attributes section is used for data discovery.It complies with NetCDF Climate and Forecast (CF) Metadata Conventions (version 1.6). - https://cfconventions.org/\nThe following global attributes should appear in the global section: // global attributes: :title = “Argo float metadata file”; :institution = “CSIRO”; :source = “Argo float”; :history = “2011-04-22T06:00:00Z creation”; :references = “http://www.argodatamgt.org/Documentation”; :comment = “free text”;:user_manual_version = “3.4”; :Conventions = “Argo-3.1 CF-1.6”;\n\n\n\n\n\n\n\nGlobal attribute name\nDefinition\n\n\n\n\ntitle\nA succinct description of what is in the dataset.\n\n\ninstitution\nSpecifies where the original data was produced.\n\n\nsource\nThe method of production of the original data.If it was model-generated, source should name the model and its version, as specifically as could be useful.If it is observational, source should characterize it (e.g., “surface observation” or “radiosonde”).\n\n\nhistory\nProvides an audit trail for modifications to the original data.Well-behaved generic NetCDF filters will automatically append their name and the parameters with which they were invoked to the global history attribute of an input NetCDF file.We recommend that each line begins with a timestamp indicating the date and time of day that the program was executed.\n\n\nreferences\nPublished or web-based references that describe the data or methods used to produce it.\n\n\ncomment\nMiscellaneous information about the data or methods used to produce it.\n\n\nuser_manual_version\nThe version number of the user manual\n\n\nConventions\nThe conventions supported by this file, blank separated\n\n\n\n\n\n3.4.2 Dimensions and definitions\n\n\n\n\n\n\n\n\nName \nDefinition \nComment \n\n\n\n\nDATE_TIME \nDATE_TIME = 14; \nThis dimension is the length of an ASCII date and time value. Date_time convention is : YYYYMMDDHHMISS YYYY : year MM : month DD : day HH : hour of the day MI : minutes SS : seconds Date and time values are always in universal time coordinates (UTC). Examples : 20010105172834 : January 5th 2001 17:28:34 19971217000000 : December 17th 1997 00:00:00\n\n\nSTRING1024STRING256STRING128STRING64STRING32STRING17STRING16STRING8STRING4STRING2\nSTRING1024 = 1024;STRING256 = 256; STRING128 = 128;  STRING64 = 64; STRING32 = 32; STRING17 = 17; STRING16 = 16; STRING8 = 8; STRING4 = 4; STRING2 = 2;\nString dimensions from 2 to 1024. \n\n\nN_PARAM \nN_PARAM = &lt;int value&gt;; \nNumber of parameters measured or calculated for a pressure sample. Examples :(pressure, temperature) : N_PARAM = 2 (pressure, temperature, salinity) : N_PARAM = 3 (pressure, temperature, conductivity, salinity) : N_PARAM = 4\n\n\nN_SENSOR\nN_SENSOR = &lt;int value&gt;;\nNumber of sensors mounted on the float and used to measure the parameters.\n\n\nN_CONFIG_PARAM \nN_CONFIG_PARAM=&lt;int value&gt;;\nNumber of configuration parameters. \n\n\nN_LAUNCH_CONFIG_PARAM\nN_LAUNCH_CONFIG_PARAM=&lt;int value&gt;;\nNumber of pre-deployment or launch configuration parameters.\n\n\nN_MISSIONS\nN_MISSIONS=&lt;unlimited&gt;;\nNumber of missions.\n\n\nN_POSITIONING_SYSTEM\nN_POSITIONING_SYSTEM=&lt;int value&gt;;\nNumber of positioning systems.\n\n\nN_TRANS_SYSTEM\nN_TRANS_SYSTEM=&lt;int value&gt;;\nNumber of transmission systems.\n\n\n\n\n\n3.4.3 Float characteristics\nThis section contains the main characteristics of the float. \n\n\n\nName\nDefinition \nComment\n\n\n\n\nPLATFORM_NUMBER \nchar PLATFORM_NUMBER(STRING8)PLATFORM_NUMBER:long_name = “Float unique identifier”PLATFORM_NUMBER:conventions = “WMO float identifier : A9IIIII” PLATFORM_NUMBER:_FillValue = ” “ \nWMO float identifier. WMO is the World Meteorological Organization. This platform number is unique.Example : 6900045 \n\n\nPLATFORM_WIGOS_ID \nchar PLATFORM_WIGOS_ID(STRING17)PLATFORM_WIGOS_ID:long_name = “Float unique identifier”PLATFORM_WIGOS_ID:conventions = “WMO WIGOS float identifier: 0-22000-0-A9IIIII” PLATFORM_WIGOS_ID:_FillValue = ” “ \nWMO WIGOS float identifier. WMO is the World Meteorological Organization. This platform number is unique.Example : 0-22000-0-6900045 “0-22000-0-” is the Argo floats prefix\n\n\nPTT \nchar PTT(STRING256)PTT:long_name = “Transmission identifier (ARGOS, ORBCOMM, etc.)”PTT:_FillValue = ” “ \nTransmission identifier of the float. Comma separated list for multi-beacon transmission.Example :“22507”: the float is equipped with one ARGOS beacon.“22598, 22768” : the float is equipped with 2 ARGOS beacons. \n\n\nTRANS_SYSTEM \nchar TRANS_SYSTEM(N_TRANS_SYSTEM, STRING16)TRANS_SYSTEM:long_name = “Telecommunication system used” TRANS_SYSTEM:_FillValue = ” “ \nName of the telecommunication system from reference table 10 (https://vocab.nerc.ac.uk/collection/R10/). Example : ARGOS \n\n\nTRANS_SYSTEM_ID \nchar TRANS_SYSTEM_ID(N_TRANS_SYSTEM, STRING32)TRANS_SYSTEM_ID:long_name = ”Program identifier used by the transmission system”TRANS_SYSTEM_ID:_FillValue = ” “ \nProgram identifier of the telecommunication subscription. DACs can use N/A or alternative of their choice when not applicable (e.g. : Iridium or Orbcomm)Example: 38511 is a program number for all the beacons of an ARGOS customer.\n\n\nTRANS_FREQUENCY \nchar TRANS_FREQUENCY(N_TRANS_SYSTEM, STRING16)TRANS_FREQUENCY:long_name = “Frequency of transmission from the float”TRANS_FREQUENCY:units = “hertz”TRANS_FREQUENCY:_FillValue = “ ” \nFrequency of transmission from the float.Unit : hertzExample : 1/44 \n\n\nPOSITIONING_SYSTEM \nchar POSITIONING_SYSTEM(N_POSITIONING_SYSTEM, STRING8)POSITIONING_SYSTEM:long_name = “Positioning system”POSITIONING_SYSTEM:_FillValue = ” “ \nPosition system from reference table 9 (https://vocab.nerc.ac.uk/collection/R09/). ARGOS or GPS are 2 positioning systems.Example : ARGOS \n\n\nPLATFORM_FAMILY\nchar PLATFORM_FAMILY(STRING256)PLATFORM_FAMILY:long_name = “Category of instrument”PLATFORM_FAMILY:conventions = “Argo reference table 22”PLATFORM_FAMILY:_FillValue = ” “\nCategory of instrument.See Argo reference table 22Example: FLOAT, ICE_TETHERED_PROFILER, FLOAT_DEEP. \n\n\nPLATFORM_TYPE\nchar PLATFORM_TYPE(STRING32)PLATFORM_TYPE:long_name = “Type of float”PLATFORM_TYPE:conventions = “Argo reference table 23”PLATFORM_TYPE:_FillValue = ” “ \nType of float.See Argo reference table 23 (https://vocab.nerc.ac.uk/collection/R23/).Example: SOLO, APEX, PROVOR, ARVOR, NINJA\n\n\nPLATFORM_MAKER \nchar PLATFORM_MAKER(STRING256)PLATFORM_MAKER:long_name = “Name of the manufacturer”PLATFORM_MAKER:conventions = “Argo reference table 24”PLATFORM_MAKER:_FillValue = ” “ \nName of the manufacturer.Example: MARTEC, MRV, TWR.See Argo reference table 24 (https://vocab.nerc.ac.uk/collection/R24/).\n\n\nFIRMWARE_VERSION\nchar FIRMWARE_VERSION(STRING64)FIRMWARE_VERSION:long_name = “Firmware version for the float”FIRMWARE_VERSION:_FillValue = ” “\nThe firmware version. This is specified as per the format on the manufacturer’s manual.Example: 072804The dimension STRING32 instead of STRING64 remains accepted.\n\n\nMANUAL_VERSION\nchar MANUAL_VERSION(STRING16)MANUAL_VERSION:long_name = “Manual version for the float”MANUAL_VERSION:_FillValue = ” “\nThe version date or number for the manual for each float.Example 110610 or 004 \n\n\nFLOAT_SERIAL_NO\nchar FLOAT_SERIAL_NO(STRING32)FLOAT_SERIAL_NO:long_name = “Serial number of the float”FLOAT_SERIAL_NO:_FillValue = ” “\nThis field should contain only the serial number of the float.Example 1679\n\n\nSTANDARD_FORMAT_ID\nchar STANDARD_FORMAT_ID(STRING16)STANDARD_FORMAT_ID:long_name = “Standard format number to describe the data format type for each float”STANDARD_FORMAT_ID:_FillValue = ” “\nStandardized format number as described in the online reference table: https://docs.google.com/spreadsheets/d/16iTji2i9tLh2PfiiMItfhaQybQB1NLAhj4s0mDML5yY/edit#gid=9  This table cross references to individual DAC format numbers.Example: 1010151\n\n\nDAC_FORMAT_ID\nchar DAC_FORMAT_ID(STRING16)DAC_FORMAT_ID:long_name = “Format number used by the DAC to describe the data format type for each float”DAC_FORMAT_ID:_FillValue = ” “\nFormat numbers used by individual DACs to describe each float type.This is cross-referenced to a standard format id as outlined in the online reference table: https://docs.google.com/spreadsheets/d/16iTji2i9tLh2PfiiMItfhaQybQB1NLAhj4s0mDML5yY/edit#gid=9Example: A9.\n\n\nWMO_INST_TYPE \nchar WMO_INST_TYPE(STRING4)WMO_INST_TYPE:long_name = “Coded instrument type” WMO_INST_TYPE:conventions = “Argo reference table 8”WMO_INST_TYPE:_FillValue = ” “\nInstrument type from WMO code table 1770. A subset of WMO table 1770 is documented in the reference table 8 (https://vocab.nerc.ac.uk/collection/R08/).Example : 846 : Webb Research float, Seabird sensor \n\n\nPROGRAM_NAME\nchar PROGRAM_NAME(STRING64)PROJECT_NAME:long_name = “Name of the program” PROGRAM_NAME:_FillValue = ” ”\nThis is an optional variable.The overarching program(s) of which the float is a part.A program consists of a set of related and possibly interdependent projects (PROJECT_NAME) that meet an overarching objective.A program defines a group of floats managed by the same lead agency. It materializes the implementing, operating, and responsible team.PROGRAM_NAME are managed by OceanOPS. Detailed definition of PROGRAM_NAME is available here: https://www.ocean-ops.org/metadata/#concept-definitions.Example : “Argo India” or “Argo GO-BGC, UW”. This is a constrained vocabulary (R41).\n\n\nDATA_CENTRE\nchar DATA_CENTRE(STRING2)DATA_CENTRE:long_name = “Data centre in charge of float real-time processing”DATA_CENTRE:conventions = “Argo reference table 4”DATA_CENTRE:_FillValue = ” “\nCode of the data centre in charge of the float data management. The data centre codes are described in the reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example: ME for MEDS \n\n\nPI_NAME \nchar PI_NAME (STRING64)PI_NAME:long_name = “Name of the principal investigator”PI_NAME:_FillValue = ” “\nName of the principal investigator responsible for the profiling float. Example: “Julia UITZ”.Valid PI names are listed in reference table 40 ( https://vocab.nerc.ac.uk/collection/R40/).  Multiple names can be concatenated, separated by commas.\n\n\nANOMALY\nchar ANOMALY(STRING256)ANOMALY:long_name = “Describe any anomalies or problems the float may have had”ANOMALY:_FillValue = ” “\nThis field describes any anomaly or problem the float may have had.Example: “the immersion drift is not stable.” \n\n\nBATTERY_TYPE\nchar BATTERY_TYPE(STRING64)BATTERY_TYPE:long_name = “Type of battery packs in the float”BATTERY_TYPE:_FillValue = ” “\nDescribes the type of battery packs in the float.BATTERY_TYPE  = “Manufacturer Alkaline x V”  or “Manufacturer Lithium x V + Manufacturer Alkaline x V”Example: “ELECTROCHEM Lithium 12 V” Use reference table 29 (not in the NVS)\n\n\nBATTERY_PACKS\nchar BATTERY_PACKS(STRING64)BATTERY_PACKS:long_name = “Configuration of battery packs in the float”BATTERY_PACKS:_FillValue = ” “\nDescribes the configuration of battery packs in the float, number and type.Example: “4DD Li + 1C Alk”Use reference table 30 (not in the NVS)\n\n\nCONTROLLER_BOARD _TYPE_PRIMARY\nchar CONTROLLER_BOARD_TYPE_PRIMARY(STRING32)CONTROLLER_BOARD_TYPE_PRIMARY:long_name = “Type of primary controller board”CONTROLLER_BOARD_TYPE_PRIMARY:_FillValue = ” “\nDescribes the type of controller board.first part of string: see reference table 28 (https://vocab.nerc.ac.uk/collection/R28/). Remainder of string free text and contained in square brackets Example:  “APF9 [iridium version xyz]”Use reference table 28\n\n\nCONTROLLER_BOARD _TYPE_SECONDARY\nchar CONTROLLER_BOARD_TYPE_SECONDARY(STRING32)CONTROLLER_BOARD_TYPE_SECONDARY:long_name = “Type of secondary controller board”CONTROLLER_BOARD_TYPE_SECONDARY:_FillValue = ” “\nThis is an optional variable.Only applicable if there is more than one controller board in the float. Describes the second type of controller board.first part of string: see reference table 28 (https://vocab.nerc.ac.uk/collection/R28/). Remainder of string free text and contained in square brackets Example:  “APF9 [iridium version xyz]”Use reference table 28\n\n\nCONTROLLER_BOARD _SERIAL_NO_PRIMARY\nchar CONTROLLER_BOARD_SERIAL_NO_PRIMARY(STRING32)CONTROLLER_BOARD_SERIAL_NO_PRIMARY:long_name = “Serial number of the primary controller board”CONTROLLER_BOARD_SERIAL_NO_PRIMARY:_FillValue = ” “\nThe serial number for the primary controller board.Example: 4567\n\n\nCONTROLLER_BOARD _SERIAL_NO_SECONDARY\nchar CONTROLLER_BOARD_SERIAL_NO_SECONDARY(STRING32)CONTROLLER_BOARD_SERIAL_NO_SECONDARY:long_name = “Serial number of the secondary controller board”CONTROLLER_BOARD_SERIAL_NO_SECONDARY:_FillValue = ” “\nThis is an optional variable.Only applicable if there is more than one controller board in the float. The serial number for the secondary controller board.Example: 4571\n\n\nSPECIAL_FEATURES\nchar SPECIAL_FEATURES(STRING1024)SPECIAL_FEATURES:long_name = “Extra features of the float (algorithms, compressee etc.)”SPECIAL_FEATURES:_FillValue = ” “\nAdditional float features can be specified here such as algorithms used by the float.Example: Ice Sensing Algorithm, Interim Storage Algorithm, grounding avoidance or additional hardware such as a compressee (buoyancy compensator).See reference table 32 (not in the NVS)\n\n\nFLOAT_OWNER\nchar FLOAT_OWNER (STRING64)FLOAT_OWNER:long_name = “Float owner”FLOAT_OWNER:_FillValue = ” “\nThe owner of the float (may be different from the data centre and operating institution).Example: Joe Blogg\n\n\nOPERATING_INSTITUTION\nchar OPERATING_INSTITUTION(STRING64)OPERATING_INSTITUTION:long_name = “Operating institution of the float”OPERATING_INSTITUTION:_FillValue = ” “\nThe operating institution of the float (may be different from the float owner and data centre).Example: ACE CRC\n\n\nCUSTOMISATION\nchar CUSTOMISATION(STRING1024)CUSTOMISATION:long_name = “Float customisation, i.e. (institution and modifications)”CUSTOMISATION:_FillValue = ” “\nFree form field to record changes made to the float after manufacture and before deployment, i.e. this could be the customisation institution plus a list of modifications.Example: Float stability collar removed for deployment in ice.\n\n\n\n\n\n3.4.4 2.4.5 Float deployment and mission information\n\n\n\nName \nDefinition \nComment \n\n\n\n\nLAUNCH_DATE\nchar LAUNCH_DATE(DATE_TIME);LAUNCH_DATE:long_name = “Date (UTC) of the deployment”; LAUNCH_DATE:conventions = “YYYYMMDDHHMISS”;LAUNCH_DATE:_FillValue = ” “; \nDate and time (UTC) of launch of the float.Format : YYYYMMDDHHMISS Example : 20011230090500 : December 30th 2001 03:05:00 \n\n\nLAUNCH_LATITUDE \ndouble LAUNCH_LATITUDE;LAUNCH_LATITUDE:long_name = “Latitude of the float when deployed”;LAUNCH_LATITUDE:units = “degree_north”;LAUNCH_LATITUDE:_FillValue = 99999.; LAUNCH_LATITUDE:valid_min = -90.;LAUNCH_LATITUDE:valid_max = 90.;\nLatitude of the launch.Unit : degree north.Example : 44.4991 : 44° 29’ 56.76’’ N\n\n\nLAUNCH_LONGITUDE\ndouble LAUNCH_LONGITUDE;LAUNCH_LONGITUDE:long_name = “Longitude of the float when deployed”;LAUNCH_LONGITUDE:units = “degree_east”; LAUNCH_LONGITUDE:_FillValue = 99999.; LAUNCH_LONGITUDE:valid_min = -180.; LAUNCH_LONGITUDE:valid_max = 180.;\nLongitude of the launch.Unit : degree east.Example : 16.7222 : 16° 43’ 19.92’’ E \n\n\nLAUNCH_QC\nchar LAUNCH_QC;LAUNCH_QC:long_name = “Quality on launch date, time and location”;LAUNCH_QC:conventions = “Argo reference table 2”; LAUNCH_QC:_FillValue = ” “;\nQuality flag on launch date, time and location.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).Example :‘1’ : launch location seems correct.\n\n\nSTART_DATE \nchar START_DATE(DATE_TIME);START_DATE:long_name = “Date (UTC) of the first descent of the float”; START_DATE:conventions = “YYYYMMDDHHMISS”; START_DATE:_FillValue = ” “;\nDate and time (UTC) of the first descent of the float.Format : YYYYMMDDHHMISS Example : 20011230090500 : December 30th 2001 06 :05 :00\n\n\nSTART_DATE_QC \nchar START_DATE_QC;START_DATE_QC:long_name = “Quality on start date”; START_DATE_QC:conventions = “Argo reference table 2”; START_DATE_QC:_FillValue = ” “;\nQuality flag on start date.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).Example : ‘1’ : start date seems correct.\n\n\nSTARTUP_DATE\nchar STARTUP_DATE(DATE_TIME);STARTUP_DATE:long_name = “Date (UTC) of the activation of the float”; STARTUP_DATE:conventions = “YYYYMMDDHHMISS”; STARTUP_DATE:_FillValue = ” “;\nDate and time (UTC) of the activation of the float before or just after deployment.This may include automatic startup during pressure activation.Format : YYYYMMDDHHMISS Example : 20011230090500 : December 30th 2001 06 :05 :00\n\n\nSTARTUP_DATE_QC \nchar STARTUP_DATE_QC;STARTUP_DATE_QC:long_name = “Quality on startup date”; STARTUP_DATE_QC:conventions = “Argo reference table 2”; STARTUP_DATE_QC:_FillValue = ” “;\nQuality flag on startup date.The flag scale is described in the reference tables 2 (https://vocab.nerc.ac.uk/collection/RR2/ for real time and https://vocab.nerc.ac.uk/collection/RD2/ for delayed mode).Example : ‘1’ : start date seems correct.\n\n\nDEPLOYMENT_PLATFORM \nchar DEPLOYMENT_PLATFORM(STRING128);DEPLOYMENT_PLATFORM:long_name = “Identifier of the deployment platform”; DEPLOYMENT_PLATFORM:_FillValue = ” “;\nIdentifier of the deployment platform, i.e.vessel or ship name.Example : “Ronald H.Brown uri:http://vocab.nerc.ac.uk/collection/C17/current/33RO/”char DEPLOYMENT_PLATFORM(STRING32) is also accepted.\n\n\nDEPLOYMENT_CRUISE_ID\nchar DEPLOYMENT_CRUISE_ID(STRING32);DEPLOYMENT_CRUISE_ID:long_name = “Identification number or reference number of the cruise used to deploy the float”;DEPLOYMENT_CRUISE_ID:_FillValue = ” “;\nIdentification number or reference number of the cruise used to deploy the platform.Example : POMME2\n\n\nDEPLOYMENT_REFERENCE_STATION_ID\nchar DEPLOYMENT_REFERENCE_STATION_ID(STRING256);DEPLOYMENT_REFERENCE_STATION_ID:long_name = “Identifier or reference number of co-located stations used to verify the first profile”;DEPLOYMENT_REFERENCE_STATION_ID:_FillValue = ” “;\nIdentifier or reference number of co-located CTD or XBT stations used to verify the first profile.Example : 58776, 58777\n\n\nEND_MISSION_DATE \nchar END_MISSION_DATE(DATE_TIME);END_MISSION_DATE:long_name = “Date (UTC) of the end of mission of the float”; END_MISSION_DATE:conventions = “YYYYMMDDHHMISS”; END_MISSION_DATE:_FillValue = ” “;\nDate (UTC) of the float’s deployment.  Format : YYYYMMDDHHMISS Example : 20011230090500 : December 30th 2001 03:05:00\n\n\nEND_MISSION_STATUS \nchar END_MISSION_STATUS;END_MISSION_STATUS:long_name = “Status of the end of mission of the float”; END_MISSION_STATUS:conventions = “T:No more transmission received, R:Retrieved”; END_MISSION_STATUS:_FillValue = ” “;\nStatus of the end of the float’s deployment.‘T’:No more transmission received, ‘R’:Retrieved\n\n\n\n\n\n3.4.5 Configuration parameters*\nThis section describes the configuration parameters for a float.It is important to note that configuration parameters are float settings selected by the PI, not measurements reported by the float.Configuration parameters may or may not be reported by a float.Configuration parameter names are identified by the “CONFIG” prefix.For each configuration parameter, the name of the parameter and the value of the parameter are recorded.\n\n\n\nName \nDefinition \nComment \n\n\n\n\nLAUNCH_CONFIG_PARAMETER_NAME \nchar LAUNCH_CONFIG_PARAMETER_NAME(N_LAUNCH_CONFIG_PARAM, STRING128)LAUNCH_CONFIG_PARAMETER_NAME:long_name = ”Name of configuration parameter at launch”; LAUNCH_CONFIG_PARAMETER_NAME:_FillValue = ” “; \nName of the configuration parameter; pre-deployment or launch settings.See reference tables 18a and 18b (https://vocab.nerc.ac.uk/collection/R18/) for standard configuration parameter names.Example : “CONFIG_ParkPressure_dbar”\n\n\nLAUNCH_CONFIG_PARAMETER_VALUE \nfloat (for standard Argo floats) or can use double if applicable (e.g.BGC-Argo float)  LAUNCH_CONFIG_PARAMETER_VALUE(N_LAUNCH_CONFIG_PARAM)LAUNCH_CONFIG_ PARAMETER_VALUE:long_name = ”Value of configuration parameter at launch”;LAUNCH_CONFIG_ PARAMETER_VALUE:_FillValue = 99999.f; \nValue of the configuration parameter; either pre-deployment or launch settings.Example : 1500 \n\n\nCONFIG_PARAMETER_NAME \nchar CONFIG_PARAMETER_NAME(N_CONFIG_PARAM, STRING128)CONFIG_PARAMETER_NAME:long_name = ”Name of configuration parameter”; CONFIG_PARAMETER_NAME:_FillValue = ” “; \nName of the configuration parameter; mission settings.See reference tables 18a and 18b (https://vocab.nerc.ac.uk/collection/R18/) for standard configuration parameter names.Example : “CONFIG_ParkPressure_dbar” \n\n\nCONFIG_PARAMETER_VALUE \nfloat (for standard Argo floats) or can use double if applicable (e.g.BGC-Argo float) CONFIG_PARAMETER_VALUE(N_MISSIONS, N_CONFIG_PARAM)CONFIG_ PARAMETER_VALUE:long_name = ”Value of configuration parameter”;CONFIG_ PARAMETER_VALUE:_FillValue = 99999.f; \nValue of the configuration parameter; mission settings.Example : 1500 \n\n\nCONFIG_MISSION_NUMBER \nint CONFIG_MISSION_NUMBER(N_MISSIONS);CONFIG_MISSION_NUMBER:long_name = “Unique number denoting the missions performed by the float”;CONFIG_MISSION_NUMBER:conventions = “1…N, 1 : first complete mission”;CONFIG_MISSION_NUMBER:_FillValue = 99999; \nUnique number of the mission to which this profile belongs.See note on floats with multiple configurations §2.4.6.1.The number 0 (zero) can be used to denote the float’s mission prelude, if it exists.\n\n\nCONFIG_MISSION_COMMENT \nchar CONFIG_MISSION_COMMENT(N_MISSIONS, STRING256)CONFIG_MISSION_COMMENT:long_name = ”Comment on configuration”;CONFIG_MISSION_COMMENT:_FillValue = ” “;\nComment on this configuration mission.Example : “This mission follows a 1000 dbar meddie during parking” \n\n\n\nThe mission settings or parameter values are recorded as numbers.In this scheme, strings will need to be converted to numbers and will require measurement codes for the relevant parameters.The numeric codes for the affected parameters are defined in the “Explanation” section of the Configuration parameter names table (please see reference tables 18a and 18b - https://vocab.nerc.ac.uk/collection/R18/).Only a few existing parameters are affected.If new floats with new configuration parameters (as strings) are introduced, then equivalent numeric flags must also be added to the table by the proposer of the new configuration parameter. All parameter names are standardized and are available in the online reference tables 18a and 18b: http://www.argodatamgt.org/DocumentationThere are two configuration tables: one for Core Argo configuration parameters (reference table 18a) and one for floats with BGC-Argo sensors (reference table 18b).If you are a new user or have only standard Argo floats you should first check table 18a which has the basic set of configuration parameters that caters for most of the standard float types.If your float carries additional BGC-Argo sensors you will also need to refer to table 18b.Please send requests for new configuration parameter names for Core Argo floats to John Gilson (jgilson@ucsd.edu).Requests for configuration parameter names for BGC-Argo variables should be sent to Catherine Schmechtig (catherine.schmechtig@imev-mer.fr).The mission is used to record information that changes from cycle to cycle, for instance when a float changes its mission from 3 shallow profiles to 1 deep profile.The shallow and deep profiles will have different mission numbers.The value of the mission number is recorded in CONFIG_MISSION_NUMBER.Configuration parameters are separated into two types. 1).Pre-deployment or launch configuration parameters that are the ‘configured’ start settings of the float and the initial mission configuration parameters for the first cycle.These parameters with the dimension N_LAUNCH_CONFIG_PARAM, are stored in LAUNCH_CONFIG_PARAMETER_NAME and LAUNCH_CONFIG_PARAMETER_VALUE.2).After deployment,configuration parameters define float behavior for each mission, including all applicable mandatory and highly-desirable parameters and any other parameters that change during the life of the float are reported as mission settings.These parameters with the dimension N_CONFIG_PARAM, need to be reported in the CONFIG_PARAMETER_NAME and CONFIG_PARAMETER_VALUE variables.The mission parameters for the first cycle must also be reported in the launch section. The parameter CONFIG_MISSION _COMMENT can be used to store information about the mission or whether the mission was set pre-deployment or transmitted by the float (free form field). \n\n3.4.5.1 Note on floats with multiple missions\nTypically, an Argo float configuration is valid for the whole life of the float.Each cycle is repeated with the same behavior (one configuration). However, some floats may be configured to change their behavior from cycle to cycle (multiple configurations). When there is only one configuration, CONFIG_MISSION_NUMBER is set to 1: all the cycles are programmed to be the same.Note that in this case; floats will still have a set of pre-deployment/launch configuration information that contains all the start settings for the float.So for a float with one basic mission, it will have launch configuration parameters and mission 1 configuration parameters (typically just the mission critical subset).When there are multiple configurations, the configuration from the first cycle has CONFIG_MISSION_NUMBER set to 1.Each subsequent configuration change will be recorded as additional entries in CONFIG_MISSION_NUMBER, with the value increased sequentially by the integer one.All variables from mission 1 must be repeated in subsequent missions.Floats with multiple configurations still record pre-deployment or launch information in: LAUNCH_CONFIG_PARAMETER_NAME and LAUNCH_CONFIG_PARAMETER_VALUE.  Argo best practice, and our recommendation to users, is a minimum of configuration missions.  If there is a change to one or more of the configuration parameters that does not repeat a previous configuration then a new mission number must be used.If the configuration parameters change, but mirror a previous mission then that mission number should be re-used.In extremely complex cases where mission changes are unclear, then a new mission number can be used for each cycle.Users should be aware that the metafile will need to be rewritten each time a new mission number is added.Some floats conduct a pressure-activated test mission after deployment (i.e.some SOLO floats) where they essentially ‘wake-up’ at depth and return to the surface.This is not a normal mission in any way, and the floats do not use their configuration parameters in this first ‘test’ cycle.In this case you would assign a fill value to CONFIG_MISSION_NUMBER.\n\n\n3.4.5.2 Determining which mission applies to a particular float cycle\nUsers are able to determine which mission applies to each cycle by looking at the CONFIG_MISSION_NUMBER(N_CYCLE) variable in the trajectory files, and the CONFIG_MISSION_NUMBER(N_PROF) variable in the profile files.\nSee section “§2.2.4 General information for each profile” and “§2.3.6 N_CYCLE dimension variable group”). ExampleIn the above example, there are 3 different float behaviors to record, (with park depth varying between 1500, 2000 and 1700 db).Each of these new behaviors requires a new mission number.This is in addition to the pre-deployment or launch information: CONFIG_PARAMETER_NAME = “CONFIG_ParkPressure_dbar”\nCONFIG_PARAMETER_VALUE = “1500”\nCONFIG_MISSION_NUMBER = 1CONFIG_PARAMETER_NAME = “CONFIG_ParkPressure_dbar”\nCONFIG_PARAMETER_VALUE = “2000”\nCONFIG_MISSION_NUMBER = 2CONFIG_PARAMETER_NAME = “CONFIG _ParkPressure_dbar”\nCONFIG_PARAMETER_VALUE = “1700”\nCONFIG_MISSION_NUMBER = 3A further example for a float with multiple missions and changes to multiple configuration parameters is shown below. In this example there are 11 pre-deployment/launch configuration parameters for this float which are set before launch.Of this set, the last four are mission critical parameters that change and control float behavior; these  are reported in subsequent missions (missions 1 to n).For this float, the depth at which the float parks, changes in missions 2 and 3 (with changes in two configuration parameters).For mission 4, the park depth stays the same as for mission 3 but now the park sampling period has changed.For mission 5, the park sampling period changes again.All configuration parameters from mission 1 must still be reported for each subsequent mission, even those that do not change.\n\n\n\n\n\n\n\nConfiguration parameter names from reference table 18a or 18bLAUNCH_CONFIG_PARAMETER_NAME(N_LAUNCH_CONFIG_PARAM,STRING128)* N_LAUNCH_CONFIG_PARAM = int value  \nPre-deployment or launch configuration settingsLAUNCH_CONFIG_PARAMETER_VALUE(N_LAUNCH_CONFIG_PARAM) * float or double depending on data type \n\n\n\n\nCONFIG_PistonPositionPressureActivation_COUNT \n100 \n\n\nCONFIG_Direction_NUMBER \n1* \n\n\nCONFIG_AscentToSurfaceTimeout_hours \n3 \n\n\nCONFIG_MissionPreludeTime_hours \n3 \n\n\nCONFIG_MeasureBattery_LOGICAL \n0** \n\n\nCONFIG_IceDetection_DegC \n-1.78 \n\n\nCONFIG_CycleTime_hours \n240 \n\n\nCONFIG_ParkPressure_dbar \n1000 \n\n\nCONFIG_ProfilePressure_dbar \n2000 \n\n\nCONFIG_ParkSamplingPeriod_hours \n10 \n\n\nCONFIG_PistonPark_COUNT \n111 \n\n\n… \n… \n\n\n\n(*): 1 = Ascending, 2 = Descending(**): 0 = No, 1 = Yes\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration parameter names (from reference table 18a or 18b)CONFIG_PARAMETER_NAME(N_CONFIG_PARAM,STRING128)\nMission configuration settings at seaCONFIG_PARAMETER_VALUE(N_MISSIONS,N_CONFIG_PARAM)\n\n\n\n\n\n\n\n\n\nCONFIG_MISSION_NUMBER \n1 \n2 \n3 \n4 \n5 \n… \n\n\nCONFIG_ParkPressure_dbar \n1000 \n1500 \n1700 \n1700 \n1000 \n… \n\n\nCONFIG_ProfilePressure_dbar\n2000 \n2000 \n2000 \n2000 \n2000 \n… \n\n\nCONFIG_ParkSamplingPeriod_hours \n10\n10 \n10 \n15 \n17\n… \n\n\nCONFIG_PistonPark_COUNT \n111 \n75 \n53 \n53 \n45 \n… \n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n\n\n\n3.4.5.3 Highly desirable configuration parameters\nHighly desirable configuration parameters should be correctly filled according to the following table.\n\n\n\n\n\n\n\n\nHighly desirable configuration parameter \nFormat \nExample \n\n\n\n\nCONFIG_CycleTime_hoursCONFIG_CycleTime_days\nDuration of a cycle\n240\n\n\nCONFIG_ParkPressure_dbar\nPark pressure\n1900\n\n\nCONFIG_ProfilePressure_dbar\nProfile pressure\n2000\n\n\n\n\n\n\n3.4.6 Float sensor and parameter information\nA sensor is a device used to measure a physical parameter.Sensor outputs are provided in parameter counts and need to be converted into parameter physical units using a calibration equation.This conversion can be done onboard the float or during the decoding process.A parameter is a measurement of a physical phenomenon; it can be provided by a sensor (in sensor counts or in physical units) or computed (derived) from other parameters.A sensor can measure 1 to N parameter(s).A parameter can be measured by 1 or N sensor(s).\n\n3.4.6.1 Float sensor information\nThis section contains information about the sensors of the profiler.A list of standardized Argo sensor names is given in reference table 25 (https://vocab.nerc.ac.uk/collection/R25/).Each ocean state parameter recorded in an Argo profile or trajectory file must be considered its own sensor in this context. This is necessary to record the sensor serial numbers, etc. Thus a CTD which records PRES, TEMP, and PSAL should be considered 3 separate sensors (CTD_PRES, CTD_TEMP, CTD_CNDC respectively), as all 3 parameters are reported in the Argo profile and trajectory files. In comparison, an OPTODE only has DOXY reported in Argo NetCDF files, thus it should be considered a single sensor (OXYGEN_OPTODE or OXYGEN_ELECTROCHEMICAL) even though the sensor also reports TEMP_DOXY. All intermediate variables that do not appear in the core Argo files, even though they may appear in the ‘raw’ form (i.e.in the BGC-Argo B-file), do not have to be listed as a separate sensor. This is especially true if there is not a unique serial number for the sensor.\n\n\n\nName\nDefinition \nComment\n\n\n\n\nSENSOR \nchar SENSOR(N_SENSOR, STRING32);SENSOR:long_name = “Name of the sensor mounted on the float”;SENSOR:conventions = “Argo reference table 25”;SENSOR:_FillValue = ” “; \nNames of the sensors mounted on the floatExample: CTD_PRES, CTD_TEMP, CTD_CNDC, OPTODE_DOXY.Valid SENSOR are listed in reference table R25 https://vocab.nerc.ac.uk/collection/R25/.\n\n\nSENSOR_MAKER\nchar SENSOR_MAKER(N_SENSOR, STRING256);SENSOR_MAKER:long_name = “Name of the sensor manufacturer”;SENSOR_MAKER:conventions = “Argo reference table 26”;SENSOR_MAKER:_FillValue = ” “;\nName of the manufacturer of the sensor.Example : DRUCK, SBE, AANDERAA.Valid SENSOR_MAKER are listed in reference table R26 https://vocab.nerc.ac.uk/collection/R26/.\n\n\nSENSOR_MODEL \nchar SENSOR_MODEL(N_SENSOR, STRING256);SENSOR_MODEL:long_name = “Type of sensor”;SENSOR_MODEL:conventions = “Argo reference table 27”;SENSOR_MODEL:_FillValue = ” “; \nName of the model of the sensor, as defined by the sensor manufacturer.Example: DRUCK, SBE41CP, AANDERAA_OPTODE_3930.Valid SENSOR_MODEL are listed in reference table R27 https://vocab.nerc.ac.uk/collection/R27/\n\n\nSENSOR_SERIAL_NO \nchar SENSOR_SERIAL_NO(N_SENSOR, STRING16);SENSOR_SERIAL_NO:long_name = “Serial number of the sensor”;SENSOR_SERIAL_NO:_FillValue = ” “; \nSerial number of the sensor.Example : 2646 036 073\n\n\nSENSOR_FIRMWARE_VERSION\nchar SENSOR_FIRMWARE_VERSION (N_SENSOR, STRING32)SENSOR_FIRMWARE_VERSION :long_name = “Firmware version of the sensor”;SENSOR_FIRMWARE_VERSION :_FillValue = ” “;\nThis is an optional variable. Firmware version of the sensor.Example: 1.141\n\n\n\n\n\n3.4.6.2 Float parameter information\nThis section contains information about the parameters measured by the profiler or derived from profiler measurements.\n\n\n\nName \nDefinition \nComment \n\n\n\n\nPARAMETER \nchar PARAMETER(N_PARAM, STRING64);PARAMETER:long_name = “Name of parameter computed from float measurements”;PARAMETER:conventions = “Argo reference table 3”;PARAMETER:_FillValue = ” “;\nNames of the parameters measured by float sensors or derived from float measurements.The parameter names are listed in reference table 3 (https://vocab.nerc.ac.uk/collection/R03/).Examples :TEMP, PSAL, CNDCTEMP : temperature in CelsiusPSAL : practical salinity in psuCNDC : conductivity in mhos/m \n\n\nPARAMETER_SENSOR\nchar PARAMETER_SENSOR(N_PARAM, STRING128);PARAMETER:long_name = “Name of the sensor that measures this parameter”;PARAMETER:conventions = “Argo reference table 25”;PARAMETER:_FillValue = ” “;\nNames of the sensors that measured the float parameters.See Argo reference table 25 (https://vocab.nerc.ac.uk/collection/R25/).Example: CTD_PRES, CTD_TEMP, CTD_CNDC, OXYGEN_OPTODE.\n\n\nPARAMETER_UNITS\nchar PARAMETER_UNITS(N_PARAM, STRING32);PARAMETER_UNITS:long_name = “Units of accuracy and resolution of the parameter”;PARAMETER_UNITS:_FillValue = ” “;\nUnits of accuracy and resolution of the parameter.Example : psu \n\n\nPARAMETER_ACCURACY \nchar PARAMETER_ACCURACY(N_PARAM, STRING32);PARAMETER_ACCURACY:long_name = “Accuracy of the parameter”;PARAMETER_ACCURACY:_FillValue = ” “;\nAccuracy of the parameter.Example: “8 micromole/l or 5%”\n\n\nPARAMETER_RESOLUTION \nchar PARAMETER_RESOLUTION(N_PARAM, STRING32);PARAMETER_RESOLUTION:long_name = “Resolution of the parameter”;PARAMETER_RESOLUTION:_FillValue =” “;\nResolution of the parameter returned by the sensor (note that this is not necessarily equivalent to the resolution of the parameter returned by the float through telemetry).Example : 0.001 micromole/l \n\n\n\n\n\n\n3.4.7 Float calibration information\nThis section contains information about the calibration of the profiler.The calibration described in this section is an instrumental calibration.The delayed mode calibration, based on a data analysis, is described in the profile format.The PREDEPLOYMENT_CALIB_* parameters in the table below link to the PARAMETER variable listed in 1.1.7.2.It is critical that these are ordered in the same way so that calibration information is assigned to the correct parameter.\n\n\n\n\n\n\n\n\nName \nDefinition\nComment\n\n\n\n\nPREDEPLOYMENT_CALIB _EQUATION \nchar PREDEPLOYMENT_CALIB_EQUATION(N_PARAM, STRING1024);PREDEPLOYMENT_CALIB_EQUATION:long_name = “Calibration equation for this parameter”;PREDEPLOYMENT_CALIB_EQUATION:_FillValue = ” “;\nCalibration equation for this parameter.Example : Tc = a1 * T + a0\n\n\nPREDEPLOYMENT_CALIB_COEFFICIENT \nchar PREDEPLOYMENT_CALIB_COEFFICIENT(N_PARAM, STRING1024); PREDEPLOYMENT_CALIB_COEFFICIENT:long_name = “Calibration coefficients for this equation”;PREDEPLOYMENT_CALIB_COEFFICIENT:_FillValue = ” “;\nCalibration coefficients for this equation.Example : a1=0.99997 , a0=0.0021\n\n\nPREDEPLOYMENT_CALIB_COMMENT\nchar PREDEPLOYMENT_CALIB_COMMENT(N_PARAM, STRING1024);PREDEPLOYMENT_CALIB_COMMENT:long_name = “Comment applying to this parameter calibration”; PREDEPLOYMENT_CALIB_COMMENT:_FillValue = ” “;\nComments applying to this parameter calibration. \n\n\n\n\n\n3.4.8 Mandatory metadata parameters\nPart of the highly desirable metadata were made mandatory and are listed under this section.| | | |\n\n\n\nMandatory metadata \nMandatory format \nExample \n\n\n\n\nBATTERY_TYPE\nManufacturer from reference table 29 (not yet on the NVS).Type to include “Alkaline” or “Lithium” or “Hybrid” and total voltage \nBATTERY_TYPE  = “Manufacturer Alkaline x V”  or “Manufacturer Lithium x V + Manufacturer Alkaline x V”;\n\n\nCONTROLLER_BOARD_SERIAL_NO_PRIMARY\nnot empty\nCONTROLLER_BOARD_SERIAL_NO_PRIMARY = “4567”\n\n\nCONTROLLER_BOARD_TYPE_PRIMARY\nfirst part of string: see reference table 28 (https://vocab.nerc.ac.uk/collection/R28/).Remainder of string free text and contained in square brackets [].\nCONTROLLER_BOARD_TYPE_PRIMARY = “APF9 [iridium version xyz]”;\n\n\nDAC_FORMAT_ID\nnot empty\nDAC_FORMAT_ID = “11”;\n\n\nDATA_CENTRE \nsee reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).\nDATA_CENTRE = “AO”; \n\n\nDATA_TYPE \n“Argo meta-data”; \nDATA_TYPE = “Argo meta-data”; \n\n\nDATE_CREATION  \nYYYYMMDDHHMISS \nDATE_CREATION = “20040210124422”; \n\n\nDATE_UPDATE  \nYYYYMMDDHHMISS \nDATE_UPDATE = “20040210124422”; \n\n\nFIRMWARE_VERSION\nif exists then not empty otherwise default value = “n/a”\nFIRMWARE_ VERSION = “042606”;\n\n\nFLOAT_SERIAL_NO\nnot empty\nFLOAT_SERIAL_NO = “1679”\n\n\nFORMAT_VERSION\n“2.2”; \nFORMAT_VERSION = “2.2”; \n\n\nHANDBOOK_VERSION \n“1.2”; \nHANDBOOK_VERSION = “1.2”; \n\n\nLAUNCH_DATE  \nYYYYMMDDHHMISS \nLAUNCH_DATE = “20010717000100”; \n\n\nLAUNCH_LATITUDE \nnot empty, -90 &lt;= real &lt;= 90 \nLAUNCH_LATITUDE = -7.91400003433228; \n\n\nLAUNCH_LONGITUDE \nnot empty, -180 &lt;= real &lt;= 180 \nLAUNCH_LONGITUDE = -179.828338623047; \n\n\nLAUNCH_QC \nsee reference table 2 (https://vocab.nerc.ac.uk/collection/RR2/, https://vocab.nerc.ac.uk/collection/RD2/).\nLAUNCH_QC = “1”; \n\n\nMANUAL_ VERSION\nif exists then not empty otherwise default value = “n/a”\nMANUAL_ VERSION = “004” or “041708”\n\n\n\n\n\n\n\nPI_NAME\nnot empty\nPI_NAME = “Julia UITZ”;\n\n\nPLATFORM_FAMILY\nsee reference table 22 (https://vocab.nerc.ac.uk/collection/R22/).\nPLATFORM_FAMILY = “subsurface profiling float”, “ITP”, “POPS”;\n\n\nPLATFORM_MAKER\nsee reference table 24 (https://vocab.nerc.ac.uk/collection/R24/). \nPLATFORM_MAKER = “Optimare”;\n\n\nPLATFORM_NUMBER\nIIIII or A9IIIII\nPLATFORM_NUMBER = “5900077”;\n\n\nPLATFORM_TYPE\nsee reference table 23 (https://vocab.nerc.ac.uk/collection/R23/).\nPLATFORM_TYPE = “SOLO” or “APEX” or “PROVOR”; \n\n\nPOSITIONING_SYSTEM \nsee reference table 9 (https://vocab.nerc.ac.uk/collection/R09/).\nPOSITIONING_SYSTEM = “ARGOS”; \n\n\nPREDEPLOYMENT_CALIB_COEFFICIENT\nif exists then not empty otherwise default value = “n/a”\nPREDEPLOYMENT_CALIB_COEFFICIENT  = “ser# = 3016 temperature coeffs: A0 =  -0.0000 A1 =   0.0003 A2 =  -0.0000 A3 =   0.0000”;\n\n\nPREDEPLOYMENT_CALIB_EQUATION\nif exists then not empty otherwise default value = “n/a”\nPREDEPLOYMENT_CALIB_EQUATION = “Temperature ITS-90 = 1/ { a0 + a1[lambda nu (n)] + a2 [lambda nu^2 (n)] + a3 [lambda nu^3 (n)]} - 273.15 (deg C)”;\n\n\nPTT \nif exists then not empty otherwise default value = “n/a”\nPTT = “23978”; \n\n\nSENSOR\nsee reference table 25 (https://vocab.nerc.ac.uk/collection/R25/).\nSENSOR = “CTD_TEMP”, “CTD_PRES”, “CTD_CNDC”, “OXYGEN_OPTODE”;\n\n\nSENSOR_MAKER\nsee reference table 26 (https://vocab.nerc.ac.uk/collection/R26/).\nSENSOR_MAKER = “SEABIRD”;\n\n\nSENSOR_MODEL\nsee reference table 27 (https://vocab.nerc.ac.uk/collection/R27/).\nSENSOR_MODEL = “SBE41”\n\n\nSENSOR_SERIAL_NO\nnot empty\nSENSOR_SERIAL_NO = “6785”;\n\n\nPARAMETER\nnot empty, see reference table 3  (https://vocab.nerc.ac.uk/collection/R03/).\nPARAMETER = “TEMP”, “PRES”, ”CNDC”;\n\n\nPARAMETER_UNITS\nnot empty\nPARAMETER _UNITS = “degree_Celsius”, “decibar”, “mhos/m”;\n\n\nPARAMETER_SENSOR\nnot empty\nPARAMETER_SENSOR = “CTD_TEMP”, “OXYGEN_OPTODE”;\n\n\nSTANDARD_FORMAT_ID\nreference table available online https://docs.google.com/spreadsheets/d/16iTji2i9tLh2PfiiMItfhaQybQB1NLAhj4s0mDML5yY/edit#gid=9\nSTANDARD_FORMAT_ID = “1010151”;\n\n\nTRANS_FREQUENCY\nif exists then not empty otherwise default value = “n/a”\nTRANS_FREQUENCY = “1/44”;\n\n\nTRANS_SYSTEM \nsee reference table 10 (https://vocab.nerc.ac.uk/collection/R10/).\nTRANS_SYSTEM = “ARGOS”; \n\n\nTRANS_SYSTEM_ID \nIf exists not empty, otherwise = “n/a”\nTRANS_SYSTEM_ID = “14281”; \n\n\nWMO_INST_TYPE\nnot empty\nWMO_INST_TYPE = “846”;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#technical-information-format-version-3.1",
    "href": "chapter2.html#technical-information-format-version-3.1",
    "title": "3  Formats description",
    "section": "3.5 Technical information format version 3.1",
    "text": "3.5 Technical information format version 3.1\nThe format version 3.1 of Argo technical data will replace versions 2.3 and 2.2 gradually.During the transition period, both formats will be valid.However, when a Data Assembly Center (DAC) produces technical files with the new 3.1 format, all its technical files must be provided in version 3.1.An Argo technical file contains technical information from an Argo float.This information is registered for each cycle performed by the float.The number and the type of technical information is different from one float model to another.To be flexible, for each cycle, the name of the parameters and their values are recorded.The name of the parameters recorded may therefore change from one model of float to another.See Argo reference table 14 (https://vocab.nerc.ac.uk/collection/R14/).For file naming conventions, see §4.1.6.\n\n3.5.1 Global attributes\nThe global attributes section is used for data discovery.It complies with NetCDF Climate and Forecast (CF) Metadata Conventions (version 1.6).* http://cfconventions.org/ // global attributes::title = “Argo float technical data file”;:institution = “CSIRO”;:source = “Argo float”;:history = “2011-04-22T06:00:00Z creation”;:references = “http://www.argodatamgt.org/Documentation”;:comment = “free text”;:user_manual_version = “3.4”;:Conventions = “Argo-3.1 CF-1.6”;\n\n\n\n\n\n\n\nGlobal attribute name\nDefinition\n\n\n\n\ntitle\nA succinct description of what is in the dataset.\n\n\ninstitution\nSpecifies where the original data was produced.\n\n\nsource\nThe method of production of the original data.If it was model-generated, source should name the model and its version, as specifically as could be useful.If it is observational, source should characterize it (e.g., “surface observation” or “radiosonde”).\n\n\nhistory\nProvides an audit trail for modifications to the original data.Well-behaved generic NetCDF filters will automatically append their name and the parameters with which they were invoked to the global history attribute of an input NetCDF file.We recommend that each line begin with a timestamp indicating the date and time of day that the program was executed.\n\n\nreferences\nPublished or web-based references that describe the data or methods used to produce it.\n\n\ncomment\nMiscellaneous information about the data or methods used to produce it.\n\n\nuser_manual_version\nThe version number of the user manual\n\n\nConventions\nThe conventions supported by this file, blank separated\n\n\n\n\n\n3.5.2 Dimensions and definitions\n\n\n\n\n\n\n\n\nName\nDefinition\nComment\n\n\n\n\nDATE_TIME\nDATE_TIME = 14;\nThis dimension is the length of an ASCII date and time value.Date and time values are always in universal time coordinates (UTC).Date_time convention is : YYYYMMDDHHMISSYYYY : yearMM : monthDD : dayHH : hour of the dayMI : minutesSS : secondsExamples : 20010105172834 : January 5th 2001 17:28:3419971217000000 : December 17th 1997 00:00:00\n\n\nSTRING128,STRING32 STRING8 STRING4 STRING2\nSTRING128   =  128; STRING32   =  32;STRING8     =   8;STRING4     =   4;STRING2     =   2;\nString dimensions from 2 to 128.\n\n\nN_TECH_PARAM\nN_TECH_PARAM = UNLIMITED;\nNumber of technical parameters.\n\n\nN_TECH_MEASUREMENT\nN_TECH_MEASUREMENT\nThis optional dimension reports the number of recorded technical dated information of the file.\n\n\n\n\n\n3.5.3 General information on the technical data file\nThis section contains information about the technical data file itself.\n\n\n\nName\nDefinition\nComment\n\n\n\n\nPLATFORM_NUMBER\nchar PLATFORM_NUMBER(STRING8);PLATFORM_NUMBER:long_name = “Float unique identifier”;PLATFORM_NUMBER:conventions = “WMO float identifier : A9IIIII”;PLATFORM_NUMBER:_FillValue = ” “;\nWMO float identifier.WMO is the World Meteorological Organization.This platform number is unique.Example : 6900045\n\n\nDATA_TYPE\nchar DATA_TYPE(STRING32);DATA_TYPE:long_name = “Data type”;DATA_TYPE:conventions = “Argo reference table 1”;DATA_TYPE:_FillValue = ” “;\nThis field contains the type of data contained in the file.The list of acceptable data types is in the reference table 1 (https://vocab.nerc.ac.uk/collection/R01/).Example : “Argo technical data”\n\n\nFORMAT_VERSION\nchar FORMAT_VERSION(STRING4);FORMAT_VERSION:long_name = “File format version”;FORMAT_VERSION:_FillValue = ” “;\nFile format versionExample : «3.1»\n\n\nHANDBOOK_VERSION\nchar HANDBOOK_VERSION(STRING4);HANDBOOK_VERSION:long_name = “Data handbook version”;HANDBOOK_VERSION:_FillValue = ” “;\nVersion number of the data handbook.This field indicates that the data contained in this file are managed according to the policy described in the Argo data management handbook.Example : «1.0»\n\n\nDATA_CENTRE\nchar DATA_CENTRE(STRING2);DATA_CENTRE:long_name = “Data centre in charge of float data processing”;DATA_CENTRE:conventions = “Argo reference table 4”;DATA_CENTRE:_FillValue = ” “;\nCode of the data centre in charge of the float data management.The data centre codes are described in the reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).Example : ME for MEDS\n\n\nDATE_CREATION\nchar DATE_CREATION(DATE_TIME);DATE_CREATION:long_name = “Date of file creation”;DATE_CREATION:conventions = “YYYYMMDDHHMISS”;DATE_CREATION:_FillValue = ” “;\nDate and time (UTC) of creation of this file.Format : YYYYMMDDHHMISSExample :20011229161700 : December 29th 2001 16 :17 :00 \n\n\nDATE_UPDATE\nchar DATE_UPDATE(DATE_TIME);DATE_UPDATE:long_name = “Date of update of this file”;DATE_UPDATE:conventions = “YYYYMMDDHHMISS”;DATE_UPDATE:_FillValue = ” “;\nDate and time (UTC) of update of this file.Format : YYYYMMDDHHMISSExample :20011230090500 : December 30th 2001 09 :05 :00\n\n\n\n\n\n3.5.4 Technical data\nThis section contains a set of technical data for each profile.For each cycle, for each technical parameter, the name of the parameter and the value of the parameter are recorded.The parameter name and its value are recorded as strings of 128 characters.All parameter names are standardized and available in reference table 14 (https://vocab.nerc.ac.uk/collection/R14/).\n\n\n\nName\nDefinition\nComment\n\n\n\n\nTECHNICAL_PARAMETER_NAME\nchar TECHNICAL_PARAMETER_NAME(N_TECH_PARAM, STRING128)TECHNICAL_PARAMETER_NAME:long_name=”Name of technical parameter”;TECHNICAL_PARAMETER_NAME:_FillValue = ” “;\nName of the technical parameter.Example :“CLOCK_FloatTime_HHMMSS”See reference table 14a (https://vocab.nerc.ac.uk/collection/R14/) for standard technical parameter names.\n\n\nTECHNICAL_PARAMETER_VALUE\nchar TECHNICAL_PARAMETER_VALUE(N_TECH_PARAM, STRING128)TECHNICAL_PARAMETER_VALUE:long_name=”Value of technical parameter”;TECHNICAL_PARAMETER_VALUE:_FillValue = ” “;\nValue of the technical parameter.Example :“125049”\n\n\nCYCLE_NUMBER\nint CYCLE_NUMBER(N_TECH_PARAM);CYCLE_NUMBER:long_name = “Float cycle number”;CYCLE_NUMBER:conventions = “0…N, 0 : launch cycle (if exists), 1 : first complete cycle”;CYCLE_NUMBER:_FillValue = 99999;\nCycle number of the technical parameter.Example : 157\n\n\n\n\n\n\nName\nDefinition\nComment\n\n\n\n\nJULD\ndouble JULD(N_TECH_MEASUREMENT)JULD:long_name = “Julian day (UTC) of each measurement”;JULD:standard_name = “time”;JULD:units = “days since 1950-01-01 00:00:00 UTC”;JULD:conventions = “Relative julian days with decimal part (as parts of day)”;JULD:_FillValue = 999999.;JULD:axis = “T”;\nJulian day of the measurement.The integer part represents the day, the decimal part represents the time of the measurement.Date and time are in universal time coordinates.Example :18833.8013889885 : July 25 2001 19:14:00\n\n\nCYCLE_NUMBER_MEAS\nint CYCLE_NUMBER_MEAS(N_TECH_MEASUREMENT)\nCycle number of the measurement.Example: 4\n\n\nMEASUREMENT_CODE\nint MEASUREMENT_CODE(N_TECH_MEASUREMENT)MEASUREMENT_CODE:long_name = “Flag referring to a measurement event in the cycle”;MEASUREMENT_CODE:conventions = “Argo reference table 15”;MEASUREMENT_CODE:_FillValue = 99999;\nFlag for each event in the cycle which corresponds to Argo reference table 15 (https://vocab.nerc.ac.uk/collection/R15/). Example:  100 : any measurements made at start of descent to drift pressure\n\n\n&lt;TECH_PARAM&gt;\nfloat &lt;TECH_PARAM&gt;(N_TECH_MEASUREMENT)&lt;TECH_PARAM&gt;:long_name=”&lt;X&gt;”;&lt;TECH_PARAM&gt;:units=”&lt;Y&gt;”;\nName of the technical parameter.All names of the reference table 14a are allowed (https://vocab.nerc.ac.uk/collection/R14/).&lt;X&gt; : use the description provided in the reference table 14a.&lt;Y&gt; : use the units part of the technical parameter name (units allowed list is http://www.argodatamgt.org/content/download/27456/187267/file/Table%20Tech%20and%20Conf%20Units%20V2.3.xlsx).Example :To store “VOLTAGE_Battery_volts” data, usefloat VOLTAGE_Battery(N_TECH_MEASUREMENT)&lt;TECH_PARAM&gt;:long_name=”battery voltage when battery capacity is unknown”;&lt;TECH_PARAM&gt;:units=”volts”;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#b-argo-profile-format-additional-features",
    "href": "chapter2.html#b-argo-profile-format-additional-features",
    "title": "3  Formats description",
    "section": "3.6 B-Argo profile format additional features",
    "text": "3.6 B-Argo profile format additional features\nA B-Argo profile/trajectory file contains all the parameters from a float, except the core-Argo parameters temperature, salinity, conductivity (TEMP, PSAL, CNDC).A float that performs only CTD measurements does not have B-Argo data files.To accommodate non-core parameters, a series of optional additions to core-Argo profile/trajectory formats are listed here.\n\n3.6.1 Pressure axis management in core-Argo and b-Argo profile files\nThis section contains information on pressure axis management for core-Argo and b-Argo profile and trajectory files.The vertical pressure levels PRES is the simple and unambiguous link between the parameters in the core- and b- profiles.The same PRES is recorded in the core-Argo and b-Argo profile files.PRES is the only parameter in Reference Table 3 (https://vocab.nerc.ac.uk/collection/R03/) duplicated in core-Argo and b-Argo profile files.The adjusted pressure parameter PRES_ADJUSTED is only available in the core-Argo profile files.\nThe variables PROFILE_PRES_QC, PRES_QC, PRES_ADJUSTED and PRES_ADJUSTED_ERROR are not duplicated in the b-Argo profile files.Some single-cycle profile files will contain multiple profiles with different vertical sampling schemes (N_PROF &gt; 1).In these cases, all parameters in the core-Argo and the b-Argo profile files will have the same N_PROF dimension, listed in the same order.The same set of vertical pressure levels (PRES with N_PROF &gt; 1) is duplicated in the core-Argo and b-Argo profile files.Other parameters (e.g.TEMP, PSAL) that are not measured in all vertical sampling schemes will be filled with FillValue in the respective N_PROF dimension.Users are reminded that the profile with N_PROF = 1 is required to be the Primary sampling profile.Please refer to Table 16 (https://vocab.nerc.ac.uk/collection/R16/) for detailed descriptions of the various vertical sampling schemes.ExampleSuppose a hypothetical float carries a high-resolution CTD sensor and a low-resolution nitrate sensor.In each single-cycle, this hypothetical float is configured to return a 2-dbar bin-averaged CTD profile to 1000 dbar with no corresponding nitrate measurements, and a discrete 250-dbar interval nitrate profile to 1000 dbar with no corresponding temperature and salinity measurements.The parameters in the resulting core-Argo and b-Argo profile files are formatted as follows for the two profiles in each cycle:In the core-Argo profile file,  N_PROF = 2, N_LEVELS = 500. PRES = [2, 4, 6, …………………………………1000]; = [250, 500, 750, 1000, FillValue, …………]. TEMP = [T2, T4, T6, ……………………….T1000]; = [FillValue, ………………………………..]. PSAL = [S2, S4, S6, ………………………..S1000]; = [FillValue, ………………………………..]. In the b-Argo profile file,  N_PROF = 2, N_LEVELS = 500. PRES = [2, 4, 6, …………………………………1000]; = [250, 500, 750, 1000, FillValue, ………….]. NITRATE = [FillValue, ………………………………..]; = [N250, N500, N750, N1000, FillValue, …]. Other intermediate nitrate variables in the b-file are omitted in this example.\n\n\n3.6.2 Management of multi-dimensional parameters\nObservations are usually one dimension variables, such as temperature or salinity.However, some sensors provide multi-dimensional variables.\nFor example, an optical sensor for Nitrate reports a spectrum of up to 41 values for each measurement, one per wavelength.When needed, an additional dimension is added to report the N sub-levels of spectrum observation performed on each level.The associated PARAM_QC dimension remains as (N_PROF, N_LEVELS).* float &lt;PARAM&gt;(N_PROF, N_LEVELS, N_VALUES);\n\nchar &lt;PARAM&gt;_QC(N_PROF, N_LEVELS);Example of 60 measurements of “RAW_DOWNWELLING_IRRADIANCE” parameter performed at each 41 wavelengths of an individual profile.* NPROF = 1\nN_LEVELS = 60\nN_VALUES41 = 41The N_VALUES## dimension is used only when it is necessary: if there is more than one value for each level (N_VALUES &gt; 1) and the ## equals the number of values present for a given variable.You can add more than one of these, with each variable referencing a different N_VALUES## if required.\n\n– | – |\nN_VALUES41 | N_VALUES41 = &lt;int value&gt; ; | Maximum number of parameter measurements sampled at a given pressure level.This dimension depends on the data set.Example : N_VALUES41 = 41 |\nTo describe wavelengths of the sensor (41 in the example), an attribute of the variable called wave_length_nanometer provides the list double RAW_DOWNWELLING_IRRADIANCE(N_PROF, N_LEVELS, N_VALUES41) ;RAW_DOWNWELLING_IRRADIANCE:long_name = “IRRADIANCE COUNTS FROM OCR SENSOR” ;RAW_DOWNWELLING_IRRADIANCE:standard_name = “TBD” ;RAW_DOWNWELLING_IRRADIANCE:_FillValue = 99999.;RAW_DOWNWELLING_IRRADIANCE:units = “counts” ;RAW_DOWNWELLING_IRRADIANCE:valid_min = “TBD” ;RAW_DOWNWELLING_IRRADIANCE:valid_max = “TBD” ;RAW_DOWNWELLING_IRRADIANCE:C_format = “%10.0f” ;RAW_DOWNWELLING_IRRADIANCE:FORTRAN_format = “F10.0” ;RAW_DOWNWELLING_IRRADIANCE:resolution = 1.;RAW_DOWNWELLING_IRRADIANCE:wave_length_nanometer = “115 132 149 166 183 200 217 234 251 268 285 302 319 336 353 370 387 404 421 438 455 472 489 506 523 540 557 574 591 608 625 642 659 676 693 710 727 744 761 778 795” ;\n\n\n3.6.3 Parameter variable type\nParameter values may be float or double.Some sensors provide values that cannot be stored as float, but have to be stored as double.In that case, a variable with the type “double” needs to be used instead of a “float” variable.These parameters are precursors to calculated parameters.They will not be adjusted or quality controlled (no record in history or calibration sections).Concerned variablesConcerned variables can occur in profile and trajectory files are: &lt;PARAM&gt; and HISTORY_PREVIOUS_VALUE.Example: MTIME: Fractional day of the individual measurement relative to JULD of the station.\n\n\n3.6.4 PARAMETER_DATA_MODE\nIn both the core- and b- profile files, the variable DATA_MODE(N_PROF) is not related to a specific parameter.The value of DATA_MODE(N_PROF) is set to ‘D’ when adjusted values for one or more PARAM in each N_PROF become available.In b-Argo profile files, there are additional biogeochemical parameters which can receive delayed-mode adjustments at different times.Therefore the variable PARAMETER_DATA_MODE(N_PROF, N_PARAM) is added to b-Argo profile files to indicate the data mode of each PARAM in each N_PROF.The adjusted section (&lt;PARAM&gt;_ADJUSTED, &lt;PARAM&gt;_ADJUSTED_QC and &lt;PARAM&gt;_ADJUSTED_ERROR) for each PARAM in each N_PROF should then be filled independently according to its PARAMETER_DATA_MODE.* For example, in a b-Argo profile file with DOXY and NITRATE, it is possible that PARAMETER_DATA_MODE = ’D’ for DOXY, and\n\nPARAMETER_DATA_MODE = ’R’ for NITRATE.In this case:* the adjusted section for DOXY should be filled with their adjusted values;\nthe adjusted section for NITRATE should be filled with FillValues.\n\n— | — |\nPARAMETER_DATA_MODE | char PARAMETER_DATA_MODE(N_ PROF, N_PARAM);PARAMETER_DATA_MODE:long_name = “Delayed mode or real time data”;PARAMETER_DATA_MODE:conventions = “R : real time; D : delayed mode; A : real time with adjustment”;PARAMETER_DATA_MODE:_FillValue = ” “; | Describe the data mode of the individual parameter :R : real time dataD : delayed mode dataA : real time data with adjusted values |\n\n\n3.6.5 N_PARAM management in b-Argo profile files\nFor floats that measure multiple biogeochemical parameters (N_PARAM &gt; 1) with multiple vertical sampling schemes (N_PROF &gt; 1), users are reminded that N_PARAM in the b-Argo profile files does not necessarily equal to the total count of all unique parameters in a single cycle.The definition of N_PARAM is the “Maximum number of parameters measured or calculated for a pressure sample.”The same definition applies when N_PROF &gt; 1.For example, a single-cycle b-Argo profile file has 3 vertical sampling schemes:* at N_PROF = 1, STATION_PARAMETERS = [PRES]: N_PARAM1 = 1;\n\nat N_PROF = 2, STATION_PARAMETERS = [PRES, DOXY, NITRATE]: N_PARAM2 = 3;\nat N_PROF = 3, STATION_PARAMETERS = [PRES, CHLA, BBP700, CDOM]: N_PARAM3 = 4.In this example, there are 6 unique parameters (PRES, DOXY, NITRATE, CHLA, BBP700, CDOM), but:* N_PARAM = maximum of (N_PARAM1, N_PARAM2, N_PARAM3) = 4.\n\n\n\n3.6.6 QC and ADJUSTED variables in b-Argo profile files\nIn core-Argo profile files, where PARAM = PRES, TEMP, PSAL (and sometimes CNDC), each PARAM has 5 associated variables in qc and adjusted variables that are used to record real-time qc test results and delayed-mode adjustment information:PARAM_QC, PROFILE_PARAM_QC, PARAM_ADJUSTED, PARAM_ADJUSTED_QC, and PARAM_ADJUSTED_ERROR.In b-Argo profile files, PARAM can be classified into 3 groups:* (a).B-Argo PARAM: these are the ocean state biogeochemical variables that will receive real-time qc tests and delayed-mode adjustments.They are stored in both the b-files and the GDAC merged files.\n\n(b).I-Argo PARAM: these are the intermediate biogeochemical variables that are only stored in the b-files.\n(c).PRES: this is the stand-alone vertical index that links the core- and b-files.The following are some clarification on what qc and adjusted variables to include in the b-files:* (a).B-Argo PARAM: All 5 associated qc and adjusted variables are mandatory for B-Argo PARAM in the b-files.\n(b).I-Argo PARAM: PARAM_QC and PROFILE_PARAM_QC are mandatory for I-Argo PARAM.PARAM_ADJUSTED, PARAM_ADJUSTED_QC and PARAM_ADJUSTED_ERROR are optional as a group; they must either all be present or all be absent.\n(c).PRES: the b-files do not contain any qc or adjusted variables for PRES.(See Section 2.6.1.)\n\n\n\n3.6.7 PARAMETER and PARAMETER_SENSOR need expansion\nIn B-Argo files text strings for PARAMETER and PARAMETER_SENSOR are extended from 16 to 64 or 128 characters to allow for more explicit names.Applicable variablesIn profile files: STATION_PARAMETERS, PARAMETER, HISTORY_PARAMETERIn trajectory files: TRAJECTORY_PARAMETERS, HISTORY_PARAMETERIn metadata files: PARAMETER size is set to 64, PARAMETER_SENSOR size is set to 128\n\n\n3.6.8 DATA_TYPE dimension extended from 16 to 32 characters\nB-Argo and Merged files DATA_TYPE dimension are extended from 16 to 32 characters.\n\n\n3.6.9 Predeployment calibration variable dimension\nThe PREDEPLOYMENT_CALIB_EQUATION,  PREDEPLOYMENT_CALIB_COEFFICIENT, PREDEPLOYMENT_CALIB_COMMENT string lengths are by default set to STRING1024.When necessary (such as for the Nitrate sensor), the string length is set to 4096.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter2.html#gdac-ftp-directory-file-format",
    "href": "chapter2.html#gdac-ftp-directory-file-format",
    "title": "3  Formats description",
    "section": "3.7 GDAC FTP directory file format",
    "text": "3.7 GDAC FTP directory file format\n\n3.7.1 Profile directory file format 2.0\nThe profile directory file describes all individual profile files of the GDAC ftp site. Its format is an auto descriptive ASCII with comma separated values. \nIt is located at the root of the GDACs ftp servers.\n\nftp://usgodae.org/pub/outgoing/argo/ \nftp://ftp.ifremer.fr/ifremer/argo/\n\nThe directory file contains:\n\nA header with a list of general information: title, description, project name, format version, date of update, ftp root addresses, GDAC node\nA table with a description of each file of the GDAC ftp site. This table is a comma separated list.\n\nIndex file naming convention\n\n./ar_index_global_prof.txt \n./ar_index_global_prof.txt.gz \n\n\n\n\n\n\n\nProfile directory format definition : ar_index_global_prof.txt\n\n\n# Title : Profile directory file of the Argo Global Data Assembly Center# Description : The directory file describes all individual  profile files of the argo GDAC ftp site.# Project : ARGO# Format version : 2.0# Date of update : YYYYMMDDHHMISS# FTP root number 1 :  ftp://ftp.ifremer.fr/ifremer/argo/dac # FTP root number 2 :  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node : CORIOLISfile,date,latitude,longitude,ocean,profiler_type,institution,date_update- file : path and file name on the ftp site. The file name contains the float number and the cycle number. Fill value : none, this field is mandatory\n\n\n\n\ndate : date of the profile, YYYYMMDDHHMISS Fill value : ” ” (blank)\nlatitude, longitude : location of the profile Fill value : 99999.\nocean : code of the ocean of the profile as described in reference table 13 Fill value : ” ” (blank)\nprofiler_type : type of profiling float as described in reference table 8 Fill value : ” ” (blank)\ninstitution : institution of the profiling float described in reference table 4 Fill value : ” ” (blank)\ndate_update : : date of last update of the file, YYYYMMDDHHMISS Fill value : ” ” (blank)Each line describes a file of the gdac ftp site.  |\n\n\n\n\n\n\n\nProfile directory format example\n\n\n# Title : Profile directory file of the Argo Global Data Assembly Center# Description : The directory file describes all profile files of the argo GDAC ftp site.# Project : ARGO# Format version : 2.0# Date of update : 20031028075500# FTP root number 1 :  ftp://ftp.ifremer.fr/ifremer/argo/dac# FTP root number 2 :  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node : CORIOLISfile,date,latitude,longitude,ocean,profiler_type,institution,date_updateaoml/13857/profiles/R13857_001.nc,199707292003,0.267,-16.032,A,0845,AO,20030214155117aoml/13857/profiles/R13857_002.nc,199708091921,0.072,-17.659,A,0845,AO,20030214155354aoml/13857/profiles/R13857_003.nc,199708201845,0.543,-19.622,A,0845,AO,20030214155619…jma/29051/profiles/R29051_025.nc,200110250010,30.280,143.238,P,846,JA,20030212125117jma/29051/profiles/R29051_026.nc,200111040004,30.057,143.206,P,846,JA,20030212125117\n\n\n\n \nNote on date or position with a bad quality control flag in index files\nWhen the POSITION_QC or JULD_QC of the profile is 3 or 4 (probably bad, bad), the position is reported as missing in the “profile directory file”.  Note that in this case, the position in core-argo file differs from the position in the directory file.”\nIn the index file, a missing date or position is set to “,,” (empty element).\n\n\n3.7.2 Profile directory file format version 2.1** \nThe profile directory file describes all individual profile files of the GDAC ftp site. Its format is an auto descriptive ASCII with comma separated values. \nThis directory file format is more detailed than the previous version 2.0, it will eventually replace it.\nThe directory file contains:\n\nA header with a list of general information: title, description, project name, format version, date of update, ftp root addresses, GDAC node\nA table with a description of each file of the GDAC ftp site. This table is a comma-separated list.\n\nThe detailed index file is limited to the core mission “Argo sampling scheme” : temperature, salinity and oxygen observations.\nCompression of the profile directory file\nThe profile directory file is compressed with gzip.\nMD5 signature \nFor each update of the directory file, an MD5 signature is produced. The MD5 signature file allows the user to check that the file she/he collected through FTP is identical to the original file.\nIndex file naming convention\n\netc/argo_profile_detailled_index.txt.gz\netc/argo_profile_detailled_index.txt.gz.md5\n\nDetailed profile directory format definition |\n# Title : Profile directory file of the Argo Global Data Assembly Center# Description: The directory file describes all individual  profile files of the argo GDAC ftp site.# Project: ARGO# Format version: 2.1# Date of update: YYYYMMDDHHMISS# FTP root number 1:  ftp://ftp.ifremer.fr/ifremer/argo/dac # FTP root number 2:  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node: CORIOLISfile,date,latitude,longitude,ocean,profiler_type,institution,date_update,profile_temp_qc,profile_psal_qc,profile_doxy_qc,ad_psal_adjustment_mean, ad_psal_adjustment_deviation,gdac_date_creation,gdac_date_update,n_levels- file: path and file name on the ftp site. The file name contains the float number and the cycle number. Fill value : none, this field is mandatory\n\ndate: date of the profile, YYYYMMDDHHMISS Fill value : ” ” (blank)\nlatitude, longitude : location of the profile Fill value : 99999.\nocean: code of the ocean of the profile as described in reference table 13 Fill value : ” ” (blank)\nprofiler_type : type of profiling float as described in reference table 8 Fill value : ” ” (blank)\ninstitution: institution of the profiling float described in reference table 4 Fill value : ” ” (blank)\ndate_update: date of last update of the file, YYYYMMDDHHMISS Fill value: ” ” (blank)\nprofile_temp_qc,profile_psal_qc,profile_doxy_qc : global quality flag on temperature, salinity and oxygen profile. Fill value: ” ” (blank)\nad_psal_adjustment_mean : for delayed mode or adjusted mode Mean of psal_adjusted – psal on the deepest 500 meters with good psal_adjusted_qc (equal to 1) Fill value: ” ” (blank)\nad_psal_adjustment_deviation : for delayed mode or adjusted mode Standard deviation of psal_adjusted – psal on the deepest 500 meters with good psal_adjusted_qc (equal to 1) Fill value: ” ” (blank)\ngdac_date_creation : creation date of the file on GDAC, YYYYMMDDHHMISS\ngdac_date_update : update date of the file on GDAC, YYYYMMDDHHMISS\nn_levels :maximum number of pressure levels contained in a profileFill value: ” ” (blank)Each line describes a file of the GDAC ftp site. |\n\nProfile directory format example |\n# Title : Profile directory file of the Argo Global Data Assembly Center# Description : The directory file describes all individual profile files of the argo GDAC ftp site.# Project : ARGO# Format version : 2.1# Date of update : 20081025220004# FTP root number 1 : ftp://ftp.ifremer.fr/ifremer/argo/dac# FTP root number 2 : ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node : CORIOLISfile,date,latitude,longitude,ocean,profiler_type,institution,date_update,profile_temp_qc,profile_psal_qc,profile_doxy_qc,ad_psal_adjustment_mean,ad_psal_adjustment_deviationaoml/13857/profiles/R13857_001.nc,19970729200300,0.267,-16.032,A,845,AO,20080918131927,A, , , , aoml/13857/profiles/R13857_002.nc,19970809192112,0.072,-17.659,A,845,AO,20080918131929,A, , , , aoml/13857/profiles/R13857_003.nc,19970820184545,0.543,-19.622,A,845,AO,20080918131931,A, , , ,…meds/3900084/profiles/D3900084_099.nc,20050830130800,-45.74,-58.67,A,846,ME,20060509152833,A,A, ,0.029,0.000meds/3900084/profiles/D3900084_103.nc,20051009125300,-42.867,-56.903,A,846,ME,20060509152833,A,A, ,-0.003,0.000… |\n\n\n3.7.3 Trajectory index file format 2.0\nThe trajectory directory file describes all trajectory files of the GDAC ftp site. Its format is an auto-descriptive ASCII with comma separated values. \nThe directory file contains:\n\nA header with a list of general informations: title, description, project name, format version, date of update, ftp root addresses, GDAC node\nA table with a description of each file of the GDAC ftp site. This table is a comma separated list.\n\nTrajectory directory format definition |\n# Title : Trajectory directory file of the Argo Global Data Assembly Center# Description : The directory file describes all trajectory files of the argo GDAC ftp site.# Project : ARGO# Format version : 2.0# Date of update : YYYYMMDDHHMISS# FTP root number 1 :  ftp://ftp.ifremer.fr/ifremer/argo/dac # FTP root number 2 :  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node : CORIOLISfile, latitude_max, latitude_min, longitude_max, longitude_min, profiler_type, institution,parameters,  date_updatefile : path and file name on the ftp site Fill value : none, this field is mandatorylatitude_max, latitude_min, longitude_max, longitude_min : extreme locations of the float Fill values : 99999.profiler_type : type of profiling float as described in reference table 8 Fill value : ” ” (blank)institution : institution of the profiling float described in reference table 4 Fill value : ” ” (blank)parameters: blank separated list of parameters Fill value : ” ” (blank)date_update : date of last update of the file, YYYYMMDDHHMISS Fill value : ” ” (blank) |\nTrajectory directory format example |\n# Title : Trajectory directory file of the Argo Global Data Assembly Center# Description : The directory file describes all trajectory files of the argo GDAC ftp site.# Project : ARGO# Format version : 2.0# Date of update : 20031028075500# FTP root number 1 :  ftp://ftp.ifremer.fr/ifremer/argo/dac # FTP root number 2 :  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac# GDAC node : CORIOLISfile, latitude_max, latitude_min, longitude_max, longitude_min, profiler_type, institution, date_updateaoml/13857/13857_traj.nc,1.25,0.267,-16.032,-18.5,0845,AO,20030214155117aoml/13857/13857_traj.nc,0.072,-17.659,A,0845,AO,20030214155354aoml/13857/13857_traj.nc,0.543,-19.622,A,0845,AO,20030214155619…jma/29051/29051_traj.nc,32.280,30.280,143.238,140.238,846,JA,20030212125117jma/29051/29051_traj.nc,32.352,30.057,143.206,140.115,846,JA,20030212125117 |\n\n\n3.7.4 Metadata directory file format 2.0\nThe metadata directory file describes all metadata files of the GDAC ftp site. Its format is an auto descriptive ASCII with comma separated values. \nThe directory file contains:\n\nA header with a list of general informations : title, description, project name, format version, date of update, ftp root addresses, GDAC node\nA table with a description of each file of the GDAC ftp site. This table is a comma separated list.\n\n\n\n\nMetadata directory format definition\n\n\n\n\n\n# Title : Metadata directory file of the Argo Global Data Assembly Center # Description : The directory file describes all metadata files of the argo GDAC ftp site. # Project : ARGO# Format version : 2.0 # Date of update : YYYYMMDDHHMISS # FTP root number 1 :  ftp://ftp.ifremer.fr/ifremer/argo/dac # FTP root number 2 :  ftp://usgodae.usgodae.org/pub/outgoing/argo/dac # GDAC node : CORIOLIS file, profiler_type, institution, date_update\n\nfile : path and file name on the ftp site Fill value : none, this field is mandatory\nprofiler_type : type of profiling float as described in reference table 8 Fill value : ” ” (blank)\ninstitution : institution of the profiling float described in reference table 4 Fill value : ” ” (blank)\ndate_update : date of last update of the file, YYYYMMDDHHMISS Fill value : ” ” (blank)\n\n\n\n\n\n\n\nMetadata directory example\n\n\n\n\n# Title : Metadata directory file of the Argo Global Data Assembly Center# Description : The directory file describes all metadata files of the argo GDAC ftp site.# Project : ARGO # Format version : 2.0 # Date of update : 20031028075500 # FTP root number 1 : ftp://ftp.ifremer.fr/ifremer/argo/dac  # FTP root number 2 : ftp://usgodae.usgodae.org/pub/outgoing/argo/dac # GDAC node : CORIOLIS file, profiler_type, institution, date_update aoml/13857/13857_meta.nc,0845,AO,20030214155117 aoml/13857/13857_meta.nc,0845,AO,20030214155354 aoml/13857/13857_meta.nc,0845,AO,20030214155619 … jma/29051/29051_meta.nc,846,JA,20030212125117 jma/29051/29051_meta.nc,846,JA,20030212125117",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Formats description</span>"
    ]
  },
  {
    "objectID": "chapter3.html",
    "href": "chapter3.html",
    "title": "4  Reference tables",
    "section": "",
    "text": "4.1 Reference table 1: data type\nThe Argo reference tables are managed on Argo Vocabulary Server hosted on Nerc Vocabulary server (NVS). The Argo tables are prefixed with “R”:* https://vocab.nerc.ac.uk/collection\nhttps://vocab.nerc.ac.uk/collection/R01/current This table contains the list of acceptable values for the DATA_TYPE field.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-2-argo-quality-control-flag-scale",
    "href": "chapter3.html#reference-table-2-argo-quality-control-flag-scale",
    "title": "4  Reference tables",
    "section": "4.2 Reference table 2: Argo quality control flag scale",
    "text": "4.2 Reference table 2: Argo quality control flag scale\n\n4.2.1 Reference table 2: quality control flag scale\nhttps://vocab.nerc.ac.uk/collection/RR2/current \nhttps://vocab.nerc.ac.uk/collection/RD2/current  A quality flag indicates the quality of an observation.The flags are assigned in real-time or delayed mode according to the Argo quality control manual available at:*  http://www.argodatamgt.org/Documentation\n\n\n\n\n\n\n\n\n\nn \nMeaning\nReal-time comment(applicable to &lt;PARAM&gt;_QC in ‘R’ mode and &lt;PARAM&gt;_ADJUSTED_QC in ‘A’ mode)\nDelayed-mode comment(applicable to &lt;PARAM&gt;_ADJUSTED_QC in ‘D’ mode)\n\n\n\n\n0\nNo QC is performed\nNo QC is performed.\nNo QC is performed.\n\n\n1\nGood data\nGood data. All Argo real-time QC tests passed. These measurements are good within the limits of the Argo real-time QC tests.\nGood data. No adjustment is needed, or the adjusted value is statistically consistent with good quality reference data. An error estimate is supplied.\n\n\n2\nProbably good data\nProbably good data. These measurements are to be used with caution.\nProbably good data. Delayed-mode evaluation is based on insufficient information. An error estimate is supplied.\n\n\n3\nProbably bad data that are potentially adjustable\nProbably bad data. These measurements are not to be used without scientific adjustment, e.g. data affected by sensor drift but may be adjusted in delayed-mode.\nProbably bad data. An adjustment may (or may not) have been applied, but the value may still be bad. An error estimate is supplied.\n\n\n4\nBad data\nBad data. These measurements are not to be used. A flag ‘4’ indicates that a relevant real-time qc test has failed. A flag ‘4’ may also be assigned for bad measurements that are known to be not adjustable, e.g. due to sensor failure.\nBad data. Not adjustable. Adjusted data are replaced by FillValue.\n\n\n5\nValue changed\nValue changed\nValue changed\n\n\n6\nNot used\nNot used\nNot used\n\n\n7\nNot used\nNot used\nNot used\n\n\n8\nEstimated value\nEstimated value (interpolated, extrapolated or other estimation). \nEstimated value (interpolated, extrapolated or other estimation).\n\n\n9\nMissing value\nMissing value. Data parameter will record FillValue.\nMissing value. Data parameter will record FillValue.\n\n\n‘ ‘\nFillValue\nEmpty space in NetCDF file.\nEmpty space in NetCDF file*.\n\n\n\n\n\n\n4.2.2 Reference table 2a: overall profile quality flag\nhttps://vocab.nerc.ac.uk/collection/RP2/current N is defined as the percentage of levels with good data where:* QC flag values of 1, 2, 5, 8 (only used in S-files) are GOOD data\n\nQC flag values of 0 (no QC), 9 (missing) or “ “ (FillValue) are NOT USED in the computation\nQC flag values of 3, 4 are BAD dataThe computation should be taken from &lt;PARAM_ADJUSTED&gt;_QC if available and from &lt;PARAM&gt;_QC otherwise.\n\n\n\n\nn \nMeaning\n\n\n“ “\nNo QC is performed or no usable flag values are present\n\n\nA\nN = 100%; All profile levels contain good data.\n\n\nB\n75% &lt;= N &lt; 100%\n\n\nC\n50% &lt;= N &lt; 75%\n\n\nD\n25% &lt;= N &lt; 50%\n\n\nE\n0% &lt; N &lt; 25%\n\n\nF\nN = 0%; No profile levels have good data.\n\n\n\n\n5 levels are flagged as 2\n7 levels are flagged as 4\n3 levels are flagged as 9 (missing)Percentage of good levels =  ( (45 + 5) / 57) * 100 = 87.7%PROFILE_TEMP_QC = “B”;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-3-parameter-code-table",
    "href": "chapter3.html#reference-table-3-parameter-code-table",
    "title": "4  Reference tables",
    "section": "4.3 Reference table 3: parameter code table",
    "text": "4.3 Reference table 3: parameter code table\nhttps://vocab.nerc.ac.uk/collection/R03/current   The following table describes the parameter codes used for Argo data management. The detailed parameter codes tables is available on Argo data-management web site: - http://www.argodatamgt.org/Documentation \nParameter attributes\n\nThe C_Format, Fortran_Format and Format_resolution attributes are float/sensor dependents. They are set by the DAC (Data Assembly Centre).\n\nIf new parameters are required, they have to be added to this table before they will be accepted.\nA request for new parameters can be sent for approval and inclusion.\nNote on resolution\nFor each parameter, the resolution attribute is mandatory. However, the resolution value is sensor dependent.\n\n4.3.1 How to indicate multiple sensors for the same parameter\nSome floats are equipped with multiple sensors, measuring the same physical parameter. In that case, add the integer with an underscore “_n” at the end of the code of the parameter.\nThe integer “_n” starts with “_2” and increases by 1 when there are more than two sensors measuring the same physical parameter.\nExample\nIf a float has one Optode and one SBE oxygen sensor:\n\nUse DOXY and TEMP_DOXY for Optode\nUse DOXY_2 for SBE\n\nIf a float has two Optode oxygen sensors:\n\nUse DOXY and TEMP_DOXY, and DOXY_2 and TEMP_DOXY_2\n\nIf a float has four SBE oxygen sensors:\n\nUse DOXY, DOXY_2, DOXY_3, DOXY_4\n\n\n\n4.3.2 Oxygen related parameters\nSome Argo floats perform Oxygen observation from different types of sensors, such as the Aanderaa Optode or the Seabird SBE 43/IDO.To provide homogeneous observations from heterogeneous sensors, oxygen measurement should be converted and reported as DOXY.* DOXY is the dissolved oxygen concentration estimated from the telemetered, calibrations coefficients and CTD values: PRES, TEMP (or TEMP_DOXY) and PSAL.\nPressure and salinity compensations (e.g. Optode) are taken into account.\n\nDOXY unit: micromole/kg\nDOXY_ADJUSTED is the dissolved oxygen concentration corrected for any sensor drift and offset. DOXY_ADJUSTED is calculated from the other “ADJUSTED” fields.Calibration coefficients, equations and references used to convert the telemetered variables in DOXY must be carefully documented in the metadata.The Argo oxygen data management is described at:* http://www.argodatamgt.org/Documentation , Cookbook documents, “Processing Argo oxygen data at the DAC level”",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-4-data-centres-and-institutions-codes",
    "href": "chapter3.html#reference-table-4-data-centres-and-institutions-codes",
    "title": "4  Reference tables",
    "section": "4.4 Reference table 4: data centres and institutions codes",
    "text": "4.4 Reference table 4: data centres and institutions codes\nhttps://vocab.nerc.ac.uk/collection/R04/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-5-location-classes",
    "href": "chapter3.html#reference-table-5-location-classes",
    "title": "4  Reference tables",
    "section": "4.5 Reference table 5: location classes",
    "text": "4.5 Reference table 5: location classes\nhttps://vocab.nerc.ac.uk/collection/R05/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-6-data-state-indicators",
    "href": "chapter3.html#reference-table-6-data-state-indicators",
    "title": "4  Reference tables",
    "section": "4.6 Reference table 6: data state indicators",
    "text": "4.6 Reference table 6: data state indicators\nhttps://vocab.nerc.ac.uk/collection/R06/current Data state indicator recommended use The following table describes the processing stage of data and the value to be assigned the data state indicator (DS Indicator). It is the concatenation of level and class described above.\n\n\n\n\n\n\n\nProcessing Stage\nDS Indicator\n\n\n1. Data pass through a communications system and arrive at a processing centre. The data resolution is the highest permitted by the technical constraints of the floats and communications system.\n0A (note 1)\n\n\n2. The national centre assembles all of the raw information into a complete profile located in space and time.\n1A (note 2)\n\n\n3. The national centre passes the data through automated QC procedures and prepares the data for distribution on the GTS, to global servers and to PIs.\n2B\n\n\n4. Real-time data are received at global data centres that apply QC including visual inspection of the data. These are then distributed to users in near real-time\n2B+ (note 3)\n\n\n5. Data are reviewed by PIs and returned to processing centres. The processing centres forward the data to the global Argo servers.\n2C\n\n\n6. Scientists accept data from various sources, combine them as they see fit with other data and generate a product. Results of the scientific analysis may be returned to regional centres or global servers. Incorporation of these results improves the quality of the data.\n2C+\n\n\n7. Scientists working as part of GODAE generate fields of gridded products delivered in near real-time for distribution from the global servers. Generally, these products mostly will be based on data having passed through automated QC procedures.\n3B (note 4)\n\n\n8. Scientists working as part of GODAE generate fields of gridded products delivered with some time delay for distribution from the global servers. Generally, these products mostly will be based on data having passed through manual or more sophisticated QC procedures than employed on the real-time data.\n3C\n\n\n\n\nThe conversion of the raw data stream from the communications system into profiles of variables causes the data state indicator to switch from level 0 to 1.\nEven though the data at global data centres use manual or semi-automated QC procedures, there is often not the intercomparisons to larger data collections and fields that would qualify the data state indicator to be set to class C. This is generally only provided by scientific scrutiny of the data.\nThe transition from class 2 to 3 occurs when assumptions of scales of variability are applied. During the course of normal data processing it is common to carry out some averaging and sub-sampling. This is usually done to exploit oversampling by the instrument, and to ensure good measurements are achieved. These are considered to be part of the geospatial and temporal referencing process.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-7-history-action-codes",
    "href": "chapter3.html#reference-table-7-history-action-codes",
    "title": "4  Reference tables",
    "section": "4.7 Reference table 7: history action codes",
    "text": "4.7 Reference table 7: history action codes\nhttps://vocab.nerc.ac.uk/collection/R07/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-8-instrument-types",
    "href": "chapter3.html#reference-table-8-instrument-types",
    "title": "4  Reference tables",
    "section": "4.8 Reference table 8: instrument types",
    "text": "4.8 Reference table 8: instrument types\nhttps://vocab.nerc.ac.uk/collection/R08/current The instrument type codes come from WMO table 1770.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-9-positioning-system",
    "href": "chapter3.html#reference-table-9-positioning-system",
    "title": "4  Reference tables",
    "section": "4.9 Reference table 9: positioning system",
    "text": "4.9 Reference table 9: positioning system\nhttps://vocab.nerc.ac.uk/collection/R09/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-10-transmission-system",
    "href": "chapter3.html#reference-table-10-transmission-system",
    "title": "4  Reference tables",
    "section": "4.10 Reference table 10: transmission system",
    "text": "4.10 Reference table 10: transmission system\nhttps://vocab.nerc.ac.uk/collection/R10/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-11-qc-test-binary-ids",
    "href": "chapter3.html#reference-table-11-qc-test-binary-ids",
    "title": "4  Reference tables",
    "section": "4.11 Reference table 11: QC test binary IDs",
    "text": "4.11 Reference table 11: QC test binary IDs\nhttps://vocab.nerc.ac.uk/collection/R11/current This table is used to record the result of the quality control tests in the history section.The binary IDs of the QC tests are used to define the history variable HISTORY_QCTEST, whose value is computed by adding the binary ID together, then translating to a hexadecimal number. An example is given on §5.The test numbers and the test names are listed in the Argo Quality Control Manual:* §2.1 “Argo Real-Time Quality Control Test Procedures on Vertical Profiles”, and\n\n§2.2 “Argo Real-Time Quality Control Test Procedures on Trajectories”See http://www.argodatamgt.org/Documentation .",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-12-history-steps-codes",
    "href": "chapter3.html#reference-table-12-history-steps-codes",
    "title": "4  Reference tables",
    "section": "4.12 Reference table 12: history steps codes",
    "text": "4.12 Reference table 12: history steps codes\nhttps://vocab.nerc.ac.uk/collection/R12/current If individual centres wish to record other codes, they may add to this list as they feel is appropriate.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-13-ocean-codes",
    "href": "chapter3.html#reference-table-13-ocean-codes",
    "title": "4  Reference tables",
    "section": "4.13 Reference table 13: ocean codes",
    "text": "4.13 Reference table 13: ocean codes\nhttps://vocab.nerc.ac.uk/collection/R13/current The ocean codes are used in the GDAC ftp directory files. The ocean code is not used in Argo NetCDF files.  XXX * The Pacific/Atlantic boundary is 70°W.\n\nThe Pacific/Indian boundary is 145°E.\n4.14 The Atlantic/Indian boundary is 20°E.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-14-technical-parameter-names",
    "href": "chapter3.html#reference-table-14-technical-parameter-names",
    "title": "4  Reference tables",
    "section": "4.15 Reference table 14: technical parameter names",
    "text": "4.15 Reference table 14: technical parameter names\nhttps://vocab.nerc.ac.uk/collection/R14/current All  technical parameter names are standardized. The list of technical parameter names (14a) is available at:* http://www.argodatamgt.org/Media/Argo-Data-Management/Argo-Documentation/General-documentation/Data-format/Argo-technical-parameter-namesThe naming convention for technical parameters (14b) is available at:* http://www.argodatamgt.org/Media/Argo-Data-Management/Argo-Documentation/General-documentation/Data-format/Technical-parameter-naming-convention  If new names are required as new variables are reported by a float, they must be added to this table before they will be accepted. Requests for new names can be sent for approval and inclusion.Older style files will be accepted for a short time and then all technical files must use approved names for standardized variables",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-15-codes-of-trajectory-measurements-performed-within-a-cycle",
    "href": "chapter3.html#reference-table-15-codes-of-trajectory-measurements-performed-within-a-cycle",
    "title": "4  Reference tables",
    "section": "4.16 Reference Table 15: codes of trajectory measurements performed within a cycle",
    "text": "4.16 Reference Table 15: codes of trajectory measurements performed within a cycle\nhttps://vocab.nerc.ac.uk/collection/R15/current \nXXX Figure 1:  Figure showing float cycle and the cycle timing variables.  Floats can profile either on descent or ascent.  Most floats profile on ascent.  Their float path is shown with a solid black line.  Some floats profile on descent.  One such float, the new SOLO-II Deep float, has a cycle as shown by the dashed line.  Floats that profile on ascent would have the following mandatory cycle timings:* DST, DET,PET, DDET, AST, AET and all surface timesFloats that profile on descent might have the following cycle timings:* DST, DDET, DAST, DET, PET, AST, AET, and all surface times\nGeneral Measurement Code Table Key\n\n\n\n\n\n\n\nMeasurement code type\nDefinition\n\n\nAny code evenly divisible by 100 (e.g. 100, 200, 300, etc.)\nPrimary Measurement Codes (MC). Each marks a mandatory-to-fill cycle timing variable. These are very important for determining trajectory estimates. All are found in both the N_MEASUREMENT and N_CYCLE data arrays.\n\n\nAny code evenly divisible by 50 but not evenly divisible by 100 (e.g. 150, 250, 450, et)\nSecondary Measurement Codes (MC). Each marks a suggested-to-fill cycle timing variable. Secondary MC are not always applicable to all floats, but are very useful in determining trajectory estimates.\n\n\nAny code that falls in between any Primary or Secondary Measurement Code (span of 50 values). These codes describe data that are important cycle timing information but are not as important as the primary or secondary timing variables.The value span is subdivided into two halves. Measurement codes in this section will be described relative to the values of the Primary and Secondary codes.\nRelative Generic Codes. Values spanning from MC minus 24 to MC minus 1: Measurement codes that have lower value and within 24 of a Primary or Secondary Measurement Code. These code definitions are phrased generally, so can be attached to data from many different floats. These code values (MC minus 24 to MC minus 1) are assigned when a float records a measurement while transitioning TOWARDS the MC. The definitions of the MC from MC minus 24 to MC minus 1 are repeated for all Primary and Secondary MC. An example, most floats record pressure/temperature/salinity during drift. The float is transitioning towards PET (MC=300) during this period. Thus the pressure/temperature/salinity measurements will have an MC between MC minus 24 and MC minus 1 where MC=300 (thus between MC=276 and MC=299). Which value is chosen is determined by the measurement itself (See table below).Relative Specific Codes. Values spanning from MC plus 1 to MC plus 25: These are specific measurements that are generally NOT recorded by multiple float types. They are believed to be valuable enough in trajectory estimation that they are defined here, and not within the generically defined MC minus 24 to MC minus 1 span. MC codes in this span will be specific to the MC code, and will NOT be repeated for other Primary and Secondary MCs. An example, APEX floats report the “Down-time end date”, which is important in determining the start of ascent (MC=500). The MC for “Down-time end date” is recorded with MC plus 1 (MC=501).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-16-vertical-sampling-schemes",
    "href": "chapter3.html#reference-table-16-vertical-sampling-schemes",
    "title": "4  Reference tables",
    "section": "4.17 Reference table 16: vertical sampling schemes",
    "text": "4.17 Reference table 16: vertical sampling schemes\nhttps://vocab.nerc.ac.uk/collection/R16/current\nThis variable differentiates the various vertical sampling schemes for multiple profiles from a single cycle. This variable can vary between cycles to accommodate floats with two-way communication capabilities. The profile with N_PROF=1 is required to be the Primary sampling profile. Other profiles will have N_PROF &gt; 1 in any order. There can be only one Primary sampling profile, while other vertical sampling schemes can have more than one profile.\n\n\n\n\n\n\n\n\nCode (STRING256)FORMAT →  name: nominal measurement type [full description][ ] indicates optional\nN_PROF\nCode Description\n\n\nPrimary sampling: averaged [description]or Primary sampling: discrete [description]orPrimary sampling: mixed [description]\n1\nPrimary CTD measurements and measurements from auxiliary sensors that are taken at the same pressure levels and with the same sampling method as the Primary CTD profile. For auxiliary sensor measurements it is not required that all pressure levels contain data.\n\n\nSecondary sampling: averaged [description]orSecondary sampling: discrete [description]orSecondary sampling: mixed [description]\n&gt;1\nExcluding “Primary sampling”, this profile includes measurements that are taken at pressure levels different from the Primary CTD profile, or with sampling methods different from the Primary CTD profile. Measurements can be taken by the Primary CTD or by auxiliary sensors.\n\n\nNear-surface sampling: averaged,pumped/unpumped [description]orNear-surface sampling: discrete,pumped/unpumped [description]orNear-surface sampling: mixed,pumped/unpumped [description]\n&gt;1\nThis profile includes near-surface measurements that are focused on the top 5dbar of the sea surface. (For the purpose of cross-calibration, this profile can extend deeper than the top 5dbar so as to overlap with the Primary sampling profile.) These measurements are taken at pressure levels different from the Primary CTD profile, or with sampling methods different from the Primary CTD profile. If the Primary sampling profile measures above 5dbar in the same manner as deeper data, there is no need to place the near-surface data here.\n\n\nBounce sampling: averaged [description]orBounce sampling: discrete [description]orBounce sampling: mixed [description]\n&gt;1\nThis scheme contains profiles that are collected on multiple rises/falls during a single cycle. The profiles are temporally offset from each other and/or the Primary sampling profile. They can be sampled with the Primary CTD or with auxiliary sensors.\n\n\nUse the term ‘averaged’ if the data in the profile are pressure binned averages using multiple data measurements (pollings) from a sensor. Use the term ‘discrete’ if the data in the profile are from a single polling from a sensor. If both methods are used in the profile, use the term ‘mixed’.\n\n\n\n\n\n\nUpper sampling: 10 decibars slice thickness, 10 seconds sampling rate.\nDeep sampling: 25 decibars slice thickness, 10 seconds sampling rate.Chlorophyll (optical) sampling scheme:* The threshold between deep sampling and upper sampling is 300 decibars.\nUpper sampling: 1 decibar slice thickness, 1 seconds sampling rate.\nDeep sampling: 10 decibars slice thickness, 10 seconds sampling rate.\nDeepest sampling: 1000 decibars.\n\nDescription of the 2 vertical sampling schemes:  N_PROF=1: “Primary sampling: averaged [10 seconds sampling, 25 decibars average from bottom to 200 decibars, 10 seconds sampling, 10 decibars average from 200 decibars to surface]”N_PROF=2: “Secondary sampling: averaged [10 seconds sampling, 10 decibars average from 1000 decibars to 300 decibars, 1 second sampling, 1 decibar average from 300 decibars to surface]”\nExample for an APEX Iridium float with an Optode oxygen sensor and an auxiliary CTD for near-surface measurements N_PROF=1: “Primary sampling: averaged [2-dbar bin average]”N_PROF=2: “Secondary sampling: discrete [1.1 Hz CTD data, discrete DOXY]”N_PROF=3: “Near-surface sampling: discrete, unpumped [auxiliary CTD]”",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-17-obsolete",
    "href": "chapter3.html#reference-table-17-obsolete",
    "title": "4  Reference tables",
    "section": "4.18 Reference table 17: obsolete",
    "text": "4.18 Reference table 17: obsolete\nThis table has been removed.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-18-metadata-configuration-parameter-names",
    "href": "chapter3.html#reference-table-18-metadata-configuration-parameter-names",
    "title": "4  Reference tables",
    "section": "4.19 Reference table 18: metadata configuration parameter names",
    "text": "4.19 Reference table 18: metadata configuration parameter names\nhttps://vocab.nerc.ac.uk/collection/R18/current \nAll metadata variable names and configuration parameter names are standardized. The list of metadata variable names (18a) is available at:\n\nhttp://www.argodatamgt.org/Documentation  under “Argo Metadata Files”, “Metadata variable names”\n\nThe list of configuration parameter names (18b) is available at:\n\nhttp://www.argodatamgt.org/Documentation under “Argo Metadata Files”, “Configuration parameter names” If new names are required as new variables are reported by a float, they must be added to this table before they will be accepted. Please note that in this scheme, configuration parameter values are stored as numerals and therefore any parameters with logical or string input will require an equivalent numeric code to be added to the “Explanation” section of the Configuration parameter names table. Requests for new names can be sent for approval and inclusion.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-19-status-flags",
    "href": "chapter3.html#reference-table-19-status-flags",
    "title": "4  Reference tables",
    "section": "4.20 Reference table 19: STATUS flags",
    "text": "4.20 Reference table 19: STATUS flags\nhttps://vocab.nerc.ac.uk/collection/R19/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-20-grounded-flags",
    "href": "chapter3.html#reference-table-20-grounded-flags",
    "title": "4  Reference tables",
    "section": "4.21 Reference table 20: GROUNDED flags",
    "text": "4.21 Reference table 20: GROUNDED flags\nhttps://vocab.nerc.ac.uk/collection/R20/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-21-representative_park_pressure_status",
    "href": "chapter3.html#reference-table-21-representative_park_pressure_status",
    "title": "4  Reference tables",
    "section": "4.22 Reference table 21: REPRESENTATIVE_PARK_PRESSURE_STATUS",
    "text": "4.22 Reference table 21: REPRESENTATIVE_PARK_PRESSURE_STATUS\nhttps://vocab.nerc.ac.uk/collection/R21/current",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-22-platform_family",
    "href": "chapter3.html#reference-table-22-platform_family",
    "title": "4  Reference tables",
    "section": "4.23 Reference table 22: PLATFORM_FAMILY",
    "text": "4.23 Reference table 22: PLATFORM_FAMILY\nhttps://vocab.nerc.ac.uk/collection/R22/current Please note that this reference table is frequently updated to include new sensor and float models.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-23-platform_type",
    "href": "chapter3.html#reference-table-23-platform_type",
    "title": "4  Reference tables",
    "section": "4.24 Reference table 23: PLATFORM_TYPE",
    "text": "4.24 Reference table 23: PLATFORM_TYPE\nhttps://vocab.nerc.ac.uk/collection/R23/current Please note that this reference table is frequently updated to include new sensor and float models.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-24-platform_maker",
    "href": "chapter3.html#reference-table-24-platform_maker",
    "title": "4  Reference tables",
    "section": "4.25 Reference table 24:  PLATFORM_MAKER",
    "text": "4.25 Reference table 24:  PLATFORM_MAKER\nhttps://vocab.nerc.ac.uk/collection/R24/current Please note that this reference table is frequently updated to include new sensor and float models.3.25 Reference table 25: SENSORhttps://vocab.nerc.ac.uk/collection/R25/current Please note that this reference table is frequently updated to include new sensor and float models. You can",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-26-sensor_maker",
    "href": "chapter3.html#reference-table-26-sensor_maker",
    "title": "4  Reference tables",
    "section": "4.26 Reference table 26:  SENSOR_MAKER",
    "text": "4.26 Reference table 26:  SENSOR_MAKER\nhttps://vocab.nerc.ac.uk/collection/R26/current Please note that this reference table is frequently updated to include new sensor and float models.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-27-sensor_model",
    "href": "chapter3.html#reference-table-27-sensor_model",
    "title": "4  Reference tables",
    "section": "4.27 Reference table 27: SENSOR_MODEL",
    "text": "4.27 Reference table 27: SENSOR_MODEL\nhttps://vocab.nerc.ac.uk/collection/R27/current The SENSOR_MODEL variable is standardised, i.e. we expect the manufacturer followed by the standard model number, i.e. SBE41CP or AANDERAA_3830. If there is a version number for a particular model then this is mentioned in the SENSOR_FIRMWARE_VERSION field.\nNote that some biogeochemical sensors have different configurations, i.e. they are either in the pumped stream or not in the pumped stream. Sensor readings from those in the pumped vs unpumped stream can be very different. Some manufacturers do not distinguish this in the sensor model name. In order to capture this information there is a configuration parameter that specifies this, i.e. CONFIG_SensorInPumpedStream_LOGICAL, (Yes =1, No = 0). For the relevant sensors this configuration parameter should be filled in the metadata file for the launch configuration settings.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-28-controller_board_type_primary",
    "href": "chapter3.html#reference-table-28-controller_board_type_primary",
    "title": "4  Reference tables",
    "section": "4.28 Reference table 28: CONTROLLER_BOARD_TYPE_PRIMARY",
    "text": "4.28 Reference table 28: CONTROLLER_BOARD_TYPE_PRIMARY\nhttps://vocab.nerc.ac.uk/collection/R28/current The first part of the CONTROLLER_BOARD_TYPE_PRIMARY variable should contain one of the strings in the below table. The remainder of the string is free text and may contain more information on the controller board type to suit the float model. The free text should be delimited by square brackets ‘[]’. For example: “APF9 [iridium version xyz]”.\nPlease note that this reference table is sometimes updated to include new sensor and float models.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-29-battery_type",
    "href": "chapter3.html#reference-table-29-battery_type",
    "title": "4  Reference tables",
    "section": "4.29 Reference table 29: BATTERY_TYPE",
    "text": "4.29 Reference table 29: BATTERY_TYPE\nThis table has not been transferred to the NVS yet. The BATTERY_TYPE should be coded with the following frame: &lt;manufacturer&gt; &lt;battery_type&gt; &lt;voltage&gt; V [+&lt;manufacturer&gt; &lt;battery_type&gt; &lt;voltage&gt; V]\nWhere: &lt;manufacturer&gt; should be one of the following controlled list of battery manufacturers:\n\n\n\nList of battery manufacturers\n\n\n\n\nELECTROCHEM\n\n\nTADIRAN\n\n\nSAFT\n\n\n\n&lt; battery_type &gt; should be one of the following controlled list of battery types:\n\n\n\nList of battery types\n\n\n\n\nAlkaline\n\n\nLithium\n\n\nHybrid\n\n\n\n&lt;voltage&gt; stands for the initial battery voltage.\nExamples:\n\n\n\nELECTROCHEM Alkaline 12 V\n\n\nTADIRAN Lithium 24 V\n\n\nTADIRAN Alkaline 12 V + TADIRAN Lithium 12 V\n\n\nELECTROCHEM Lithium 24 V + ELECTROCHEM Hybrid 24 V",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-30-battery_packs-optional-field",
    "href": "chapter3.html#reference-table-30-battery_packs-optional-field",
    "title": "4  Reference tables",
    "section": "4.30 Reference table 30: BATTERY_PACKS (optional field)",
    "text": "4.30 Reference table 30: BATTERY_PACKS (optional field)\nThis table has not been transferred to the NVS yet. Although the BATTERY_PACKS variable is not mandatory, it is controlled. The format of the field should be as shown in the table below, where x indicates the number of packs (not the number of batteries in a pack). ‘Li’, ‘Alk’ or ‘Hyb’ abbreviations should be used.Examples:\n\n\n\nxDD y (x = number of packs, y = Li or Alk or Hyb)\n\n\nxC y (x = number of packs, y = Li or Alk or Hyb)\n\n\nxD y (x = number of packs, y = Li or Alk or Hyb)\n\n\nAny combination of above with + to join (eg 4DD Li + 1C Alk)\n\n\nU (Unknown)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-31-ending_cause-and-ending_cause_category",
    "href": "chapter3.html#reference-table-31-ending_cause-and-ending_cause_category",
    "title": "4  Reference tables",
    "section": "4.31 Reference table 31: ENDING_CAUSE and ENDING_CAUSE_CATEGORY",
    "text": "4.31 Reference table 31: ENDING_CAUSE and ENDING_CAUSE_CATEGORY\nThis table has not been transferred to the NVS yet. This vocabulary captures all the possible reasons why a float may have died. The “ending cause category” and “ending cause” for a float are stored in the “ANOMALY” variable of its meta-data file. They are reported with a “key0:value0,key1:value1” syntax where:\n\nkey0 = “ending_cause_category”\nkey1 = “ending_cause”The “ANOMALY” variable describes any anomalies or problems the float may have had. Anomalies or problems are comma separated statements.\n\nExample\nANOMALY = “from cycle 107 the immersion drift is not stable,ending_cause_category:hardware,ending_cause:ballast”\nBefore registration in the Argo vocabulary server, the “ending cause category” and “ending cause” terms are managed in the ArgoVocab-FloatsEndingCauses document.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-32-special_feature",
    "href": "chapter3.html#reference-table-32-special_feature",
    "title": "4  Reference tables",
    "section": "4.32 Reference table 32: SPECIAL_FEATURE",
    "text": "4.32 Reference table 32: SPECIAL_FEATURE\nThis table has not been transferred to the NVS yet.This vocabulary captures the possible SPECIAL_FEATURES in a float’s characteristics.Additional float features can be specified here such as algorithms used by the float.The SPECIAL_FEATURES variable in a float metadata file must be filled by the DAC, to indicate there are AUX data files (see https://argo.ucsd.edu/data/auxiliary-directory).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter3.html#reference-table-40-pi_name",
    "href": "chapter3.html#reference-table-40-pi_name",
    "title": "4  Reference tables",
    "section": "4.33 Reference table 40 : PI_NAME",
    "text": "4.33 Reference table 40 : PI_NAME\nhttps://vocab.nerc.ac.uk/collection/R40  This table captures the possible PI_NAME. Preferred label is composed in most cases by the first name in lower cases and the family name in upper cases. When there are several Principal Investigators, their names should be separated by commas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reference tables</span>"
    ]
  },
  {
    "objectID": "chapter4.html",
    "href": "chapter4.html",
    "title": "5  Data access",
    "section": "",
    "text": "5.1 File naming convention on GDACs\nThe whole Argo data set is available in real time and delayed mode from the global data centres (GDACs).\nThe FTP addresses are:\nThe whole Argo dataset is available in a one click download from Argo DOI (monthly updated)\nThe GDACs internet addresses are:\nThe 2 GDACs offer the same data set that is mirrored in real time.\nMore on GDACs organization: http://www.argodatamgt.org/Media/Argo-Data-Management/Argo-Documentation/General-documentation/GDAC-organisation\nThe GDAC ftp sites comply with the following naming conventions.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data access</span>"
    ]
  },
  {
    "objectID": "chapter4.html#file-naming-convention-on-gdacs",
    "href": "chapter4.html#file-naming-convention-on-gdacs",
    "title": "5  Data access",
    "section": "",
    "text": "5.1.1 Core-Argo individual profile files\nThe individual profile files are provided by the DACs (Data Assembly Centres). The core-Argo profile files contain the core parameters provided by a float: pressure, temperature, salinity, conductivity (PRES, TEMP, PSAL, CNDC). All additional parameters are managed in B-Argo data files (see §0).For floats that collect no more than 1 ascending and 1 descending profile per cycle the file names for individual profiles are &lt;R/D&gt;&lt;FloatWmoID&gt;_&lt;XXX&gt;&lt;D&gt;.nc where :* The initial R indicates Real-Time data, the initial D indicates Delayed-Mode data\n\nXXX is the cycle number\nThe second D indicates a descending profile (profiles without this D are collected during ascent). Note on &lt;XXX&gt; cycle numbers greater than 999When float reports a cycle greater than 999, the cycle number appears as 4 digits in the file name.Examples:  R5902319_999.nc, R5902319_1000.nc Note on &lt;R/D&gt; in profile file name* For core-files, the file name mode follows DATA_MODE in N_PROF = 1, which is the primary Argo CTD profile.  Hence a ‘R’-core file becomes a ‘D’-core file only when DATA_MODE(1) = ‘D’.  This file naming rule ensures that the integrity of the core Argo program is not affected by various miscellaneous secondary samplings.\nFor b-files and GDAC merged-files, when any DATA_MODE(N_PROF) changes to ‘D’, the file name mode changes to ‘D’.  This is because b-files and GDAC merged-files contain biogeochemical data, which can receive delayed-mode adjustments at different times.\n\n\n\n5.1.2 B-Argo data file\n\n5.1.2.1 B-Argo individual profile file\nA B-Argo profile file contains all the parameters from a float, except the core-Argo parameters temperature, salinity, conductivity (TEMP, PSAL, CNDC). A float that performs only CTD measurements does not have B-Argo data files. File naming convention\nB&lt;R/D&gt;&lt;FloatWmoID&gt;_&lt;XXX&gt;&lt;D&gt;.nc\n\nB : B-Argo file prefix\n&lt;R/D&gt;&lt;FloatWmoID&gt;_&lt;XXX&gt;&lt;D&gt;.nc : identical to Core-Argo file naming conventionExamples: BR1900045_083.nc, BR1900045_083D.nc, BD1900045_003.ncWhen float reports a cycle greater than 999, the cycle number appears as 4 digits in the file name.\n\n\n\n5.1.2.2 BGC-Argo individual synthetic profile file\nTo facilitate the use of BGC-Argo data, the GDAC merges each BGC-Argo file with its corresponding Core-Argo data file. The BGC-Argo synthetic profiles are documented in http://dx.doi.org/10.13155/55637 The synthetic file contains the core-Argo and BGC-Argo parameters listed on reference table 3 (https://vocab.nerc.ac.uk/collection/R03/). The intermediate parameters are ignored by the synthetic files. File naming convention\n\nS&lt;R/D&gt;&lt;FloatWmoID&gt;_&lt;XXX&gt;&lt;D&gt;.nc * S : synthetic BGC-Argo file prefix\n&lt;R/D&gt;&lt;FloatWmoID&gt;_&lt;XXX&gt;&lt;D&gt;.nc : identical to Core-Argo file naming convention\n\nExamples SR1900045_083.nc, SR1900045_083D.nc, SD1900045_003.nc\n\n\n\n5.1.3 Argo trajectory data file\nThe Argo trajectory files contain the core and BGC parameters provided by a float.\n&lt;FloatWmoID&gt;_&lt;R/D&gt;traj.nc\n\nR: real-time data\nD: delayed-mode data\n\nExamples 1900045_Rtraj.nc: real-time trajectory from float 1900045\n1900045_Dtraj.nc: delayed-mode trajectory from float 1900045\n\n\n5.1.4 Metadata file\n\n&lt;FloatWmoID&gt;_meta.nc\nExample : 1900045_meta.nc\n\n\n\n5.1.5 Technical Data file\n\n&lt;FloatWmoID&gt;_tech.nc\nExample : 1900045_tech.nc\n\n\n\n5.1.6 Auxiliary data files\nAuxiliary files are used for data and metadata that are not (yet) standardized among the Argo community.They typically contain data from new types of sensors or floats.Auxiliary data file format is NOT regulated, they are distributed on GDAC ftp server in the “aux” directory that is parallel to the “dac” directory.The float metadata file in the ‘dac’ directory includes a text in the SPECIAL_FEATURES variable to indicate that there is additional data in the auxiliary directory and the nature of that data.PIs are encouraged to use a file format that is easily readable – either NetCDF or ASCII that mimics the Argo data format version 3.1 if possible. A good practice (not an obligation) within DACs is to document their auxiliary files. Coriolis DAC auxiliary file formats are documented here: * Argo auxiliary files format for Coriolis DAC http://doi.org/10.13155/51995",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data access</span>"
    ]
  },
  {
    "objectID": "chapter4.html#other-data-sources",
    "href": "chapter4.html#other-data-sources",
    "title": "5  Data access",
    "section": "5.2 Other data sources",
    "text": "5.2 Other data sources\nAll Argo data are available from Argo GDACs (Global data centres).Most Argo data are also available from GTS (Global Telecommunication System), a network operated by WMO (World Meteorological Organization).Argo profiles data are distributed on GTS as BUFR messages with template n° 3-15-003. The description of these format is available from the WMO web site (https://public.wmo.int)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data access</span>"
    ]
  },
  {
    "objectID": "chapter5.html",
    "href": "chapter5.html",
    "title": "6  Using the History section of the Argo netCDF Structure",
    "section": "",
    "text": "6.1 Recording information about the Delayed Mode QC process\nWithin the netCDF format are a number of fields that are used to track the progression of the data through the data system. This section records the processing stages, results of actions that may have altered the original values and information about QC tests performed and failed. The purpose of this document is to describe how to use this section of the format.The creation of entries in the history section is the same for both profile and trajectory data. The next sections provide examples of what is expected. The information shown in the column labeled “Example” is what would be written into the associated “Field” name in the netCDF format.\nThe process of carrying out delayed mode QC may result in adjustments being made to observed variables. The table below shows how to record that the delayed mode QC has been done. Note that the fields HISTORY_SOFTWARE, HISTORY_SOFTWARE_RELEASE and HISTORY_REFERENCE are used together to document the name and version of software used to carry out the delayed QC, and the reference database used in the process. The contents of these three fields are defined locally by the person carrying out the QC.Example: History entry to record that delayed mode QC has been carried out\nNote(1) The present version of delayed mode QC only tests salinity and as such it is tempting to place “PSAL” in the _PARAMETER field. In future, delayed mode QC tests may include tests for temperature, pressure and perhaps other parameters. For this reason, simply addressing the software and version number will tell users what parameters have been tested.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using the History section of the Argo netCDF Structure</span>"
    ]
  },
  {
    "objectID": "chapter5.html#recording-information-about-the-delayed-mode-qc-process",
    "href": "chapter5.html#recording-information-about-the-delayed-mode-qc-process",
    "title": "6  Using the History section of the Argo netCDF Structure",
    "section": "",
    "text": "Field\nExample\nExplanation\n\n\nHISTORY_INSTITUTION\nCI\nSelected from the list in reference table 4 https://vocab.nerc.ac.uk/collection/R04\n\n\nHISTORY_STEP\nARSQ\nSelected from the list in reference table 12 https://vocab.nerc.ac.uk/collection/R12.\n\n\nHISTORY_SOFTWARE\nWJO\nThis is a locally defined name for the delayed mode QC process employed. \n\n\nHISTORY_SOFTWARE_RELEASE\n1\nThis is a locally defined indicator that identifies what version of the QC software is being used. \n\n\nHISTORY_REFERENCE\nWOD2001\nThis is a locally defined name for the reference database used for the delayed mode QC process.\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nIP\nSelected from the list in reference table 7 https://vocab.nerc.ac.uk/collection/R07.\n\n\nHISTORY_PARAMETER\nFillValue\nThis field does not apply (1)\n\n\nHISTORY_START_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_STOP_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_PREVIOUS_VALUE\nFillValue\nThis field does not apply\n\n\nHISTORY_QCTEST\nFillValue\nThis field does not apply",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using the History section of the Argo netCDF Structure</span>"
    ]
  },
  {
    "objectID": "chapter5.html#recording-processing-stages",
    "href": "chapter5.html#recording-processing-stages",
    "title": "6  Using the History section of the Argo netCDF Structure",
    "section": "6.2 Recording processing stages",
    "text": "6.2 Recording processing stages\nEach entry to record the processing stages has a similar form. An example is provided to show how this is done. Note that reference table 12 contains the present list of processing stages and there should be at least one entry for each of these through which the data have passed. If data pass through one of these steps more than once, an entry for each passage should be written and the variable N_HISTORY updated appropriately.Some institutions may wish to record more details of what they do. In this case, adding additional “local” entries to table 12 is permissible as long as the meaning is documented and is readily available. These individual additions can be recommended to the wider community for international adoption.\nExample: History entry to record decoding of the data.\n\n\n\nField\nExample\nExplanation\n\n\nHISTORY_INSTITUTION\nME\nSelected from the list in reference table 4 https://vocab.nerc.ac.uk/collection/R04.\n\n\nHISTORY_STEP\nARFM\nSelected from the list in reference table 12 https://vocab.nerc.ac.uk/collection/R12.\n\n\nHISTORY_SOFTWARE\nFillValue\nThis field does not apply\n\n\nHISTORY_SOFTWARE_RELEASE\nFillValue\nThis field does not apply\n\n\nHISTORY_REFERENCE\nFillValue\nThis field does not apply\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nIP\nSelected from the list in reference table 7 https://vocab.nerc.ac.uk/collection/R07.\n\n\nHISTORY_PARAMETER\nFillValue\nThis field does not apply\n\n\nHISTORY_START_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_STOP_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_PREVIOUS_VALUE\nFillValue\nThis field does not apply\n\n\nHISTORY_QCTEST\nFillValue\nThis field does not apply",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using the History section of the Argo netCDF Structure</span>"
    ]
  },
  {
    "objectID": "chapter5.html#recording-qc-tests-performed-and-failed",
    "href": "chapter5.html#recording-qc-tests-performed-and-failed",
    "title": "6  Using the History section of the Argo netCDF Structure",
    "section": "6.3 Recording QC Tests Performed and Failed",
    "text": "6.3 Recording QC Tests Performed and Failed\nThe delayed mode QC process is recorded separately from the other QC tests that are performed because of the unique nature of the process and the requirement to record other information about the reference database used. When other tests are performed, such as the automated real-time QC, a group of tests are applied all at once. In this case, instead of recording that each individual test was performed and whether or not the test was failed, it is possible to document all of this in two history records.The first documents what suite of tests was performed, and the second documents which tests in the suite were failed. A test is failed if the value is considered to be something other than good (i.e. the resulting QC flag is set to anything other than “1”). An example of each is provided. If data pass through QC more than once, an entry for each passage should be written and the variable N_HISTORY updated appropriately.Example: QC tests performed and failed.The example shown here records that the data have passed through real-time QC and that two tests failed. The encoding of tests performed is done by adding the ID numbers provided in reference table 11 for all tests performed, then translating this to a hexadecimal number and recording this result.\nRecord 1: Documenting the tests performed\n\n\n\nField\nExample\nExplanation\n\n\nHISTORY_INSTITUTION\nME\nSelected from the list in reference table 4 (https://vocab.nerc.ac.uk/collection/R04/).\n\n\nHISTORY_STEP\nARGQ\nSelected from the list in reference table 12 (https://vocab.nerc.ac.uk/collection/R12/).\n\n\nHISTORY_SOFTWARE\nFillValue\nThis field does not apply\n\n\nHISTORY_SOFTWARE_RELEASE\nFillValue\nThis field does not apply\n\n\nHISTORY_REFERENCE\nFillValue\nThis field does not apply\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nQCP$\nSelected from the list in reference table 7 (https://vocab.nerc.ac.uk/collection/R07/).\n\n\nHISTORY_PARAMETER\nFillValue\nThis field does not apply\n\n\nHISTORY_START_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_STOP_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_PREVIOUS_VALUE\nFillValue\nThis field does not apply\n\n\nHISTORY_QCTEST\n1BE\nThis is the result of all tests with IDs from 2 to 256 having been applied. See reference table 11 https://vocab.nerc.ac.uk/collection/R11.\n\n\n\nRecord 2: Documenting the tests that failed\n\n\n\nField\nExample\nExplanation\n\n\n\n\nHISTORY_INSTITUTION\nME\nSelected from the list in reference table 4 https://vocab.nerc.ac.uk/collection/R04.\n\n\nHISTORY_STEP\nARGQ\nSelected from the list in reference table 12 https://vocab.nerc.ac.uk/collection/R12.\n\n\nHISTORY_SOFTWARE\nFillValue\nThis field does not apply\n\n\nHISTORY_SOFTWARE_RELEASE\nFillValue\nThis field does not apply\n\n\nHISTORY_REFERENCE\nFillValue\nThis field does not apply\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nQCF$\nSelected from the list in reference table 7 https://vocab.nerc.ac.uk/collection/R07.\n\n\nHISTORY_PARAMETER\nFillValue\nThis field does not apply\n\n\nHISTORY_START_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_STOP_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_PREVIOUS_VALUE\nFillValue\nThis field does not apply\n\n\nHISTORY_QCTEST\nA0\nThis is the result when data fail tests with IDs of 32 and 128.See reference table 11 https://vocab.nerc.ac.uk/collection/R11.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using the History section of the Argo netCDF Structure</span>"
    ]
  },
  {
    "objectID": "chapter5.html#recording-changes-in-values",
    "href": "chapter5.html#recording-changes-in-values",
    "title": "6  Using the History section of the Argo netCDF Structure",
    "section": "6.4 Recording changes in values",
    "text": "6.4 Recording changes in values\nThe PIs have the final word on the content of the data files in the Argo data system. In comparing their data to others there may arise occasions when changes may be required in the data.We will use the example of recomputation of where the float first surfaced as an example. This computation process can be carried out once all of the messages from a float have been received. Not all real-time processing centres make this computation, but it can be made later on and added to the delayed mode data. If this is the case, we would insert the new position of the profile into the latitude and longitude fields in the profile and we would record the previous values in two history entries. Recording these allows us to return to the original value if we have made an error in the newly computed position. The two history entries would look as follows.\nExample: Changed latitude\n\n\n\nField\nExample\nExplanation\n\n\n\n\nHISTORY_INSTITUTION\nCI\nSelected from the list in reference table 4 https://vocab.nerc.ac.uk/collection/R04.\n\n\nHISTORY_STEP\nARGQ\nSelected from the list in reference table 12 https://vocab.nerc.ac.uk/collection/R12. \n\n\nHISTORY_SOFTWARE\nFillValue\nThis field does not apply\n\n\nHISTORY_SOFTWARE_RELEASE\nFillValue\nThis field does not apply\n\n\nHISTORY_REFERENCE\nFillValue\nThis field does not apply\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nCV\nSelected from the list in reference table 7 https://vocab.nerc.ac.uk/collection/R07.\n\n\nHISTORY_PARAMETER\nLAT$\nA new entry for reference table 3 https://vocab.nerc.ac.uk/collection/R03 created by institution CI to indicate changes have been made in the latitude.\n\n\nHISTORY_START_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_STOP_PRES\nFillValue\nThis field does not apply\n\n\nHISTORY_PREVIOUS_VALUE\n23.456\nThis is the value of the latitude before the change was made.\n\n\nHISTORY_QCTEST\nFillValue\nThis field does not apply\n\n\n\nNotes\n\nBe sure that the new value is recorded in the latitude and longitude of the profile section.\nBe sure that the POSITION_QC flag is set to “5” to indicate to a user that the value now in the position has been changed from the original one that was there.\nBe sure to record the previous value in history entries.It is also sometimes desirable to record changes in quality flags that may arise from reprocessing data through some QC procedures. In this example, assume that whereas prior to the analysis, all temperature values from 75 to 105 dbar were considered correct, after the analysis, they are considered wrong. The history entry to record this would look as follows.\n\nExample: Changed flags\n\n\n\nField\nExample\nExplanation\n\n\nHISTORY_INSTITUTION\nCI\nSelected from the list in reference table 4 https://vocab.nerc.ac.uk/collection/R04.\n\n\nHISTORY_STEP\nARGQ\nSelected from the list in reference table 12 https://vocab.nerc.ac.uk/collection/R12.\n\n\nHISTORY_SOFTWARE\nFillValue\nThis field does not apply\n\n\nHISTORY_SOFTWARE_RELEASE\nFillValue\nThis field does not apply\n\n\nHISTORY_REFERENCE\nFillValue\nThis field does not apply\n\n\nHISTORY_DATE\n20030805000000\nThe year, month, day, hour, minute, second that the process ran\n\n\nHISTORY_ACTION\nCF\nSelected from the list in reference table 7 https://vocab.nerc.ac.uk/collection/R07.\n\n\nHISTORY_PARAMETER\nTEMP\nSelected from the list in reference table 3 https://vocab.nerc.ac.uk/collection/R03.\n\n\nHISTORY_START_PRES\n75\nShallowest pressure of action.\n\n\nHISTORY_STOP_PRES\n105\nDeepest pressure of action.\n\n\nHISTORY_PREVIOUS_VALUE\n1\nThis is the value of the quality flag on temperature readings before the change was made.\n\n\nHISTORY_QCTEST\nFillValue\nThis field does not apply\n\n\n\nNotes The new QC flag of “4” (to indicate wrong values) would appear in the &lt;param&gt;_QC field.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using the History section of the Argo netCDF Structure</span>"
    ]
  },
  {
    "objectID": "chapter6.html",
    "href": "chapter6.html",
    "title": "7  DAC-GDAC data-management",
    "section": "",
    "text": "7.1 File submission from DAC to GDACs\nThis chapter describes the data management organization between Argo DACs and GDACS.\nEach DAC regularly submits all its new files to both USGODAE and Coriolis GDACs.On both GDACs, each DAC has an ftp account with:\nSeven types of files are accepted on GDAC:\nEach GDAC checks the file format. If agreed, the file is pushed on the GDAC ftp server or processed. Otherwise, the file is moved in the reject directory, an error message is sent to the DAC contact point. Rejected files are kept in the reject directory for one month at least.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>DAC-GDAC data-management</span>"
    ]
  },
  {
    "objectID": "chapter6.html#file-submission-from-dac-to-gdacs",
    "href": "chapter6.html#file-submission-from-dac-to-gdacs",
    "title": "7  DAC-GDAC data-management",
    "section": "",
    "text": "a submit directory to submit files\na reject directory that contains the submitted files that were rejected by GDACs files format checker.\n\n\n\nA float metadata file\nA float trajectory file\nA float technical data file\nA float’s cycle file\nThe DAC’s geylist\nA removal file\nA compressed file containing a series of above files",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>DAC-GDAC data-management</span>"
    ]
  },
  {
    "objectID": "chapter6.html#archived-doi-datasets",
    "href": "chapter6.html#archived-doi-datasets",
    "title": "7  DAC-GDAC data-management",
    "section": "7.2 Archived DOI datasets",
    "text": "7.2 Archived DOI datasets\nOnce a month, a snapshot of the whole Argo dataset is archived. This snapshot is added to the collection of monthly snapshots available with Argo GDAC DOI:\n\nArgo float data and metadata from Global Data Assembly Centre (Argo GDAC) https://doi.org/10.17882/42182\n\nA digital object identifier (DOI) is a unique identifier for an electronic document or a dataset. Argo data-management assigns DOIs to its documents and datasets for two main objectives:\n\nCitation: in a publication the DOI is efficiently tracked by bibliographic surveys\nTraceability: the DOI is a direct and permanent link to the document or data set used in a publication\n\nMonthly snapshot file naming convention and content\nYYYYMM-ArgoData.tar.gz\n\nYYYYMM year and month\n\nExample : 201906-ArgoData.tar.gz is the June 2019 snapshot of Argo data. The snapshot file has to be unzipped (gunzip file.tar.gz) and untared (tar xvf file.tar) in two directories: dac and geo.\n\ndac directory : content of the GDAC “dac” branch\n\nxxx_core.tar.gz xxx dac core Argo files\nxxx_bgc.tar.gz xxx dac bgc-Argo files\nargo_bio-profile_index.txt.gz bgc Argo profiles index file\nargo_bio-traj_index.txt.gz bgc Argo trajectories file\nargo_merge-profile_index.txt.gz merged Argo profiles index\nargo_profile_detailled_index.txt.gz Argo profiles detailed index\nargo_synthetic-profile_index.txt.gz Synthetic Argo profile files\nar_index_global_meta.txt.gz Index of metadata files\nar_index_global_prof.txt.gz Index of profile files\nar_index_global_tech.txt.gz Index of technical files\nar_index_global_traj.txt.gz Index of trajectories\n\ngeo directory: content of the GDAC “geo” branch\nOne compressed file per day and per ocean",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>DAC-GDAC data-management</span>"
    ]
  },
  {
    "objectID": "chapter6.html#compressed-files-data-submission",
    "href": "chapter6.html#compressed-files-data-submission",
    "title": "7  DAC-GDAC data-management",
    "section": "7.3 Compressed files data submission",
    "text": "7.3 Compressed files data submission\nA DAC can push to GDAC a compressed file containing a series of files. The GDAC will process all its content. This is useful to submit an important batch of files (example : delayed mode data). The compressed file is a tar-ed file or directory compressed with gzip.\nCompressed file naming convention\nXXX.tar.gz*\nXXX : the compressed file name, with no specific requirement\n\ntar : tar suffix\ngz : gzip suffix\n\nExample: coriolis-201210-DelayedMode.tar.gz",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>DAC-GDAC data-management</span>"
    ]
  },
  {
    "objectID": "chapter7.html",
    "href": "chapter7.html",
    "title": "8  Glossary, definitions",
    "section": "",
    "text": "8.1 Float\nThis chapter gives a definition for the items described in this manual.\nAn autonomous platform deployed in the sea that performs environmental monitoring.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#sensor",
    "href": "chapter7.html#sensor",
    "title": "8  Glossary, definitions",
    "section": "8.2 Sensor",
    "text": "8.2 Sensor\nA sensor is a device used to measure a physical parameter. Sensor outputs are provided in parameter counts and need to be converted into parameter physical units using a calibration equation. This conversion can be done onboard the float or during the decoding process.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#parameter-measured-by-the-sensor",
    "href": "chapter7.html#parameter-measured-by-the-sensor",
    "title": "8  Glossary, definitions",
    "section": "8.3 Parameter measured by the sensor",
    "text": "8.3 Parameter measured by the sensor\nA parameter is a measurement of a physical phenomenon; it can be provided by a sensor (in sensor counts or in physical units) or computed (derived) from other parameters.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#calibration-of-the-parameter-measured-by-the-sensor",
    "href": "chapter7.html#calibration-of-the-parameter-measured-by-the-sensor",
    "title": "8  Glossary, definitions",
    "section": "8.4 Calibration of the parameter measured by the sensor",
    "text": "8.4 Calibration of the parameter measured by the sensor\nVerification of any operation measurement against independent measurements to derive a corrected value or a new parameter.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#principal-investigator-pi",
    "href": "chapter7.html#principal-investigator-pi",
    "title": "8  Glossary, definitions",
    "section": "8.5 Principal Investigator (PI)",
    "text": "8.5 Principal Investigator (PI)\nThe Principal Investigator (PI), typically a scientist at a research institution, maintains the observing platform and the sensors that deliver the data. He or she is responsible for providing the data and all auxiliary information to a Data Assembly Center (DAC).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#global-data-assembly-centre-gdac",
    "href": "chapter7.html#global-data-assembly-centre-gdac",
    "title": "8  Glossary, definitions",
    "section": "8.6 Global Data Assembly Centre (GDAC)",
    "text": "8.6 Global Data Assembly Centre (GDAC)\nThe GDAC distributes the best copy of the data files. When a higher quality data file (e.g. calibrated data) is available, it replaces the previous version of the data file.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#data-assembly-centre-dac",
    "href": "chapter7.html#data-assembly-centre-dac",
    "title": "8  Glossary, definitions",
    "section": "8.7 Data Assembly Centre (DAC)",
    "text": "8.7 Data Assembly Centre (DAC)\nThe DAC assembles Argo files and delivers these to the two Global Data Assembly Centers (GDACs).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  },
  {
    "objectID": "chapter7.html#gts",
    "href": "chapter7.html#gts",
    "title": "8  Glossary, definitions",
    "section": "8.8 GTS",
    "text": "8.8 GTS\nWMO’s Global Telecommunication System (GTS) is the communications and data management component that allows the World Weather Watch (WWW) to operate through the collection and distribution of information critical to its processes.\nWMO : World Meteorological Organization",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Glossary, definitions</span>"
    ]
  }
]